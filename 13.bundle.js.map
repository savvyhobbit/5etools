{"version":3,"sources":["webpack:///./components/views/character/dnd-character-builder-suboptions.js"],"names":["DndCharacterBuilderSuboptions","storageKey","type","String","selectedItem","Object","profOptions","value","profChoices","Number","profSelection","Array","defaultProfs","attributeOptions","attributeChoices","attributeSelection","defaultAttributes","featOptions","featChoices","featSelection","isEditMode","Boolean","super","connectedCallback","this","characterChangeHandler","e","character","detail","updateFromCharacter","addEventListener","editModeHandler","disconnectedCallback","removeEventListener","storageKeys","split","storedItem","backgroundSkills","choose","backgroundSkillProfOptions","from","backgroundSkillProfChoices","count","backgroundSkillProfSelections","backgroundSkillProficiencies","undefined","defaultBackgroundSkillProf","map","join","raceAttributes","raceAttributeOptions","i","toUpperCase","raceAttributeChoices","raceAttributeSelections","defaultRaceAttribute","attribute","toLowerCase","mod","dispatchEvent","CustomEvent","bubbles","composed","skills","attr","race","linkData","name","source","push","dataLink","bg","arg","arguments","constructor","entries","length","isArray","customElements","define"],"mappings":"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","file":"13.bundle.js","sourcesContent":["import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n    getCharacterChannel,\n    getSelectedCharacter,\n    getRaceAttributeOptions,\n    getRaceAttributeDefaults,\n    setRaceAttributes,\n    getBackgroundSkillProfOptions,\n    getBackgroundSkillProfDefaults,\n    setBackgroundSkillProficiencies,\n} from \"../../../util/charBuilder\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { util_capitalizeAll, absInt, initCollapseToggles, encodeForHash } from \"../../../js/utils\"; \n    \nclass DndCharacterBuilderSuboptions extends PolymerElement {\n    static get properties() {\n        return {\n            storageKey: {\n                type: String\n            },\n            selectedItem: {\n                type: Object\n            },\n\n            profOptions: {\n                type: Object,\n                value: []\n            },\n            profChoices: {\n                type: Number,\n            },\n            profSelection: {\n                type: Array,\n            },\n            defaultProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            attributeOptions: {\n                type: Object,\n                value: []\n            },\n            attributeChoices: {\n                type: Number,\n            },\n            attributeSelection: {\n                type: Array,\n            },\n            defaultAttributes: {\n                type: String,\n                value: \"\"\n            },\n\n            featOptions: {\n                type: Array\n            },\n            featChoices: {\n                type: Number\n            },\n            featSelection: {\n                type: Array,\n            },\n\n            isEditMode: {\n                type: Boolean,\n                value: false\n            },\n        };\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.characterChangeHandler = (e) => {\n            let character = e.detail.character;\n            this.updateFromCharacter(character);\n        };\n        \n        this.updateFromCharacter(getSelectedCharacter());\n        getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n        this.editModeHandler = (e) => {\n            this.isEditMode = e.detail.isEditMode;\n        }\n        getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n        this.isEditMode = isEditMode();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n        getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n    }\n\n    async updateFromCharacter(character) {\n        if (character && this.storageKey && this.selectedItem) {\n            const storageKeys = this.storageKey.split('.');\n            let storedItem = character;\n\n            for (let storageKey of storageKeys) {\n                storedItem = storedItem[storageKey];\n            }\n\n            this.profOptions = '';\n            this.profChoices = '';\n            this.profSelection = '';\n            this.defaultProfs = '';\n\n            this.attributeOptions = '';\n            this.attributeChoices = '';\n            this.attributeSelection = '';\n            this.defaultAttributes = '';\n\n            this.featOptions = '';\n            this.featChoices = '';\n            this.featSelection = '';\n            \n            /////\n            // Skills from Background\n            let backgroundSkills = await getBackgroundSkillProfOptions();\n            if (backgroundSkills && backgroundSkills.choose) {\n                this.backgroundSkillProfOptions = backgroundSkills.choose.from;\n                this.backgroundSkillProfChoices = backgroundSkills.choose.count || 1;\n                this.backgroundSkillProfSelections = character.backgroundSkillProficiencies;\n            } else {\n                this.backgroundSkillProfOptions = undefined;\n                this.backgroundSkillProfChoices = undefined;\n                this.backgroundSkillProfSelections = undefined;\n            }\n            let defaultBackgroundSkillProf = await getBackgroundSkillProfDefaults(backgroundSkills);\n            this.defaultBackgroundSkillProf = defaultBackgroundSkillProf.map(e => { return util_capitalizeAll(e) }).join(', ');\n    \n            // Attributes from Race\n            let raceAttributes = await getRaceAttributeOptions();\n            if (raceAttributes && raceAttributes.choose) {\n                this.raceAttributeOptions = raceAttributes.choose.from.map(i => { return i.toUpperCase() });\n                this.raceAttributeChoices = raceAttributes.choose.count || 1;\n                this.raceAttributeSelections = character.raceAttributes;\n            } else {\n                this.raceAttributeOptions = undefined;\n                this.raceAttributeChoices = undefined;\n                this.raceAttributeSelections = undefined;\n            }\n            let defaultRaceAttribute = await getRaceAttributeDefaults(raceAttributes);\n            this.defaultRaceAttribute = defaultRaceAttribute\n                .map(e => {\n                let attribute = e[0].toLowerCase(),\n                    mod = e[1];\n                return attribute.toUpperCase() + ' ' + absInt(mod);\n                }).join(', ');\n            \n            this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n        }\n    }\n\n    _backgroundSkillAddCallback(skills) {\n        setBackgroundSkillProficiencies(skills);\n    }\n\n    _raceAttributeAddCallback(attr) {\n        setRaceAttributes(attr);\n    }\n\n    _getRaceLink(race) {\n        let linkData = [race.name];\n        if (race.source) {\n            linkData.push(race.source);\n        }\n        let dataLink = encodeForHash(linkData);\n        return race ? `#/races/${dataLink}` : '#/races'\n    }\n\n    _getBackgroundLink(bg) {\n        let linkData = [bg.name];\n        if (bg.source) {\n            linkData.push(bg.source);\n        }\n        let dataLink = encodeForHash(linkData);\n        return bg ? `#/backgrounds/${dataLink}` : '#/backgrounds'\n    }\n\n    _showEmpty(isEditMode, value) {\n        return !isEditMode && !value;\n    }\n\n    _exists() {\n        for (let arg of arguments) {\n            if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n            return true;\n            }\n        }\n        return false;\n    }\n\n    static get template() {\n        return html`\n            <style include=\"material-styles my-styles\">\n            body {}\n            :host {\n                display: block;\n                padding: 14px;\n            }\n            [hidden] {\n                display: none !important;\n            }\n\n            .col-wrap {\n                display: flex; \n                justify-content: space-between;\n                flex-wrap: wrap;\n                margin-bottom: 200px;\n            }\n\n            .row-wrap {\n                width: 100%;\n            }\n            .row-wrap:first-child {\n                margin-bottom: 24px;\n            }\n\n            .row-wrap > *:not(h2):not(:last-child) {\n                margin-bottom: 10px;\n            }\n\n            .heading {\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                justify-content: space-between;\n            }\n            .reference-link:hover {\n                color: var(--mdc-theme-secondary);\n            }\n\n            .default-selection {\n                font-size: 14px;\n                margin-bottom: 0 !important;\n            }\n\n            .default-selection span {\n                color: var(--mdc-theme-secondary)\n            }\n\n            .missing-text {\n                font-style: italic;\n                font-size: 14px;\n            }\n\n            @media(min-width: 420px) {\n                .heading {\n                justify-content: flex-start;\n                }\n                .reference-link {\n                margin-left: 8px;\n                }\n            }\n\n            @media(min-width: 921px) {\n                .row-wrap {\n                width: calc(50% - 10px);\n                }\n                .row-wrap:first-child {\n                margin-bottom: 0;\n                }\n            }\n\n            h2 {\n                display: block;\n                font-size: 1.5em;\n                margin-block-start: 0.83em;\n                margin-block-end: 0.83em;\n                margin-inline-start: 0px;\n                margin-inline-end: 0px;\n                font-weight: bold;\n            }\n\n            h3 {\n                font-size: 24px;\n                font-weight: bold;\n                margin-bottom: 8px;\n            }\n            .details-container  {\n                background: var(--lumo-contrast-10pct);\n                padding: 14px;\n                border-radius: 4px;\n                font-size: 14px;\n            }\n            .stats-wrapper.margin-bottom_large {\n                margin-bottom: 0px !important;\n            }\n            </style>\n\n            <div class=\"col-wrap\">\n            <div class=\"row-wrap\">\n                <div class=\"heading\">\n                <h2>Race</h2>\n                <a class=\"reference-link mdc-icon-button material-icons\" href=\"[[_getRaceLink(selectedRace)]]\">launch</a>\n                </div>\n                <dnd-select-add model=\"races\" value=\"[[selectedRace]]\" placeholder=\"<Choose Race>\" disabled$=\"[[!isEditMode]]\" hidden$=\"[[_showEmpty(isEditMode, selectedRace)]]\"></dnd-select-add>\n                <div class=\"missing-text\" hidden$=\"[[_exists(raceAttributeOptions, defaultRaceAttribute)]]\">Select Race to add Attribute Bonuses</div>\n                <div hidden$=\"[[!_exists(raceAttributeOptions, defaultRaceAttribute)]]\">Attribute Bonuses from Race:</div>\n                <div hidden$=\"[[!_exists(defaultRaceAttribute)]]\" class=\"default-selection\">Default Attributes: <span>[[defaultRaceAttribute]]</span></div>\n                <dnd-select-add hidden$=\"[[!_exists(raceAttributeOptions)]]\" disabled$=\"[[!isEditMode]]\" choices=\"[[raceAttributeChoices]]\" placeholder=\"<Choose Attribute>\" label=\"Chosen Attribute(s)\"\n                options=\"[[raceAttributeOptions]]\" value=\"[[raceAttributeSelections]]\" add-callback=\"[[_raceAttributeAddCallback]]\"></dnd-select-add>\n            </div>\n\n            <div class=\"row-wrap\">\n                <div class=\"heading\">\n                <h2>Background</h2>\n                <a class=\"mdc-icon-button material-icons\" href=\"[[_getBackgroundLink(selectedBackground)]]\">launch</a>\n                </div>\n                <dnd-select-add model=\"backgrounds\" value=\"[[selectedBackground]]\" placeholder=\"<Choose Background>\" disabled$=\"[[!isEditMode]]\" hidden$=\"[[_showEmpty(isEditMode, selectedBackground)]]\"></dnd-select-add>\n                <div class=\"missing-text\" hidden$=\"[[_exists(backgroundSkillProfOptions, defaultBackgroundSkillProf)]]\">Select Background to add Skill Proficiencies</div>\n                <div hidden$=\"[[!_exists(backgroundSkillProfOptions, defaultBackgroundSkillProf)]]\">Skill Proficiencies from Background:</div>\n                <div hidden$=\"[[!_exists(defaultBackgroundSkillProf)]]\" class=\"default-selection\">Default Skills: <span>[[defaultBackgroundSkillProf]]</span></div>\n                <dnd-select-add hidden$=\"[[!_exists(backgroundSkillProfOptions)]]\" disabled$=\"[[!isEditMode]]\" choices=\"[[backgroundSkillProfChoices]]\" placeholder=\"<Choose Skills>\" label=\"Chosen Skill(s)\" disabled$=\"[[!isEditMode]]\"\n                options=\"[[backgroundSkillProfOptions]]\" value=\"[[backgroundSkillProfSelections]]\" add-callback=\"[[_backgroundSkillAddCallback]]\"></dnd-select-add>\n            </div>\n            </div>\n        `;\n    }\n}\n\ncustomElements.define(\"dnd-character-builder-suboptions\", DndCharacterBuilderSuboptions);"],"sourceRoot":""}