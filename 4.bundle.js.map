{"version":3,"sources":["webpack:///./node_modules/@vaadin/vaadin-checkbox/src/vaadin-checkbox.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-text-field.js","webpack:///./node_modules/@vaadin/grid/theme/lumo/vaadin-grid-tree-toggle-styles.js","webpack:///./node_modules/@vaadin/grid/src/vaadin-grid-tree-toggle.js","webpack:///./components/views/character/dnd-character-builder-spells.js"],"names":["console","warn","moduleId","template","document","createElement","innerHTML","head","appendChild","content","level","type","Number","value","observer","leaf","Boolean","reflectToAttribute","expanded","notify","super","ready","this","addEventListener","e","_onClick","target","HTMLLabelElement","preventDefault","toString","style","setProperty","customElements","define","is","DndCharacterBuilderSpells","spellsKnown","Object","preparedSpells","noContentMessage","isEditMode","filterStr","String","expandedItems","Array","length","oldExpanded","$","grid","expandAll","clearCache","setTimeout","undefined","_filterChange","__filterChangeThrottled","bind","connectedCallback","characterChangeHandler","character","detail","updateFromCharacter","refresh","editModeHandler","disconnectedCallback","removeEventListener","multiclassSlotsDef","fullCasterSlotsDef","halfCasterSlotsDef","thirdCasterSlotsDef","dataProvider","params","callback","startIndex","page","pageSize","children","parentItem","spellDisplay","filter","child","hasDecendentWithFilter","toLowerCase","slice","node","name","indexOf","findExpandables","array","id","push","classRefs","classLevels","proficiencyBonus","spellsKnownObj","spellMods","className","classLevel","entries","classRef","casterSourceRef","isSubclass","tableGroups","classTableGroups","casterName","casterProgression","subclasses","subclassDef","find","i","shortName","subclassTableGroups","spellsKnownOrPrepared","spellsKnowPreparedType","cantripsKnown","cantripProgression","warlockSpellLevel","warlockSpellSlots","spellsKnownProgression","levelMultiplier","attributeModifier","spellcastingAbility","Math","floor","error","subclassName","classSpellList","searchSource","source","searchName","replaceAll","trim","key","divineSoulSpellList","Set","concat","spellTable","tableGroup","title","spellSlotEntries","rowsSpellProgression","spellSlots","hasCantrips","oldSpellsPrepared","oldCantripsPrepared","preparedCantrips","map","index","spellList","spell","sort","a","b","isCantrip","isPrepared","isAlwaysPrepared","hasChildren","parentClass","parentLevel","isWarlock","levelObj","currentSlots","some","item","slots","current","keys","max","maxCantrips","currentCantrips","classObj","spellPrepType","multiclassingLevels","additionalSpellChoices","values","choices","c","additionalSpells","spellsModel","addtlSpellsObj","forEach","spellChoice","defaultSpells","selectedSpells","spellChoiceEntry","spells","s","addtlSpell","spellDef","spellLevel","spellClass","label","storedItemName","selectedItemName","addtlSpellsClass","addtlSpellsClassVal","spellDisplayForClass","sdClass","hadToAddClass","addtlSpellsClassLevel","addtlSpellsClassLevelVal","parsedAddtlSpellsClassLevel","parseInt","spellDisplayForClassLevel","sdLevel","spellAlreadyAdded","uses","spellUseType","ability","selectedAbility","defaultAbility","superLabel","l","join","otherSpells","Other","otherSpellLevel","otherSpellList","otherSpell","destListType","destList","otherSpellsObj","newSpellDisplay","otherClass","multiclassLevel","isMulticlass","adjIndex","multiclassSlotsArray","spellLvl","spellDisplayForLevel","sd","currentWarlockSlots","dispatchEvent","CustomEvent","bubbles","composed","stopPropagation","model","_toggleCantripPrepared","_isPreparedSpell","currentPreparedCount","_currentSpellsKnownCount","maxPreparedCount","_maxSpellsKnownCount","spellsKnownCopy","JSON","parse","stringify","splice","_flashPreparedButton","_isPreparedCantrip","_currentCantripsKnownCount","_maxCantripsKnownCount","buttonEl","classList","add","remove","isInput","maxSlots","checked","_setSpellSlotsChecked","count","el","checkboxes","querySelectorAll","spellName","prepareType","data","spLevelToFull","spellParent","meta","ritual","duration","d","concentration","time","t","unit","SP_SCHOOL_ABV_TO_FULL","school","clas","num"],"mappings":"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","file":"4.bundle.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Checkbox } from '@vaadin/checkbox/src/vaadin-checkbox.js';\n\n/**\n * @deprecated Import `Checkbox` from `@vaadin/checkbox` instead.\n */\nexport const CheckboxElement = Checkbox;\n\nexport * from '@vaadin/checkbox/src/vaadin-checkbox.js';\n\nconsole.warn('WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-checkbox\" is deprecated. Use \"@vaadin/checkbox\" instead.');\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { TextField } from '@vaadin/text-field/src/vaadin-text-field.js';\n\n/**\n * @deprecated Import `TextField` from `@vaadin/text-field` instead.\n */\nexport const TextFieldElement = TextField;\n\nexport * from '@vaadin/text-field/src/vaadin-text-field.js';\n\nconsole.warn(\n  'WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/text-field\" instead.',\n);\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-grid-tree-toggle',\n  css`\n    :host {\n      --vaadin-grid-tree-toggle-level-offset: 2em;\n      align-items: center;\n      vertical-align: middle;\n      transform: translateX(calc(var(--lumo-space-s) * -1));\n      -webkit-tap-highlight-color: transparent;\n    }\n\n    :host(:not([leaf])) {\n      cursor: default;\n    }\n\n    [part='toggle'] {\n      display: inline-block;\n      font-size: 1.5em;\n      line-height: 1;\n      width: 1em;\n      height: 1em;\n      text-align: center;\n      color: var(--lumo-contrast-50pct);\n      cursor: var(--lumo-clickable-cursor);\n      /* Increase touch target area */\n      padding: calc(1em / 3);\n      margin: calc(1em / -3);\n    }\n\n    :host(:not([dir='rtl'])) [part='toggle'] {\n      margin-right: 0;\n    }\n\n    @media (hover: hover) {\n      :host(:hover) [part='toggle'] {\n        color: var(--lumo-contrast-80pct);\n      }\n    }\n\n    [part='toggle']::before {\n      font-family: 'lumo-icons';\n      display: inline-block;\n      height: 100%;\n    }\n\n    :host(:not([expanded])) [part='toggle']::before {\n      content: var(--lumo-icons-angle-right);\n    }\n\n    :host([expanded]) [part='toggle']::before {\n      content: var(--lumo-icons-angle-right);\n      transform: rotate(90deg);\n    }\n\n    /* Experimental support for hierarchy connectors, using an unsupported selector */\n    :host([theme~='connectors']) #level-spacer {\n      position: relative;\n      z-index: -1;\n      font-size: 1em;\n      height: 1.5em;\n    }\n\n    :host([theme~='connectors']) #level-spacer::before {\n      display: block;\n      content: '';\n      margin-top: calc(var(--lumo-space-m) * -1);\n      height: calc(var(--lumo-space-m) + 3em);\n      background-image: linear-gradient(\n        to right,\n        transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px),\n        var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px)\n      );\n      background-size: var(--vaadin-grid-tree-toggle-level-offset) var(--vaadin-grid-tree-toggle-level-offset);\n      background-position: calc(var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px) 0;\n    }\n\n    /* RTL specific styles */\n\n    :host([dir='rtl']) {\n      margin-left: 0;\n      margin-right: calc(var(--lumo-space-s) * -1);\n    }\n\n    :host([dir='rtl']) [part='toggle'] {\n      margin-left: 0;\n    }\n\n    :host([dir='rtl'][expanded]) [part='toggle']::before {\n      transform: rotate(-90deg);\n    }\n\n    :host([dir='rtl'][theme~='connectors']) #level-spacer::before {\n      background-image: linear-gradient(\n        to left,\n        transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px),\n        var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px)\n      );\n      background-position: calc(100% - (var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px)) 0;\n    }\n\n    :host([dir='rtl']:not([expanded])) [part='toggle']::before,\n    :host([dir='rtl'][expanded]) [part='toggle']::before {\n      content: var(--lumo-icons-angle-left);\n    }\n  `,\n  { moduleId: 'lumo-grid-tree-toggle' },\n);\n","/**\n * @license\n * Copyright (c) 2016 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { isFocusable } from './vaadin-grid-active-item-mixin.js';\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = `\n  <style>\n    @font-face {\n      font-family: \"vaadin-grid-tree-icons\";\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAQkAA0AAAAABrwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAECAAAABoAAAAcgHwa6EdERUYAAAPsAAAAHAAAAB4AJwAOT1MvMgAAAZQAAAA/AAAAYA8TBIJjbWFwAAAB8AAAAFUAAAFeGJvXWmdhc3AAAAPkAAAACAAAAAgAAAAQZ2x5ZgAAAlwAAABLAAAAhIrPOhFoZWFkAAABMAAAACsAAAA2DsJI02hoZWEAAAFcAAAAHQAAACQHAgPHaG10eAAAAdQAAAAZAAAAHAxVAgBsb2NhAAACSAAAABIAAAASAIAAVG1heHAAAAF8AAAAGAAAACAACgAFbmFtZQAAAqgAAAECAAACTwflzbdwb3N0AAADrAAAADYAAABZQ7Ajh3icY2BkYGAA4twv3Vfi+W2+MnCzMIDANSOmbGSa2YEZRHEwMIEoAAoiB6sAeJxjYGRgYD7w/wADAwsDCDA7MDAyoAI2AFEEAtIAAAB4nGNgZGBg4GBgZgDRDAxMDGgAAAGbABB4nGNgZp7JOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDA+38d84P8BBgdmIAapQZJVYGAEAGc/C54AeJxjYYAAxlAIzQTELAwMBxgZGB0ACy0BYwAAAHicY2BgYGaAYBkGRgYQiADyGMF8FgYbIM3FwMHABISMDArP9/3/+/8/WJXC8z0Q9v8nEp5gHVwMMMAIMo+RDYiZoQJMQIKJARUA7WBhGN4AACFKDtoAAAAAAAAAAAgACAAQABgAJgA0AEIAAHichYvBEYBADAKBVHBjBT4swl9KS2k05o0XHd/yW1hAfBFwCv9sIlJu3nZaNS3PXAaXXHI8Lge7DlzF7C1RgXc7xkK6+gvcD2URmQB4nK2RQWoCMRiFX3RUqtCli65yADModOMBLLgQSqHddRFnQghIAnEUvEA3vUUP0LP0Fj1G+yb8R5iEhO9/ef/7FwFwj28o9EthiVp4hBlehcfUP4Ur8o/wBAv8CU+xVFvhOR7UB7tUdUdlVRJ6HnHWTnhM/V24In8JT5j/KzzFSi2E53hUz7jCcrcIiDDwyKSW1JEct2HdIPH1DFytbUM0PofWdNk5E5oUqb/Q6HHBiVGZpfOXkyUMEj5IyBuNmYZQjBobfsuassvnkKLe1OuBBj0VQ8cRni2xjLWsHaM0jrjx3peYA0/vrdmUYqe9iy7bzrX6eNP7Jh1SijX+AaUVbB8AAHicY2BiwA84GBgYmRiYGJkZmBlZGFkZ2djScyoLMgzZS/MyDQwMwLSruZMzlHaB0q4A76kLlwAAAAEAAf//AA94nGNgZGBg4AFiMSBmYmAEQnYgZgHzGAAD6wA2eJxjYGBgZACCKxJigiD6mhFTNowGACmcA/8AAA==) format('woff');\n      font-weight: normal;\n      font-style: normal;\n    }\n  </style>\n`;\n\ndocument.head.appendChild(template.content);\n\n/**\n * `<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\n * that provides toggle and level display functionality for the item tree.\n *\n * #### Example:\n * ```html\n * <vaadin-grid-column id=\"column\"></vaadin-grid-column>\n * ```\n * ```js\n * const column = document.querySelector('#column');\n * column.renderer = (root, column, model) => {\n *   let treeToggle = root.firstElementChild;\n *   if (!treeToggle) {\n *     treeToggle = document.createElement('vaadin-grid-tree-toggle');\n *     treeToggle.addEventListener('expanded-changed', () => { ... });\n *     root.appendChild(treeToggle);\n *   }\n *   treeToggle.leaf = !model.item.hasChildren;\n *   treeToggle.level = level;\n *   treeToggle.expanded = expanded;\n *   treeToggle.textContent = model.item.name;\n * };\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ---|---\n * `toggle` | The tree toggle icon\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * ---|---|---\n * `expanded` | When present, the toggle is expanded | :host\n * `leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n *\n * The following custom CSS properties are available on\n * the `<vaadin-grid-tree-toggle>` element:\n *\n * Custom CSS property | Description | Default\n * ---|---|---\n * `--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`\n *\n * @fires {CustomEvent} expanded-changed - Fired when the `expanded` property changes.\n *\n * @extends HTMLElement\n * @mixes ThemableMixin\n */\nclass GridTreeToggle extends ThemableMixin(DirMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: baseline;\n          max-width: 100%;\n\n          /* CSS API for :host */\n          --vaadin-grid-tree-toggle-level-offset: 1em;\n          --_collapsed-icon: '\\\\e7be\\\\00a0';\n        }\n\n        :host([dir='rtl']) {\n          --_collapsed-icon: '\\\\e7bd\\\\00a0';\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        :host(:not([leaf])) {\n          cursor: pointer;\n        }\n\n        #level-spacer,\n        [part='toggle'] {\n          flex: none;\n        }\n\n        #level-spacer {\n          display: inline-block;\n          width: calc(var(---level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\n        }\n\n        [part='toggle']::before {\n          font-family: 'vaadin-grid-tree-icons';\n          line-height: 1em; /* make icon font metrics not affect baseline */\n        }\n\n        :host(:not([expanded])) [part='toggle']::before {\n          content: var(--_collapsed-icon);\n        }\n\n        :host([expanded]) [part='toggle']::before {\n          content: '\\\\e7bc\\\\00a0'; /* icon glyph + single non-breaking space */\n        }\n\n        :host([leaf]) [part='toggle'] {\n          visibility: hidden;\n        }\n\n        slot {\n          display: block;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n      </style>\n\n      <span id=\"level-spacer\"></span>\n      <span part=\"toggle\"></span>\n      <slot></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-grid-tree-toggle';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Current level of the tree represented with a horizontal offset\n       * of the toggle button.\n       * @type {number}\n       */\n      level: {\n        type: Number,\n        value: 0,\n        observer: '_levelChanged',\n      },\n\n      /**\n       * Hides the toggle icon and disables toggling a tree sublevel.\n       * @type {boolean}\n       */\n      leaf: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * Sublevel toggle state.\n       * @type {boolean}\n       */\n      expanded: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        notify: true,\n      },\n    };\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addEventListener('click', (e) => this._onClick(e));\n  }\n\n  /** @private */\n  _onClick(e) {\n    if (this.leaf) {\n      return;\n    }\n    if (isFocusable(e.target) || e.target instanceof HTMLLabelElement) {\n      return;\n    }\n\n    e.preventDefault();\n    this.expanded = !this.expanded;\n  }\n\n  /** @private */\n  _levelChanged(level) {\n    const value = Number(level).toString();\n    this.style.setProperty('---level', value);\n  }\n}\n\ncustomElements.define(GridTreeToggle.is, GridTreeToggle);\n\nexport { GridTreeToggle };\n","import { PolymerElement,html } from \"@polymer/polymer\";\nimport { getCharacterChannel, getSelectedCharacter, getClassReferences, getClassLevelGroups, toggleSpellPrepared, saveCharacter, getAttributeModifier, isSpellPreparedFromObj, setSpellSlots, getSpellSlots, toggleCantripPrepared, getSubclassChoiceLevel, getSpellCastingStats, getCharacterProficiencyBonus } from \"../../../util/charBuilder\";\nimport { filterModel, loadModel } from \"../../../util/data\";\nimport { dispatchEditModeChange, getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { spellHtml } from \"../../../js/spells\";\nimport { findInPath, util_capitalize, util_capitalizeAll, debounce, cloneDeep } from \"../../../js/utils\";\nimport Parser from \"../../../util/Parser\";\nimport '@vaadin/polymer-legacy-adapter/template-renderer.js';\nimport \"@vaadin/vaadin-checkbox\";\nimport \"@vaadin/vaadin-text-field\";\nimport \"@vaadin/vaadin-grid\";\nimport \"@vaadin/vaadin-grid/vaadin-grid-tree-toggle\";\nimport \"../../dnd-button\";\n\nclass DndCharacterBuilderSpells extends PolymerElement {\n  \n  static get properties() {\n    return {\n      spellsKnown: {\n        type: Object,\n        value: {}\n      },\n      preparedSpells: {\n        type: Object,\n        value: {}\n      },\n      noContentMessage: {\n        type: Boolean,\n        value: false\n      },\n      isEditMode: {\n        type: Boolean,\n        value: false\n      },\n      filterStr: {\n        type: String,\n        value: '',\n        observer: '_filterChange'\n      },\n      expandedItems: {\n        type: Array\n      },\n    };\n  }\n\n  __filterChangeThrottled() {\n    if (this.filterStr.length) {\n      if (!this.oldExpanded) {\n        this.oldExpanded = this.$.grid.expandedItems;\n      }\n      this.expandAll();\n      this.$.grid.clearCache();\n      setTimeout(() => {\n        this.expandAll();\n      }, 10);\n    } else {\n      if (this.oldExpanded) {\n        this.$.grid.expandedItems = this.oldExpanded;\n        this.oldExpanded = undefined;\n      }\n      this.$.grid.clearCache();\n    }\n  }\n\n  constructor() {\n    super();\n\n    this._filterChange = debounce(this.__filterChangeThrottled.bind(this), 250);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    this.refresh = true;\n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\",this.characterChangeHandler);\n\n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n      this.refresh = true;\n      this.updateFromCharacter(getSelectedCharacter());\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    getCharacterChannel().removeEventListener(\"character-selected\",this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  ready() {\n    super.ready();\n\n    this.multiclassSlotsDef = [\n      [2],\n      [3],\n      [4,2],\n      [4,3],\n      [4,3,2],\n      [4,3,3],\n      [4,3,3,1],\n      [4,3,3,2],\n      [4,3,3,3,1],\n      [4,3,3,3,2],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1,1],\n      [4,3,3,3,3,1,1,1,1],\n      [4,3,3,3,3,2,1,1,1],\n      [4,3,3,3,3,2,2,1,1]\n    ];\n\n    this.fullCasterSlotsDef = [];\n\n    this.halfCasterSlotsDef = [];\n    \n    this.thirdCasterSlotsDef = [];\n\n    setTimeout(() => {\n      const grid = this.$.grid;\n\n      grid.dataProvider = ((params, callback) => {\n        const startIndex = params.page * params.pageSize;\n        let children = params.parentItem ? params.parentItem.children : this.spellDisplay;\n        if (this.filterStr.length) {\n          children = children.filter((child) => {\n            return this.hasDecendentWithFilter(child, this.filterStr.toLowerCase()) \n          });\n        }\n        if (children && children.length) {\n          const page = children.slice(startIndex, startIndex + params.pageSize);\n          callback(page, children.length);\n        }\n      }).bind(this);\n    }, 0);\n  }\n\n  hasDecendentWithFilter(node, filterStr) {\n    if (!node.name || node.name.toLowerCase().indexOf(filterStr) > -1) {\n      return true;\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        return this.hasDecendentWithFilter(child, filterStr);\n      }\n    }\n    return false;\n  }\n\n  clearFilterStr() {\n    this.filterStr = '';\n  }\n\n  expandAll() {\n    this.$.grid.expandedItems = this.findExpandables(this.spellDisplay);\n  }\n\n  findExpandables(node, array = []) {\n    if (node.id === 'level' || node.id === 'class') {\n      array.push(node);\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        this.findExpandables(child, array);\n      }\n    }\n    return array;\n  }\n\n  async updateFromCharacter(character) {\n    if (character && this.refresh) {\n      this.noContentMessage = true;\n      const classRefs = await getClassReferences(character),\n        classLevels = getClassLevelGroups(character),\n        proficiencyBonus = await getCharacterProficiencyBonus(),\n        expandedItems = [],\n        spellsKnownObj = {};\n      let spellDisplay = [];\n\n      this.spellMods = await getSpellCastingStats(character);\n\n      for (const [ className, classLevel ] of Object.entries(classLevels)) {\n        const classRef = classRefs[className];\n        let casterSourceRef = classRef;\n        let isSubclass = false;\n        let tableGroups = classRef.classTableGroups;\n        let casterName = className;\n\n        // Checking the class first for a caster progression, then checking subclass\n        if (!casterSourceRef.casterProgression) {\n          const subclassLevel = getSubclassChoiceLevel(classRef);\n          if (classLevel >= subclassLevel && character.subclasses && character.subclasses[className] && classRef.subclasses && classRef.subclasses.length) {\n            const subclassDef = classRef.subclasses.find(i => character.subclasses[className].name === i.name);\n            if (subclassDef && subclassDef.casterProgression) {\n              // replacing caster parsing references with that from subclass \n              casterSourceRef = subclassDef;\n              casterName = subclassDef.shortName;\n              tableGroups = subclassDef.subclassTableGroups;\n              isSubclass = true;\n            }\n          }\n        }\n\n        if (casterSourceRef.casterProgression) {\n          this.noContentMessage = false;\n          let spellsKnownOrPrepared;\n          let spellsKnowPreparedType;\n          const cantripsKnown = casterSourceRef.cantripProgression ? casterSourceRef.cantripProgression[classLevel - 1] : 0;\n          let warlockSpellLevel;\n          let warlockSpellSlots;\n\n          // Use spell known progression\n          if (casterSourceRef.spellsKnownProgression) {\n            spellsKnowPreparedType = 'known';\n            spellsKnownOrPrepared = casterSourceRef.spellsKnownProgression[classLevel - 1];\n            if (casterSourceRef.casterProgression === 'pact') {\n              warlockSpellLevel = [1,1,2,2,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,5][classLevel - 1];\n              warlockSpellSlots = [1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4][classLevel - 1];\n            }\n\n          // otherwise compute spells prepared\n          } else if (casterSourceRef.preparedSpells) {\n            spellsKnowPreparedType = 'prepared';\n            // todo, check 1/3 caster progression\n            const levelMultiplier = casterSourceRef.casterProgression === 'full' ? 1 : 0.51;\n            const attributeModifier = await getAttributeModifier(casterSourceRef.spellcastingAbility);\n            spellsKnownOrPrepared = Math.floor(classLevel * levelMultiplier) + attributeModifier;\n            spellsKnownOrPrepared = spellsKnownOrPrepared < 1 ? 1 : spellsKnownOrPrepared;\n\n          } else {\n            console.error('!!! neither prepared or known spells', casterSourceRef);\n          }\n\n          /* SPELL LISTS */\n          // Getting class spell list\n          let classSpellList = [];\n          let subclassName;\n          \n          if (isSubclass) {\n            subclassName = casterSourceRef.shortName;\n          } else {\n            // Revised Ranger fix\n            let searchSource = casterSourceRef.name.indexOf('(Revised)') > -1 ? 'PHB' : casterSourceRef.source;\n            let searchName = casterSourceRef.name.indexOf('(Revised)') > -1 ? casterSourceRef.name.replaceAll('(Revised)', '').trim() : casterSourceRef.name;\n            classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: searchName, source: searchSource } } );\n\n            const subclassLevel = getSubclassChoiceLevel(classRef);\n            if (classLevel >= subclassLevel) {\n              subclassName = character.subclasses && character.subclasses[className] ? character.subclasses[className].shortName : '';\n            }\n          }\n\n          // Spell lists borrowed from other classes\n          if (subclassName) {\n            if (subclassName === 'Eldritch Knight') {\n              classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'wizard', source: 'phb' } } );\n            }\n            if (subclassName === 'Divine Soul') {\n              let divineSoulSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'cleric', source: 'phb' } } );\n              classSpellList = [...new Set(classSpellList.concat(divineSoulSpellList))];\n            }\n          }\n\n          // Getting spell slots per level array\n          const spellTable = tableGroups.find((tableGroup) => tableGroup.title === \"Spell Slots\");\n          let spellSlotEntries;\n          if (spellTable) {\n            spellSlotEntries = spellTable.rowsSpellProgression[classLevel - 1].filter((spellSlots) => spellSlots !== 0);\n          } else {\n            // If no spell slots per level, then we're a warlock, get spell entries for\n            // warlocks with zero spell slots at each level (pact slots will be added later)\n            spellSlotEntries = [];\n            for (let i = 0; i < warlockSpellLevel; i++) {\n              spellSlotEntries.push(0);\n            }\n          }\n\n          // Adding cantrips entry\n          const hasCantrips = cantripsKnown ? 0 : 1;\n          if (cantripsKnown) {\n            spellSlotEntries = [0].concat(spellSlotEntries);\n          }\n\n          // Clearing prepared spells to filter out those that can no longer be prepared\n          let oldSpellsPrepared = cloneDeep(character.preparedSpells);\n          let oldCantripsPrepared = cloneDeep(character.preparedCantrips);\n          character.preparedSpells[casterName] = {};\n          character.preparedCantrips[casterName] = {};\n          \n\n          // Generating hierarchical structure of classes > levels > spells > spellDef\n          const spellSlots = spellSlotEntries.map((spellSlots, index) => {\n            if (spellSlots !== -1) {\n              let spellList = classSpellList\n                .filter((spell) => {\n                  return spell.level === index + hasCantrips;\n                })\n                .sort((a, b) => {\n                  if (a.name < b.name) { return -1; }\n                  if (a.name > b.name) { return 1; }\n                  return 0;\n                })\n                .map(spell => {\n                  const isCantrip = index + hasCantrips === 0;\n                  const isPrepared = isCantrip ? isSpellPreparedFromObj(casterName, spell, oldCantripsPrepared) : isSpellPreparedFromObj(casterName, spell, oldSpellsPrepared);\n                  if (isPrepared) {\n                    if (isCantrip) {\n                      character.preparedCantrips[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    } else {\n                      character.preparedSpells[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    }\n                  }\n                  if (this.isEditMode || isPrepared || spell.isAlwaysPrepared) {\n                    return {\n                      id: 'spell',\n                      name: spell.name, \n                      children: [{...spell, hasChildren: false, id: 'spelldef', parentClass: casterName, parentLevel: index + hasCantrips} ],\n                      hasChildren: true,\n                      parentClass: casterName,\n                      parentLevel: index + hasCantrips,\n                      isCantrip,\n                      isAlwaysPrepared: spell.isAlwaysPrepared,\n                      isWarlock: !!warlockSpellLevel\n                    };\n                  } else {\n                    return undefined;\n                  }\n                })\n                .filter((spell) => spell !== undefined);\n\n              const levelObj = {\n                id: 'level',\n                level: index + hasCantrips,\n                spellSlots,\n                currentSlots: getSpellSlots(index + hasCantrips),\n                children: spellList,\n                hasChildren: spellList.length > 0,\n                parentClass: casterName,\n                isWarlock: !!warlockSpellLevel\n              };\n              const isExpanded = this.$.grid.expandedItems.some(item => item.id === 'level' && item.level === levelObj.level && item.parentClass === levelObj.parentClass);\n              if (isExpanded) {\n                expandedItems.push(levelObj);\n              }\n              return levelObj;\n            } else {\n              return null\n            }\n          }).filter(slots => slots !== null);\n\n          spellsKnownObj[casterName] = {\n            current: character.preparedSpells && character.preparedSpells[casterName] ? Object.keys(character.preparedSpells[casterName]) : [],\n            max: spellsKnownOrPrepared,\n            type: spellsKnowPreparedType,\n            maxCantrips: cantripsKnown,\n            currentCantrips: character.preparedCantrips && character.preparedCantrips[casterName] ? Object.keys(character.preparedCantrips[casterName]) : []\n          };\n\n          if (spellSlots.length) {\n            const classObj = {\n              id: 'class',\n              className: casterName,\n              level: classLevel,\n              hasCantrips,\n              children: spellSlots,\n              spellsKnown: spellsKnownOrPrepared,\n              hasChildren: spellSlots.length > 0,\n              spellPrepType: spellsKnowPreparedType,\n              multiclassingLevels: isSubclass ? 0 : Math.floor((classRef.casterProgression === 'full' ? 1 : 0.5) * classLevel),\n              isWarlock: !!warlockSpellLevel,\n              warlockSpellLevel,\n              warlockSpellSlots\n            };\n            expandedItems.push(classObj);\n            spellDisplay.push(classObj);\n          }\n        }\n      } // end level loop\n\n      // Parsing additionalSpells\n      const additionalSpellChoices = Object.values(character.choices).filter((c) => !!c.additionalSpells);\n      const spellsModel = await loadModel('spells');\n      const addtlSpellsObj = {};\n      additionalSpellChoices.forEach(spellChoice => {\n        const allAddtlSpells = spellChoice.additionalSpells.defaultSpells.concat(spellChoice.additionalSpells.selectedSpells);\n\n        allAddtlSpells.forEach((spellChoiceEntry) => {\n          const spellsForThisEntry = spellChoiceEntry.spells ? spellChoiceEntry.spells.map(s=> { return {...spellChoiceEntry, ...s}}) : [spellChoiceEntry];\n\n          spellsForThisEntry.forEach((addtlSpell) => {\n            const spellDef = spellsModel.find(s => s.name.toLowerCase() === addtlSpell.name.toLowerCase() && s.source.toLowerCase() === addtlSpell.source.toLowerCase());\n            \n            if (spellDef) {\n              const spellLevel = spellDef.level;\n              const spellClass = spellChoice.label && (addtlSpell.type === 'expanded' || addtlSpell.type === 'prepared' || addtlSpell.type === 'known') && Object.keys(classLevels).find((c) => c.toLowerCase() === spellChoice.label.toLowerCase()) ? spellChoice.label : 'Other';\n\n              if (!addtlSpellsObj[spellClass]) {\n                addtlSpellsObj[spellClass] = {};\n              }\n              if (!addtlSpellsObj[spellClass][spellLevel]) {\n                addtlSpellsObj[spellClass][spellLevel] = [];\n              }\n  \n              addtlSpellsObj[spellClass][spellLevel].push({storedItemName: spellChoice.selectedItemName, ...spellChoice.additionalSpells,...addtlSpell, ...spellChoiceEntry, label: spellChoice.label, spellDef});\n            }\n          })\n        });\n      });\n      console.error('addtlSpellsObj', addtlSpellsObj, spellDisplay);\n\n      // Adding additional spells\n      Object.entries(addtlSpellsObj).forEach(([addtlSpellsClass, addtlSpellsClassVal]) => {\n        this.noContentMessage = false;\n\n        if (addtlSpellsClass !== 'Other') {\n          let spellDisplayForClass = spellDisplay.find((sdClass) => sdClass.className.toLowerCase() === addtlSpellsClass),\n            hadToAddClass = false;\n\n          // If no class entry exists, class is not a spell caster so adding one manually\n          if (!spellDisplayForClass) {\n            hadToAddClass = true;\n            spellDisplay.push({\n              id: 'class',\n              className: util_capitalize(addtlSpellsClass),\n              level: 0,\n              hasCantrips: false,\n              children: [],\n              spellsKnown: 0,\n              hasChildren: true,\n              spellPrepType: 'always',\n              multiclassingLevels: 0,\n              isWarlock: false,\n              warlockSpellLevel: 0,\n              warlockSpellSlots: 0,\n              hadToAddClass: true\n            });\n            spellDisplayForClass = spellDisplay[spellDisplay.length - 1];\n            expandedItems.push(spellDisplayForClass);\n          }\n          Object.entries(addtlSpellsClassVal).forEach(([addtlSpellsClassLevel, addtlSpellsClassLevelVal]) => {\n            const parsedAddtlSpellsClassLevel = parseInt(addtlSpellsClassLevel);\n            let spellDisplayForClassLevel = spellDisplayForClass.children.find(sdLevel => sdLevel.level === parsedAddtlSpellsClassLevel) || null;\n\n            // Adding level if needed and not already present for class\n            if (!spellDisplayForClassLevel && (parsedAddtlSpellsClassLevel === 0 || hadToAddClass)) {\n              spellDisplayForClass.children = [{\n                id: 'level',\n                level: parsedAddtlSpellsClassLevel,\n                hasChildren: true,\n                children: [],\n                parentClass: addtlSpellsClass\n              }].concat(spellDisplayForClass.children);\n              spellDisplayForClassLevel = spellDisplayForClass.children[0];\n              if (spellDisplayForClass.children.find((c => c.level === 0))) {\n                spellDisplayForClass.hasCantrips = 0;\n              }\n            }\n\n            if (spellDisplayForClassLevel) {\n              addtlSpellsClassLevelVal.forEach(addtlSpell => {\n                const spellAlreadyAdded = spellDisplayForClassLevel.children.find((s) => s.children[0].name === addtlSpell.spellDef.name && s.children[0].source === addtlSpell.spellDef.source);\n\n                if (spellAlreadyAdded) {\n                  spellAlreadyAdded.isAlwaysPrepared = true;\n                  spellAlreadyAdded.spellSlots = addtlSpell.uses === 'proficiency' ? proficiencyBonus : addtlSpell.uses;\n                  spellAlreadyAdded.spellUseType = addtlSpell.type;\n                  spellAlreadyAdded.currentSlots = character.spellSlots && character.spellSlots[addtlSpell.spellDef.name] ? character.spellSlots[addtlSpell.spellDef.name] : 0\n                  spellAlreadyAdded.ability = addtlSpell.selectedAbility || addtlSpell.defaultAbility;\n                  spellAlreadyAdded.superLabel = [addtlSpell.label, addtlSpell.storedItemName].filter(l => !!l).map(util_capitalize).join(': ');\n                } else {\n                  spellDisplayForClassLevel.children.push({\n                    id: 'spell',\n                    name: addtlSpell.spellDef.name,\n                    children: [{...addtlSpell.spellDef, hasChildren: false, id: 'spelldef', parentClass: addtlSpellsClass, parentLevel: addtlSpellsClassLevel, uses: addtlSpell.uses} ],\n                    hasChildren: true,\n                    parentClass: addtlSpellsClass,\n                    parentLevel: addtlSpellsClassLevel,\n                    isCantrip: addtlSpellsClassLevel === 0,\n                    isAlwaysPrepared: true,\n                    isWarlock: addtlSpellsClass === 'warlock',\n                    spellUseType: addtlSpell.type,\n                    spellSlots: addtlSpell.uses === 'proficiency' ? proficiencyBonus : addtlSpell.uses,\n                    ability: addtlSpell.selectedAbility || addtlSpell.defaultAbility,\n                    currentSlots: character.spellSlots && character.spellSlots[addtlSpell.spellDef.name] ? character.spellSlots[addtlSpell.spellDef.name] : 0,\n                    superLabel: [addtlSpell.label, addtlSpell.storedItemName].filter(l => !!l).map(util_capitalize).join(': ')\n                  });\n                }\n              })\n            }\n          });\n\n        // Other additional Spells\n        } else {\n          const otherSpells = [] \n          Object.entries(addtlSpellsObj.Other).forEach(([otherSpellLevel, otherSpellList]) => {\n            otherSpellList.forEach((otherSpell) => {\n              const destListType = otherSpell.type === 'will' || otherSpell.spellDef.level === 0 ? 'At Will' : 'Innate';\n              let destList = otherSpells.find(l => l.level === destListType);\n              if (!destList) {\n                destList = {\n                  id: 'level',\n                  level: destListType,\n                  spellSlots: 0,\n                  currentSlots: 0,\n                  children: [],\n                  hasChildren: true,\n                  parentClass: 'Other'\n                }\n                otherSpells.push(destList);\n              }\n              destList.children.push({\n                id: 'spell',\n                name: otherSpell.spellDef.name,\n                children: [{...otherSpell.spellDef, hasChildren: false, id: 'spelldef', parentClass: \"Other\", parentLevel: \"Other\"} ],\n                hasChildren: true,\n                parentClass: \"Other\",\n                parentLevel: \"Other\",\n                isCantrip: false,\n                isAlwaysPrepared: true,\n                isWarlock: false,\n                spellUseType: otherSpell.type,\n                spellSlots: otherSpell.uses === 'proficiency' ? proficiencyBonus : otherSpell.uses,\n                ability: otherSpell.selectedAbility || otherSpell.defaultAbility,\n                currentSlots: character.spellSlots && character.spellSlots[otherSpell.spellDef.name] ? character.spellSlots[otherSpell.spellDef.name] : 0,\n                superLabel: [otherSpell.label, otherSpell.storedItemName].filter(l => !!l).map(util_capitalize).join(': ')\n              })\n            });\n          });\n  \n          const otherSpellsObj = {\n            id: 'class',\n            className: 'Other',\n            level: 0,\n            hasCantrips: false,\n            children: otherSpells,\n            spellsKnown: 0,\n            hasChildren: otherSpells > 0,\n            spellPrepType: 'always',\n            multiclassingLevels: 0,\n            isWarlock: false,\n            warlockSpellLevel: 0,\n            warlockSpellSlots: 0\n          };\n          spellDisplay.push(otherSpellsObj);\n          expandedItems.push(otherSpellsObj);\n        }\n      });\n\n      // sorting most levels first\n      spellDisplay.sort((a, b) => {\n        if (a.className === 'Other') {\n          return -1\n        }\n        return b.children.length - a.children.length\n      });\n\n      // Changing structure for non-edit mode & multiclassing\n      if (!this.isEditMode) {\n        let newSpellDisplay = [];\n        if (spellDisplay.length) {\n          let multiclassLevel = 0,\n            isMulticlass = -1,\n            warlockSpellLevel,\n            warlockSpellSlots,\n            otherClass;\n\n          // Combine all class spell levels into single references\n          for (let spellClass of spellDisplay) {\n            if (spellClass.className !== 'Other') {\n              if (!spellClass.hadToAddClass) {\n                if (!spellClass.isWarlock) {\n                  multiclassLevel += spellClass.multiclassingLevels;\n                  isMulticlass ++;\n                } else {\n                  warlockSpellLevel = spellClass.warlockSpellLevel;\n                  warlockSpellSlots = spellClass.warlockSpellSlots;\n                  isMulticlass ++;\n                }\n              }\n\n              spellClass.children.forEach((spellLevel, index) => {\n                const adjIndex = index + spellClass.hasCantrips;\n                if (!newSpellDisplay[adjIndex]) {\n                  newSpellDisplay[adjIndex] = spellLevel;\n                } else {\n                  newSpellDisplay[adjIndex].children = newSpellDisplay[adjIndex].children.concat(spellLevel.children);\n                  newSpellDisplay[adjIndex].hasChildren = !!newSpellDisplay[adjIndex].children.length;\n                }\n              });\n            } else if (spellClass.className === 'Other') {\n              otherClass = spellClass;\n            }\n          }\n\n          // remove index 0 if no cantrips\n          newSpellDisplay = newSpellDisplay.filter(i => i !== undefined);\n\n          // Changing spell slots for multiclass rules\n          const hasCantrips = newSpellDisplay.length && newSpellDisplay[0].level === 0;\n          if (isMulticlass > 0) {\n            const multiclassSlotsArray = this.multiclassSlotsDef[multiclassLevel - 1];\n\n            for (let i = 0; i < multiclassSlotsArray.length; i++) {\n              const spellLvl = i + 1;\n              const spellSlots =  multiclassSlotsArray[i];\n              const spellDisplayForLevel = newSpellDisplay.find(sd => sd.level === spellLvl);\n\n              if (spellDisplayForLevel) {\n                spellDisplayForLevel.spellSlots = spellSlots;\n              } else {\n                newSpellDisplay.push({\n                  children: [],\n                  currentSlots: getSpellSlots(spellLvl),\n                  hasChildren: false,\n                  id: \"level\",\n                  isWarlock: false,\n                  level: spellLvl,\n                  spellSlots\n                });\n              }\n            }\n          }\n\n          // Adding warlock slots\n          if (warlockSpellLevel) {\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].warlockSpellSlots = warlockSpellSlots;\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].currentWarlockSlots = character.warlockSpellSlots || 0;\n          }\n\n          if (otherClass) {\n            newSpellDisplay = otherClass.children.concat(newSpellDisplay);\n          }\n        }\n        spellDisplay = newSpellDisplay;\n      }\n\n      console.error('spellDisplay', spellDisplay);\n      this.refresh = false;\n      saveCharacter(character);\n      this.spellsKnown = spellsKnownObj;\n      this.spellDisplay = spellDisplay;\n      this.expandedItems = expandedItems;\n      this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n      this.$.grid.clearCache();\n    }\n  }\n\n  _renderSpell(spell) {\n    return `<div class=\"statsBlockHead\"><span class=\"stat-name\">${spell.name}</span></div>` + spellHtml(spell);\n  }\n\n  _toggleSpellPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isAlwaysPrepared = e.model.item.isAlwaysPrepared;\n    if (!isAlwaysPrepared && this.isEditMode) {\n      const isCantrip = e.model.item.isCantrip;\n      if (isCantrip) {\n        this._toggleCantripPrepared(e);\n      } else {\n        const className = e.model.item.parentClass;\n        const spell = e.model.item.children[0];\n        const isPrepared = this._isPreparedSpell(this.spellsKnown, className, spell.name);\n        const currentPreparedCount = this._currentSpellsKnownCount(className, this.spellsKnown);\n        const maxPreparedCount = this._maxSpellsKnownCount(className, this.spellsKnown);\n\n        if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n          let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n          if (isPrepared) {\n            const index = spellsKnownCopy[className].current.indexOf(spell.name);\n            spellsKnownCopy[className].current.splice(index, 1);\n          } else {\n            spellsKnownCopy[className].current.push(spell.name);\n          }\n          this.spellsKnown = spellsKnownCopy;\n          toggleSpellPrepared(className, spell);\n        } else if (currentPreparedCount >= maxPreparedCount) {\n          this._flashPreparedButton(findInPath('button', e));\n        }\n      }\n    }\n  }\n\n  _toggleCantripPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const className = e.model.item.parentClass;\n    const spell = e.model.item.children[0];\n    const isPrepared = this._isPreparedCantrip(this.spellsKnown, className, spell.name);\n    const currentPreparedCount = this._currentCantripsKnownCount(className, this.spellsKnown);\n    const maxPreparedCount = this._maxCantripsKnownCount(className, this.spellsKnown);\n\n    if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n      let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n      if (isPrepared) {\n        const index = spellsKnownCopy[className].currentCantrips.indexOf(spell.name);\n        spellsKnownCopy[className].currentCantrips.splice(index, 1);\n      } else {\n        spellsKnownCopy[className].currentCantrips.push(spell.name);\n      }\n      this.spellsKnown = spellsKnownCopy;\n      toggleCantripPrepared(className, spell);\n    } else if (currentPreparedCount >= maxPreparedCount) {\n      this._flashPreparedButton(findInPath('button', e));\n    }\n  }\n\n  _flashPreparedButton(buttonEl) {\n    if (buttonEl) {\n      buttonEl.classList.add('transition-bg');\n      buttonEl.classList.add('flash-error');\n      setTimeout(() => {\n        buttonEl.classList.remove('flash-error');\n        setTimeout(() => {\n          buttonEl.classList.remove('transition-bg');\n        }, 200);\n      }, 200);\n    }\n  }\n\n  _toggleSpellSlot(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isInput = findInPath('.checkbox-wrap', e);\n    const isWarlock = !!findInPath('[warlock-spell]', e);\n    const currentSlots = isWarlock ? e.model.item.currentWarlockSlots : e.model.item.currentSlots;\n    const maxSlots = isWarlock ? e.model.item.warlockSpellSlots : e.model.item.spellSlots;\n    const level = e.model.item.level || e.model.item.name;\n\n    if (isInput) {\n      const isChecked = isInput.children[0].checked;\n      if (!isChecked && currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n  \n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    } else {\n      if (currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1;\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n\n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    }\n    \n    if (isWarlock) {\n      this._setSpellSlotsChecked(e.model.item.currentWarlockSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentWarlockSlots, undefined, true);\n    } else {\n      this._setSpellSlotsChecked(e.model.item.currentSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentSlots);\n    }\n  }\n\n  _setSpellSlotsChecked(count, el) {\n    const checkboxes = el.querySelectorAll('vaadin-checkbox');\n    for (let i = 0; i < checkboxes.length; i++) {\n      if (i < count) {\n        checkboxes[i].checked = true;\n      } else {\n        checkboxes[i].checked = false\n      }\n    }\n  }\n\n  _isPreparedClass(spellsKnown, item, isEditMode) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isAlwaysPrepared = item.isAlwaysPrepared;\n    if (isAlwaysPrepared) {\n      return isEditMode ? 'spell-button always-prepared edit-mode' : 'spell-button always-prepared';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared);\n    if (isPrepared) {\n      return isEditMode ? 'spell-prepared spell-button edit-mode' : 'spell-prepared spell-button';\n    }\n    return isEditMode ? 'spell-button edit-mode' : 'spell-button';\n  }\n\n  _isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared){\n    return isAlwaysPrepared || spellsKnown[className] && spellsKnown[className].current && spellsKnown[className].current.length && spellsKnown[className].current.indexOf(spellName) > -1;\n  }\n\n  _isPreparedCantrip(spellsKnown, className, spellName){\n    return spellsKnown[className] && spellsKnown[className].currentCantrips && spellsKnown[className].currentCantrips.length && spellsKnown[className].currentCantrips.indexOf(spellName) > -1;\n  }\n\n  _isPreparedText(spellsKnown, item) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isAlwaysPrepared = item.isAlwaysPrepared;\n    const prepareType = spellsKnown[className] ? spellsKnown[className].type : undefined;\n    if (isAlwaysPrepared) {\n      return prepareType === 'known' ? 'Always' : 'Always';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared);\n    \n    if (isPrepared) {\n      return prepareType === 'known' ? 'Learned' : 'Prepared';\n    } else {\n      return prepareType === 'known' ? 'Learn' : 'Prepare';\n    }\n  }\n\n  _countToArray(count) {\n    const data = [];\n    for (var i = 0; i < count; i++) {\n      data.push(null);\n    }\n    return data;\n  }\n\n  _toLevel(level) {\n    if (level === 'At Will' || level === 'Innate') {\n      return level;\n    } else if (level === 0) {\n      return Parser.spLevelToFull(level) + 's';\n    } else {\n      return Parser.spLevelToFull(level) + ' Level';\n    }\n  }\n  \n  _currentSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].current.length;\n    }\n    return 0;\n  }\n\n  _maxSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].max;\n    }\n    return 0;\n  }\n  \n  _currentCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].currentCantrips.length;\n    }\n    return 0;\n  }\n\n  _maxCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].maxCantrips;\n    }\n    return 0;\n  }\n\n  _toggleEditMode() {\n    dispatchEditModeChange(!this.isEditMode);\n  }\n\n  _spellsKnownString(spellPrepType) {\n    return 'Spells ' + util_capitalize(spellPrepType) + ':'\n  }\n\n  _isRitualSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell && spell.meta && spell.meta.ritual;\n  }\n\n  _isConcentrationSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.duration.some((d) => d.concentration);\n  }\n\n  _isBonusActionSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.time.some((t) => t.unit === 'bonus');\n  }\n\n  _getSpellSchool(spellParent) {\n    const spell = spellParent.children[0];\n    return Parser.SP_SCHOOL_ABV_TO_FULL[spell.school];\n  }\n\n  _hidePrepareSpellsButton(isEditMode, spellsKnown) {\n    return isEditMode || !Object.values(spellsKnown).some((clas) => clas.current.length < clas.max - 1 || clas.currentCantrips.length < clas.maxCantrips - 1);\n  }\n\n  _hidePreparedCountLabel(className, spellsKnown) {\n    return this._maxSpellsKnownCount(className, spellsKnown) === 0\n  }\n\n  _hideCantripsPreparedCountLabel(item, spellsKnown) {\n    return item.level !== 0 || !spellsKnown || !item.parentClass || !spellsKnown[item.parentClass] || spellsKnown[item.parentClass].maxCantrips === 0;\n  }\n\n  _spellLevel(item) {\n    if (item && item.children && item.children.length && item.children[0].level) {\n      return Parser.spLevelToFull(item.children[0].level);\n    }\n  }\n\n  _isSpellSlotChecked(currentSlots, index) {\n    return index < currentSlots;\n  }\n\n  _spellClassText(parentClass) {\n    return parentClass;//util_capitalizeAll(parentClass);\n  }\n\n  _isEmpty(a) {\n    return !a || !a.length;\n  }\n\n  _hideCheckboxes(spellSlots, isEditMode, type) {\n    return !spellSlots || spellSlots > 0 && this.isEditMode || type === 'known' || type === 'will' || type === 'resource'\n  }\n\n  _hideAbility(ability) {\n    return !ability;\n  }\n  \n  _hideSlotsLabel(isEditMode, level, className) {\n    return !isEditMode || level === 0 || level === 'At Will' || level === 'Innate'|| className === 'Warlock';\n  }\n\n  _innateUsageString(spellUseType) {\n    if (spellUseType === 'daily') {\n      return '<span>Long Rest</span>'\n    } else if (spellUseType === 'rest') {\n      return '<span>Short Rest</span>'\n    } else if (spellUseType) {\n      return '<span>' + util_capitalizeAll(spellUseType) + '</span>'\n    }\n  }\n  \n  _wrapClassString(isEditMode) {\n    return isEditMode ? 'edit-mode' : 'not-edit-mode';\n  }\n\n  _equal(a, b) {\n    return a === b;\n  }\n\n  _hasTwo(a) {\n    return a && a.length && a.length > 1;\n  }\n\n  _join(a) {\n    return a.join(', ');\n  }\n\n  _abs(num) {\n    return num >= 0 ? `+${num}`: num;\n  }\n\n  static get template() {\n    return html`\n      <style include='my-styles'>\n        :host {}\n        :host {\n          display: block;\n          padding-top: 16px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        .heading {\n          width: calc(100% - 32px);\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--lumo-contrast-10pct);\n          margin: 0 16px;\n        }\n\n        h2 {\n          display: block;\n          font-size: 1.5em;\n          margin: 20px 0 20px 0;\n          font-weight: bold;\n        }\n\n        vaadin-grid {\n          margin-bottom: var(--tab-bottom-margin);\n        }\n\n        vaadin-grid-tree-toggle {\n          width: 100%;\n          cursor: pointer;\n        }\n\n        .class-wrap {\n          width: 100%;\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          align-items: center;\n          padding-top: 4px;\n          /* padding-top: 34px;\n          padding-bottom: 8px; */\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n          left: -16px;\n          border-bottom: 3px solid var(--_lumo-grid-secondary-border-color);;\n          padding: 24px 16px 8px;\n          position: relative;\n        }\n        .class-wrap h3 {\n          font-size: 22px;\n          font-weight: bold;\n        }\n\n        .spells-prepared-text {\n          margin-right: 6px;\n          margin-left: auto;\n          user-select: none;\n        }\n        .prepared-count {\n          color: var(--mdc-theme-primary);\n          font-weight: bold;\n          margin-left: 6px;\n        }\n        .prepared-count[edit-mode] {\n          color: var(--mdc-theme-secondary);\n        }\n        .cantrips-prepared {\n          margin-right: 0;\n          display: inline-flex;\n          align-items: center;\n        }\n\n        .level-outer-wrap {\n          border-bottom: 1px solid var(--_lumo-grid-secondary-border-color);\n          padding-bottom: 8px;\n          display: flex;\n          height: 32px;\n        }\n\n        .level-wrap {\n          width: 100%;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .level-wrap .label {\n          padding-left: 6px;\n          font-size: 12px;\n          color: var(--lumo-tint-70pct);\n        }\n\n        .slot-checkboxes {\n          cursor: pointer;\n          display: flex;\n          padding: 4px;\n        }\n\n        .slot-checkboxes span {\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n          display: flex;\n          align-items: center;\n        }\n\n        .slot-checkboxes .label {\n          padding-left: 8px;\n        }\n        .slot-checkboxes .label span {\n          font-size: 12px;\n          display: inline-block;\n          white-space: pre-wrap;\n          text-align: center;\n        }\n\n        vaadin-checkbox {\n          pointer-events: none;\n        }\n\n        .spell-outer-wrap {\n          display: flex;\n        }\n\n        .spell-wrap {\n          width: 100%;\n          margin-left: 24px;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .spell-inner-wrap {\n          position: relative;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .spell-inner-wrap[has-super] {\n          padding-top: 12px;\n          padding-bottom: 4px;\n        }\n\n        .spell-level {\n          color: var(--mdc-theme-text-disabled-on-background);\n          margin-left: 8px;\n          margin-right: 4px;\n          font-size: 12px;\n        }\n\n        .spell-ability {\n          font-size: 12px;\n          display: flex;\n          align-items: center;\n          color: var(--mdc-theme-text-secondary-on-background);\n          margin-right: 6px;\n        }\n\n        .innate-spell-label {\n          font-size: 12px;\n          display: flex;\n          align-items: center;\n        }\n\n        .spell-super-text {\n          position: absolute;\n          top: 0px;\n          font-size: 11px;\n          left: 0px;\n          color: var(--mdc-theme-text-secondary-on-background);\n        }\n\n        .ind {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          border-radius: 8px;\n          color: var(--mdc-theme-on-secondary);\n          background-color: var(--mdc-theme-secondary);\n          font-size: 12px;\n          position: relative;\n          bottom: 2px;\n          margin-left: 0;\n          padding: 0px 4px;\n          font-weight: 500;\n        }\n\n        .rit-ind::before {\n          content: 'R';\n        }\n        .conc-ind::before {\n          content: 'C';\n        }\n        .bonus-ind::before {\n          content: 'BA';\n        }\n        .school-ind {\n          font-size: 10px;\n          height: 16px;\n          bottom: 3px;\n        }\n\n        .spell-inner-wrap[not-edit-mode] .ind {\n          background-color: var(--mdc-theme-primary);\n        }\n\n        .spell-def-wrap {\n          font-size: 14px;\n          width: calc(100% - 20px);\n          margin: 0 auto;\n          background: var(--lumo-contrast-10pct);\n          border-radius: 4px;\n          white-space: pre-line;\n        }\n\n        .details.stats-wrapper {\n          margin: -8px 14px 0;\n          font-size: 14px;\n          line-height: 1.5;\n        }\n        .details > .statsBlockHead:first-child > .stat-name {\n          margin-top: 0;\n        }\n        .details.stats-wrapper .statsBlockHead .stat-name {\n          font-size: 22px;\n          margin-bottom: 2px;\n        }\n        .details.stats-wrapper .statsBlockSubHead .stat-name {\n          font-size: 18px;\n        }\n        .details.stats-wrapper .text {\n          margin-top: 16px;\n        }\n        .details.stats-wrapper p {\n          margin-bottom: 8px;\n        }\n        .details.stats-wrapper .statsInlineHead .stat-name {\n          font-size: inherit;\n        }\n        .details.stats-wrapper .margin-bottom_med {\n          margin-bottom: 0px !important;\n        }\n        .details.stats-wrapper .source {\n          display: block !important;\n          color: var(--lumo-contrast-70pct);\n          font-size: 13px;\n          margin-top: 0px;\n          margin-bottom: 12px;\n        }\n\n        .spell-button {\n          background-color: var(--mdc-theme-text-disabled-on-background);\n          color: var(--mdc-theme-on-secondary);\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 80px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n          margin-left: 8px;\n          height: min-content;\n          margin-top: auto;\n          margin-bottom: auto;\n        }\n        .class-icon {\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 60px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n          width: 20px;\n        }\n        .class-icon[hide] {\n          display: none;\n        }\n        .spell-button.edit-mode {\n          cursor: pointer;\n        }\n        .spell-button.always-prepared {\n          background-color: var(--mdc-theme-secondary-lighter);\n          cursor: not-allowed;\n        }\n        .spell-button.spell-prepared {\n          background-color: var(--mdc-theme-secondary);\n        }\n        .spell-button.flash-error {\n          background-color: var(--mdc-theme-error);\n          transition: background-color 0.2s ease-out;\n        }\n        .spell-button.transition-bg {\n          transition: background-color 0.2s ease-in;\n        }\n\n        .filter {\n          margin-left: 16px;\n        }\n\n        .basic-box__wrap-wrap {\n          padding: 0 16px;\n        }\n        .basic-box__wrap {\n          width: 100%;\n          display: flex;\n          justify-content: space-between;\n          margin: 16px auto 40px;\n          max-width: 360px;\n        }\n        .basic-box {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 4px 0;\n          background: var(--lumo-contrast-10pct);\n          border-radius: 4px;\n          height: min-content;\n          width: calc(33% - 8px);\n          max-width: 120px;\n        }\n        .basic-box--short {\n          height: fit-content;\n        }\n        \n        .basic-box__label {\n          color: var(--mdc-theme-primary);\n          font-size: 14px;\n          text-align: center;\n        }\n        .basic-box__value {\n          font-size: 18px;\n          width: 100%;\n          display: flex;\n          flex-direction: column;\n          text-align: center;\n        }\n        .basic-box__no-flex {\n          display: block;\n        }\n\n        .mod-val {\n          position: relative;\n        }\n        .mod-val:focus .tooltip,\n        .mod-val:hover .tooltip {\n          display: block;\n        }\n        .mod-val:focus {\n          outline: none;\n        }\n        .mod-val:not(:last-of-type)::after {\n          content: '|';\n          margin-left: 4px;\n          color: var(--lumo-contrast-30pct);\n        }\n        .tooltip {\n          position: absolute;\n          background: lightgray;\n          color: black;\n          font-size: 14px;\n          padding: 2px 10px;\n          border-radius: 4px;\n          white-space: nowrap;\n          left: 5px;\n          top: -32px;\n          display: none;\n        }\n        .tooltip::after {\n          content: '';\n          height: 0;\n          width: 0;\n          position: absolute;\n          border-left: 5px solid transparent;\n          border-right: 5px solid transparent;\n          border-top: 5px solid lightgray;\n          bottom: -4px;\n          left: 2px;\n        }\n\n        .no-content-message {\n          font-size: 14px;\n          padding: 20px;\n          font-style: italic;\n        }\n      </style>\n\n      <div class$=\"[[_wrapClassString(isEditMode)]]\" hidden$=\"[[noContentMessage]]\">\n        <div class=\"heading\">\n          <h2>Spells</h2>\n          <dnd-button class=\"prepare-spells-button\" link hidden$=\"[[_hidePrepareSpellsButton(isEditMode, spellsKnown)]]\" edit-mode$=\"[[isEditMode]]\" not-edit-mode$=\"[[!isEditMode]]\" label=\"Prepare Your Spells!\" icon=\"edit\" on-click=\"_toggleEditMode\"></dnd-button>\n        </div>\n\n        <!-- Spell Mods -->\n        <div class=\"basic-box__wrap-wrap\">\n          <div class=\"basic-box__wrap\">\n            <div class=\"basic-box\">\n              <span class=\"basic-box__value basic-box__no-flex\">\n                <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                  <span class=\"mod-val\" tabindex=\"0\">[[_abs(item.mod)]]<span class=\"tooltip\">[[_join(item.classes)]]</span></span>\n                </template>\n              </span>\n              <span class=\"basic-box__label\">Spell Mod</span>\n            </div>\n            <div class=\"basic-box\">\n              <span class=\"basic-box__value basic-box__no-flex\">\n                <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                  <span class=\"mod-val\" tabindex=\"0\">+[[item.spellAttackBonus]]<span class=\"tooltip\">[[_join(item.classes)]]</span></span>\n                </template>\n              </span>\n              <span class=\"basic-box__label\">Spell ATK+</span>\n            </div>\n            <div class=\"basic-box\">\n              <span class=\"basic-box__value basic-box__no-flex\">\n                <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                  <span class=\"mod-val\" tabindex=\"0\">[[item.dc]]<span class=\"tooltip\">[[_join(item.classes)]]</span></span>\n                </template>\n              </span>\n              <span class=\"basic-box__label\">Spell DC</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"filter\">\n          <vaadin-text-field clear-button-visible value=\"{{filterStr}}\" placeholder='Filter'></vaadin-text-field>\n        </div>\n      </div>\n\n      <div class=\"no-content-message\" hidden$=\"[[!noContentMessage]]\">Enter edit mode to add classes and levels.</div>\n\n      <vaadin-grid id=\"grid\" theme=\"no-border no-row-borders\" expanded-items=\"{{expandedItems}}\" all-rows-visible hidden$=\"[[noContentMessage]]\">\n        <vaadin-grid-column flex-grow=\"1\">\n          <template>\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'class')]]\">\n                <div class=\"class-wrap\">\n                  <h3>[[item.className]]</h3>\n                  <div class='spells-prepared-text' hidden$=\"[[_hidePreparedCountLabel(item.className, spellsKnown)]]\">\n                    <span>[[_spellsKnownString(item.spellPrepType)]]</span>\n                    <span class='prepared-count' edit-mode$=[[isEditMode]]>[[_currentSpellsKnownCount(item.className, spellsKnown)]] / [[_maxSpellsKnownCount(item.className, spellsKnown)]]</span>\n                  </div>\n                </div>\n              </template>\n  \n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'level')]]\">\n                <div class=\"level-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\">\n                    <h4 class=\"level-wrap\">[[_toLevel(item.level)]]<span hidden$=\"[[_hideSlotsLabel(isEditMode, item.level, item.parentClass)]]\" class=\"label\">([[item.spellSlots]] Slots)</span></h4>\n                  </vaadin-grid-tree-toggle>\n\n                  <div class=\"cantrips-prepared spells-prepared-text\" hidden$=\"[[_hideCantripsPreparedCountLabel(item, spellsKnown)]]\">\n                    <span>Cantrips Known:</span>\n                    <span class='prepared-count' edit-mode$=[[isEditMode]]>[[_currentCantripsKnownCount(item.parentClass, spellsKnown)]] / [[_maxCantripsKnownCount(item.parentClass, spellsKnown)]]</span>\n                  </div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.warlockSpellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\" warlock-spell>\n                    <template is='dom-repeat' items='[[_countToArray(item.warlockSpellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentWarlockSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Pact</span>\n                  </div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.spellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\">\n                    <template is='dom-repeat' items='[[_countToArray(item.spellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Slots</span>\n                  </div>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spell')]]\">\n                <div class=\"spell-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\" class=\"spell-wrap\">\n                    <div class=\"spell-inner-wrap\" has-super$=\"[[!_hideAbility(item.superLabel)]]\" not-edit-mode$=\"[[!isEditMode]]\">\n                      <span class=spell-super-text>[[item.superLabel]]</span>\n                      [[item.name]]\n                      <span class=\"spell-level\" hidden>[[_spellLevel(item)]]</span>\n                      <span class=\"ind rit-ind\" title=\"Ritual\" hidden$=\"[[!_isRitualSpell(item)]]\"></span>\n                      <span class=\"ind conc-ind\" title=\"Concentration\" hidden$=\"[[!_isConcentrationSpell(item)]]\"></span>\n                      <span class=\"ind bonus-ind\" title=\"Bonus Action\" hidden$=\"[[!_isBonusActionSpell(item)]]\"></span>\n                      <span class=\"ind school-ind\" title=\"[[_getSpellSchool(item)]]\">[[_getSpellSchool(item)]]</span>\n                    </div>\n                  </vaadin-grid-tree-toggle>\n\n                  <div class=\"spell-ability\" hidden$=\"[[_hideAbility(item.ability)]]\">([[item.ability]])</div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.spellSlots, isEditMode, item.spellUseType)]]\" on-click=\"_toggleSpellSlot\">\n                    <template is='dom-repeat' items='[[_countToArray(item.spellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\" inner-h-t-m-l=\"[[_innateUsageString(item.spellUseType)]]\"></span>\n                  </div>\n\n                  <div class=\"innate-spell-label\" hidden$=\"[[!_equal(item.spellUseType, 'will')]]\">At Will</div>\n\n                  <div class=\"innate-spell-label\" hidden$=\"[[!_equal(item.spellUseType, 'ritual')]]\">Ritual Only</div>\n\n                  <div class=\"innate-spell-label\" hidden$=\"[[!_equal(item.spellUseType, 'resource')]]\">[[item.spellSlots]] Ki</div>\n        \n                  <button class$=\"[[_isPreparedClass(spellsKnown, item, isEditMode)]]\" hidden$=\"[[!isEditMode]]\" on-click=\"_toggleSpellPrepared\">[[_isPreparedText(spellsKnown, item)]]</button>\n                  <dnd-svg class=\"class-icon\" hidden$=\"[[isEditMode]]\" id='[[_spellClassText(item.parentClass)]]' default-color></dnd-svg>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spelldef')]]\">\n                <div class=\"spell-def-wrap\">\n                  <div class=\"details stats-wrapper\" inner-h-t-m-l=\"[[_renderSpell(item)]]\"></div>\n                </div>\n              </template>\n          </template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-spells\",DndCharacterBuilderSpells);\n"],"sourceRoot":""}