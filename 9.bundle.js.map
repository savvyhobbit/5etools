{"version":3,"sources":["webpack:///./components/dnd-select-add.js","webpack:///./components/views/character/dnd-character-builder-suboptions.js"],"names":["DndSelectAdd","test","type","Boolean","reflectToAttribute","value","options","Array","observer","model","String","addCallback","Function","choices","Number","paren","label","placeholder","multiValue","disabled","this","listBox","remove","$","select","render","isArray","choiceArray","map","v","indexOf","findIndex","o","name","source","filter","selectedValues","i","join","super","ready","setTimeout","async","renderer","root","document","createElement","setAttribute","addEventListener","e","opened","wasPreviouslySelected","srcElement","getAttribute","length","splice","selectedOptions","option","item","optionName","innerHTML","appendChild","_assignMenuElement","valueUpdated","connectedCallback","selectChangeHandler","val","selected","undefined","disconnectedCallback","removeEventListener","a","result","customElements","define","DndCharacterBuilderSuboptions","storageKey","selectedItem","Object","skillProfOptions","skillProfChoices","selectedSkillProfs","defaultSkillProfs","attributeOptions","attributeChoices","attributeMod","selectedAttributes","defaultAttributes","featOptions","featChoices","selectedFeat","isEditMode","characterChangeHandler","character","detail","set","updateOptions","editModeHandler","storageKeys","split","storedItem","isNaN","parseInt","ability","choose","from","toUpperCase","count","amount","entries","attribute","toLowerCase","mod","skillProficiencies","skillProficiency","any","keys","feats","dispatchEvent","CustomEvent","bubbles","composed","skills","bind","attr","feat","arg","arguments","constructor","num","console","error","str"],"mappings":"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","file":"9.bundle.js","sourcesContent":["import { PolymerElement, html } from '@polymer/polymer';\nimport { mergeFeature } from '../util/charBuilder';\nimport { jqEmpty, util_capitalizeAll } from \"../js/utils\";\nimport \"@vaadin/vaadin-select\";\nimport {loadModel} from \"../util/data\";\n\nclass DndSelectAdd extends PolymerElement {\n  static get properties() {\n    return {\n      test: {\n        type: Boolean,\n        reflectToAttribute: true,\n        value: false\n      },\n      options: {\n        type: Array,\n        observer: \"optionsUpdated\"\n      },\n      model: {\n        type: String\n      },\n      addCallback: {\n        type: Function\n      },\n      value: {\n        type: String,\n        value: \"\",\n        observer: \"valueUpdated\"\n      },\n      choices: {\n        type: Number,\n        observer: \"choicesUpdated\"\n      },\n      paren: {\n        type: String,\n      },\n      label: {\n        type: String\n      },\n      placeholder: {\n        type: String,\n      },\n      multiValue: {\n        type: String,\n        value: \"\"\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      }\n    }\n  }\n\n  choicesUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  optionsUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  valueUpdated() {\n    if (this.choices) {\n      if (Array.isArray(this.value) && this.options) {\n        const choiceArray = this.value\n          .map(v => {\n            if (this.options.indexOf(v) !== -1) {\n              return this.options.indexOf(v);\n            } else {\n              return this.options.findIndex((o) => {\n                return o.name === v.name && o.source === v.source;\n              });\n            }\n          })\n          .filter(v => { return v !== -1 });\n\n        if (this.listBox) {\n          this.listBox.selectedValues = choiceArray;\n        }\n        this.multiValue = choiceArray.map(i => {\n          let value = this.options[i];\n          return value.name ? value.name : util_capitalizeAll(value) \n        }).join(\", \");\n      } else {\n        if (this.listBox) {\n          this.listBox.selectedValues = [];\n        }\n        this.multiValue = \"\";\n      }\n    } else {\n      if (this.value && this.options) {\n        if (this.value.source) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name && i.source === this.value.source || i === this.value.name }) + \"\";\n        } else if (this.value.name) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name || i === this.value.name }) + \"\";\n        } else {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value || i === this.value }) + \"\";\n        }\n      } else {\n        this.$.select.value = \"\";\n      }\n    }\n  }\n\n  ready() {\n    super.ready();\n\n    setTimeout(async () => {\n      if (this.model) {\n        this.options = await loadModel(this.model);\n      }\n\n      this.$.select.renderer = (root, select) => {\n        if (!this.listBox) {\n          this.listBox = document.createElement('vaadin-list-box');\n\n          // setting up for multi-select\n          if (this.choices) {\n            this.listBox.setAttribute(\"multiple\", true);\n\n            this.listBox.addEventListener(\"click\", (e) => {\n              select.opened = true;\n              let wasPreviouslySelected = e.srcElement.getAttribute(\"selected\") !== null\n              setTimeout(() => {\n                if (this.listBox.selectedValues.length > this.choices\n                    && !wasPreviouslySelected) {\n                  this.listBox.selectedValues.splice(this.listBox.selectedValues.length - 2, 1)\n                }\n                let selectedOptions = this.listBox.selectedValues.map(v => { return this.options[v] });\n                this.multiValue = selectedOptions.map(o => { return o.name ? o.name : util_capitalizeAll(o) }).join(', ');\n                if (this.addCallback) {\n                  this.addCallback(selectedOptions);\n                }\n              }, 0);\n            });\n\n          }\n\n          // Adding options\n          if (this.options && this.options.length) {\n            for (let i = 0; i < this.options.length; i ++) {\n              const option = this.options[i],\n                item = document.createElement('vaadin-item');\n              const optionName = option.name || util_capitalizeAll(option);\n              item.innerHTML = `<span>${optionName}</span> ${option.name ? `<span style='font-size: 14px;color: var(--lumo-primary-color-50pct);'>${option.source}</span>` : ''}`\n              item.setAttribute(\"value\", i);\n              this.listBox.appendChild(item);\n            }\n          }\n          root.appendChild(this.listBox);\n          this.$.select._assignMenuElement();\n\n          this.valueUpdated();\n        }\n      };\n    }, 0);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.selectChangeHandler = () => {\n      const val = this.$.select.value;\n      if (val) {\n        if (!this.choices) {\n          const selected = this.options[val];\n          if (this.addCallback) {\n            this.addCallback(selected, this.model);\n          } else {\n            mergeFeature(undefined, selected, this.model);\n          }\n          if (!this.value) {\n            this.$.select.value = \"\";\n          }\n        }\n      }\n    };\n\n    this.$.select.addEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.$.select.removeEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  _label(label, choices, paren) {\n    let result = '';\n    if (label) {\n      result = label;\n      if (choices && choices !== 1 && choices !== 100) {\n        result += ` (pick ${choices})`;\n      }\n      if (paren) {\n        result += ` (${paren})`;\n      }\n    }\n    return result;\n  }\n  \n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n        [slot=\"prefix\"] {\n          width: calc(100% - 46px);\n          padding: 12px;\n          line-height: 1.4;\n        }\n        vaadin-select {\n          width: 100%;\n        }\n        .prefix {\n          white-space: normal;\n          color: var(--lumo-body-text-color);\n        }\n      </style>\n      <vaadin-select test$=\"[[test]]\" theme=\"dark\" add id=\"select\" label=\"[[_label(label, choices, paren)]]\" placeholder=\"[[placeholder]]\" disabled$=\"[[disabled]]\">\n        <div hidden$=\"[[!_exists(multiValue)]]\" slot=\"prefix\">\n          <span class=\"prefix\">[[multiValue]]</span>\n        </div>\n      </vaadin-select>\n      \n    `;\n  }\n}\ncustomElements.define('dnd-select-add', DndSelectAdd);","import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n    getCharacterChannel,\n    getSelectedCharacter,\n    saveCharacter,\n} from \"../../../util/charBuilder\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { util_capitalizeAll, absInt, cloneDeep } from \"../../../js/utils\"; \nimport { loadModel } from \"../../../util/data\";\nimport '../../dnd-select-add';\nimport { SKILL_TO_ATB_ABV } from \"../../../js/bestiary\";\nimport { } from '@polymer/polymer/lib/elements/dom-if.js';\n    \nclass DndCharacterBuilderSuboptions extends PolymerElement {\n    static get properties() {\n        return {\n            storageKey: {\n                type: String\n            },\n            // This selectedItem provided is used to populate the sub option fields using the option data structure setup in data\n            selectedItem: {\n                type: Object\n            },\n\n            skillProfOptions: {\n                type: Array,\n                value: []\n            },\n            skillProfChoices: {\n                type: Number,\n            },\n            selectedSkillProfs: {\n                type: Array,\n            },\n            defaultSkillProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            attributeOptions: {\n                type: Array,\n                value: []\n            },\n            attributeChoices: {\n                type: Number,\n            },\n            attributeMod: {\n                type: Number,\n            },\n            selectedAttributes: {\n                type: Array,\n            },\n            defaultAttributes: {\n                type: String,\n                value: \"\"\n            },\n\n            featOptions: {\n                type: Array,\n                value: []\n            },\n            featChoices: {\n                type: Number\n            },\n            selectedFeat: {\n                type: Array,\n            },\n\n            isEditMode: {\n                type: Boolean,\n                value: false\n            },\n        };\n    }\n\n    static get observers() {\n        return ['updateOptions(selectedItem, storageKey, character)']\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.characterChangeHandler = (e) => {\n            // let character = cloneDeep(e.detail.character);\n            let character = e.detail.character;\n            this.set('character', character);\n            this.updateOptions();\n        };\n        \n        this.set('character', getSelectedCharacter());\n        getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n        this.editModeHandler = (e) => {\n            this.isEditMode = e.detail.isEditMode;\n        }\n        getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n        this.isEditMode = isEditMode();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n        getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n    }\n\n    async updateOptions() {\n        if (this.character && this.storageKey && this.selectedItem) {\n            // Finding the storedItem from the character's choices at storageKey \n            const storageKeys = this.storageKey.split('.');\n            if (!this.character.choices) {\n                this.character.choices = {};\n            }\n            let storedItem = this.character.choices;\n\n            for (let i = 0; i < storageKeys.length; i++) {\n                const storageKey = storageKeys[i];\n                if (!storedItem[storageKey]) {\n                    if (storageKeys.length < i + 1 && !isNaN(parseInt(storageKeys[i + 1], 10))) {\n                        storedItem[storageKey] = new Array(20);\n                    } else {\n                        storedItem[storageKey] = {};\n                    }\n                }\n                storedItem = storedItem[storageKey];\n            }\n            this.storedItem = storedItem;\n\n\n            // Retrieving the selected choices for attribute, feat, or proficiency off of the storedItem\n\n            // Populating Attribute choice field\n            this.attributeOptions = [];\n            this.attributeChoices = null;\n            this.attributeMod = 1;\n            this.selectedAttributes = null;\n            this.defaultAttributes = null;\n            if (this.selectedItem.ability && this.selectedItem.ability.length) {\n                const ability = this.selectedItem.ability[0];\n                if (ability.choose) {\n                    this.attributeOptions = ability.choose.from.map(i => { return i.toUpperCase() });\n                    this.attributeChoices = ability.choose.count || 1;\n                    this.attributeMod = ability.choose.amount || 1;\n                    this.selectedAttributes = this.storedItem.selectedAttributes ? this.storedItem.selectedAttributes.split(',') : null;\n                }\n                this.defaultAttributes = Object.entries(ability).map(e => {\n                    if (e[0] !== 'choose' && e[0] !== 'any') {\n                        let attribute = e[0].toLowerCase(),\n                            mod = e[1];\n                        return attribute.toUpperCase() + ' ' + absInt(mod);\n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultAttributes = this.defaultAttributes;\n                this.storedItem.attributeMod = this.attributeMod;\n            }\n\n            // Populating Skill Proficiency choice field\n            this.skillProfOptions = [];\n            this.skillProfChoices = null;\n            this.selectedSkillProfs = null;\n            this.defaultSkillProfs = null;\n            if (this.selectedItem.skillProficiencies && this.selectedItem.skillProficiencies.length) {\n                const skillProficiency = this.selectedItem.skillProficiencies[0];\n                if (skillProficiency.choose) {\n                    this.skillProfOptions = skillProficiency.choose.from;\n                    this.skillProfChoices = skillProficiency.choose.count || 1;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                if (skillProficiency.any) {\n                    this.skillProfOptions = Object.keys(SKILL_TO_ATB_ABV);\n                    this.skillProfChoices = skillProficiency.any;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                this.defaultSkillProfs = Object.keys(skillProficiency).map(e => {\n                    if (e !== 'choose' && e !== 'any') {\n                        return util_capitalizeAll(e) \n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultSkillProfs = this.defaultSkillProfs;\n            }\n\n            // Populating Feat choice field\n            this.featOptions = [];\n            this.featChoices = null;\n            this.selectedFeat = null;\n            if (this.selectedItem.feats) {\n                this.featOptions = await loadModel('feats');\n                this.featChoices = this.selectedItem.feats;\n                this.selectedFeat = this.storedItem.selectedFeat;\n            }\n            \n            this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n        }\n    }\n\n    _skillProficiencyAddCallback() {\n        return ((skills) => {\n            this.storedItem.selectedSkillProfs = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _attributeAddCallback() {\n        return ((attr) => {\n            this.storedItem.selectedAttributes = attr.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _featAddCallback() {\n        return ((feat) => {\n            this.storedItem.selectedFeat = feat;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _suboptionStorageKey(storageKey) {\n        return `${storageKey}.suboptions`\n    }\n\n    _showEmpty(isEditMode, value) {\n        return !isEditMode && !value;\n    }\n\n    _exists() {\n        for (let arg of arguments) {\n            if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _plusPrefix(num) {\n        console.error(num)\n        return `+${num}`\n    }\n\n    _plural(str, num) {\n        if (num > 1) {\n            return str + 's'\n        }\n        return str;\n    }\n\n    static get template() {\n        return html`\n            <style include=\"material-styles\">\n                [hidden] {\n                    display: none !important;\n                }\n                dnd-select-add {\n                    width: 100%;\n                }\n                @media(min-width: 420px) {\n                    dnd-select-add {\n                        \n                    }\n                }\n\n                @media(min-width: 921px) {\n                }\n            </style>\n\n            <div class=\"col-wrap\">\n                <div hidden$=\"[[!_exists(defaultAttributes)]]\" class=\"default-selection\">Default Attributes: <span>[[defaultAttributes]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultSkillProfs)]]\" class=\"default-selection\">Default Skills: <span>[[defaultSkillProfs]]</span></div>\n\n                <template is=\"dom-if\" if=\"[[_exists(attributeOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\" \n                        placeholder=\"<Select Attribute>\" label='[[_plural(\"Selected Attribute\", attributeChoices)]]'\n                        choices=\"[[attributeChoices]]\" paren=\"[[_plusPrefix(attributeMod)]]\" options=\"[[attributeOptions]]\"\n                        value=\"[[selectedAttributes]]\" add-callback=\"[[_attributeAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(skillProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill>\" label='[[_plural(\"Selected Skill\", skillProfChoices)]]'\n                        choices=\"[[skillProfChoices]]\" options=\"[[skillProfOptions]]\"\n                        value=\"[[selectedSkillProfs]]\" add-callback=\"[[_skillProficiencyAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <!-- Todo: add language and tool proficiencies -->\n\n                <template is=\"dom-if\" if=\"[[_exists(featOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Feat>\" label=\"Selected Feat\"\n                        options=\"[[featOptions]]\" value=\"[[selectedFeat]]\"\n                        add-callback=\"[[_featAddCallback()]]\">\n                    </dnd-select-add>\n                    \n                    <template is=\"dom-if\" if=\"[[_exists(selectedFeat)]]\"></template>\n                        <dnd-character-builder-suboptions storage-key=\"[[_suboptionStorageKey(storageKey)]]\" selected-item=\"[[selectedFeat]]\"></dnd-character-builder-suboptions>\n                    </template>\n                </template>\n            </div>\n        `;\n    }\n}\n\ncustomElements.define(\"dnd-character-builder-suboptions\", DndCharacterBuilderSuboptions);\n"],"sourceRoot":""}