{"version":3,"sources":["webpack:///./node_modules/@vaadin/vaadin-text-field/theme/lumo/vaadin-number-field-styles.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-number-field.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-integer-field.js","webpack:///./node_modules/@vaadin/vaadin-checkbox/vaadin-checkbox.js","webpack:///./node_modules/@vaadin/vaadin-text-field/vaadin-text-field.js","webpack:///./node_modules/@vaadin/vaadin-grid/theme/lumo/vaadin-grid-tree-toggle-styles.js","webpack:///./node_modules/@vaadin/vaadin-grid/src/vaadin-grid-tree-toggle.js","webpack:///./node_modules/@vaadin/vaadin-text-field/theme/lumo/vaadin-text-area-styles.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-text-area.js"],"names":["$_documentContainer","document","head","appendChild","content","createElement","memoizedTemplate","innerHTML","hasControls","type","Boolean","value","reflectToAttribute","min","Number","observer","max","step","super","ready","this","__previousValidInput","inputElement","addEventListener","__onInputChange","bind","e","preventDefault","_decreaseValue","_increaseValue","template","cloneNode","thisTemplate","import","is","decreaseButton","querySelector","increaseButton","styles","inputField","prefixSlot","insertBefore","_createMethodObserver","required","minlength","maxlength","pattern","invalid","isNumUnset","n","_constraintsChanged","validate","_incrementValue","incr","disabled","readonly","parseFloat","_getIncrement","newValue","_incrementIsInsideTheLimits","_setValue","String","dispatchEvent","CustomEvent","bubbles","currentValue","multiplier","Math","_getMultiplier","margin","round","number","s","i","indexOf","length","isNaN","pow","_getDecimalCount","sign","__validateByStep","__stepChangedCalled","getAttribute","setAttribute","newVal","oldVal","_valueChanged","keyCode","_onKeyDown","undefined","checkValidity","window","customElements","define","preventInvalidInput","_enabledCharPattern","__isInteger","console","warn","__hasOnlyDigits","_stepChanged","test","level","leaf","expanded","notify","_onClick","toString","style","_debouncerUpdateLevel","debounce","updateStyles","_updateHeight","_onAnimationEnd","animationName","root","scrollTop","input","inputWidth","getComputedStyle","width","valueLength","_oldValueLength","maxWidth","height","display","inputHeight","scrollHeight","clientHeight","removeProperty","_dispatchIronResizeEventIfNeeded"],"mappings":"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","file":"9.bundle.js","sourcesContent":["import '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/mixins/field-button.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\nconst $_documentContainer = html`<dom-module id=\"lumo-number-field\" theme-for=\"vaadin-number-field\">\n  <template>\n    <style include=\"lumo-field-button\">\n      :host {\n        width: 8em;\n      }\n\n      :host([has-controls]:not([theme~=\"align-right\"])) [part=\"value\"] {\n        text-align: center;\n      }\n\n      [part=\"decrease-button\"][disabled],\n      [part=\"increase-button\"][disabled] {\n        opacity: 0.2;\n      }\n\n      :host([has-controls]) [part=\"input-field\"] {\n        padding: 0;\n      }\n\n      [part=\"decrease-button\"],\n      [part=\"increase-button\"] {\n        cursor: pointer;\n        font-size: var(--lumo-icon-size-s);\n        width: 1.6em;\n        height: 1.6em;\n      }\n\n      [part=\"decrease-button\"]::before,\n      [part=\"increase-button\"]::before {\n        margin-top: 0.2em;\n      }\n\n      /* RTL specific styles */\n\n      :host([dir=\"rtl\"]) [part=\"value\"],\n      :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input) {\n        --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em);\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport '@polymer/polymer/polymer-element.js';\n\nimport '@polymer/polymer/lib/elements/custom-style.js';\nimport { TextFieldElement } from './vaadin-text-field.js';\nimport { DomModule } from '@polymer/polymer/lib/elements/dom-module.js';\nconst $_documentContainer = document.createElement('template');\n\n$_documentContainer.innerHTML = `<dom-module id=\"vaadin-number-field-template\">\n  <template>\n    <style>\n      :host([readonly]) [part\\$=\"button\"] {\n        pointer-events: none;\n      }\n\n      [part=\"decrease-button\"]::before {\n        content: \"−\";\n      }\n\n      [part=\"increase-button\"]::before {\n        content: \"+\";\n      }\n\n      [part=\"decrease-button\"],\n      [part=\"increase-button\"] {\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n      }\n\n      /* Hide the native arrow icons */\n      [part=\"value\"]::-webkit-outer-spin-button,\n      [part=\"value\"]::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      [part=\"value\"] {\n        /* Older Firefox versions (v47.0) requires !important */\n        -moz-appearance: textfield !important;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"input-field\"] {\n        direction: ltr;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"value\"]::placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input)::placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]) [part=\"value\"]:-ms-input-placeholder,\n      :host([dir=\"rtl\"]) [part=\"input-field\"] ::slotted(input):-ms-input-placeholder {\n        direction: rtl;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"value\"]::placeholder {\n        text-align: left;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"input-field\"] ::slotted(input)::placeholder {\n        text-align: left;\n      }\n\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"value\"]:-ms-input-placeholder,\n      :host([dir=\"rtl\"]:not([has-controls])) [part=\"input-field\"] ::slotted(input):-ms-input-placeholder {\n        text-align: left;\n      }\n    </style>\n\n    <div disabled\\$=\"[[!_allowed(-1, value, min, max, step)]]\" part=\"decrease-button\" on-click=\"_decreaseValue\" on-touchend=\"_decreaseButtonTouchend\" hidden\\$=\"[[!hasControls]]\">\n    </div>\n\n    <div disabled\\$=\"[[!_allowed(1, value, min, max, step)]]\" part=\"increase-button\" on-click=\"_increaseValue\" on-touchend=\"_increaseButtonTouchend\" hidden\\$=\"[[!hasControls]]\">\n    </div>\n  </template>\n\n  \n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\nlet memoizedTemplate;\n\n/**\n* `<vaadin-number-field>` is a Web Component for number field control in forms.\n*\n* ```html\n* <vaadin-number-field label=\"Number\">\n* </vaadin-number-field>\n* ```\n*\n* @extends PolymerElement\n* @demo demo/index.html\n*/\nclass NumberFieldElement extends TextFieldElement {\n  static get is() {\n    return 'vaadin-number-field';\n  }\n\n  static get version() {\n    return '2.6.2';\n  }\n\n  static get properties() {\n    return {\n      /**\n      * Set to true to display value increase/decrease controls.\n      */\n      hasControls: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n      * The minimum value of the field.\n      */\n      min: {\n        type: Number,\n        reflectToAttribute: true,\n        observer: '_minChanged'\n      },\n\n      /**\n       * The maximum value of the field.\n       */\n      max: {\n        type: Number,\n        reflectToAttribute: true,\n        observer: '_maxChanged'\n      },\n\n      /**\n       * Specifies the allowed number intervals of the field.\n       */\n      step: {\n        type: Number,\n        value: 1,\n        observer: '_stepChanged'\n      }\n\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.__previousValidInput = this.value || '';\n    this.inputElement.type = 'number';\n    this.inputElement.addEventListener('change', this.__onInputChange.bind(this));\n  }\n\n  _decreaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._decreaseValue();\n  }\n\n  _increaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._increaseValue();\n  }\n\n  static get template() {\n    if (!memoizedTemplate) {\n      // Clone the superclass template\n      memoizedTemplate = super.template.cloneNode(true);\n\n      // Retrieve this element's dom-module template\n      const thisTemplate = DomModule.import(this.is + '-template', 'template');\n      const decreaseButton = thisTemplate.content.querySelector('[part=\"decrease-button\"]');\n      const increaseButton = thisTemplate.content.querySelector('[part=\"increase-button\"]');\n      const styles = thisTemplate.content.querySelector('style');\n\n      // Add the buttons and styles to the text-field template\n      const inputField = memoizedTemplate.content.querySelector('[part=\"input-field\"]');\n      const prefixSlot = memoizedTemplate.content.querySelector('[name=\"prefix\"]');\n      inputField.insertBefore(decreaseButton, prefixSlot);\n      inputField.appendChild(increaseButton);\n      memoizedTemplate.content.appendChild(styles);\n    }\n\n    return memoizedTemplate;\n  }\n\n  _createConstraintsObserver() {\n    // NOTE: do not call \"super\" but instead override the method to add extra arguments\n    this._createMethodObserver('_constraintsChanged(required, minlength, maxlength, pattern, min, max, step)');\n  }\n\n  _constraintsChanged(required, minlength, maxlength, pattern, min, max, step) {\n    if (!this.invalid) {\n      return;\n    }\n\n    const isNumUnset = n => (!n && n !== 0);\n\n    if (!isNumUnset(min) || !isNumUnset(max)) {\n      this.validate();\n    } else {\n      super._constraintsChanged(required, minlength, maxlength, pattern);\n    }\n  }\n\n  _decreaseValue() {\n    this._incrementValue(-1);\n  }\n\n  _increaseValue() {\n    this._incrementValue(1);\n  }\n\n  _incrementValue(incr) {\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    let value = parseFloat(this.value);\n\n    if (!this.value) {\n      if (this.min == 0 && incr < 0 ||\n          this.max == 0 && incr > 0 ||\n          this.max == 0 && this.min == 0) {\n        incr = 0;\n        value = 0;\n      } else if ((this.max == null || this.max >= 0) &&\n                 (this.min == null || this.min <= 0)) {\n        value = 0;\n      } else if (this.min > 0) {\n        value = this.min;\n        if (this.max < 0 && incr < 0) {\n          value = this.max;\n        }\n        incr = 0;\n      } else if (this.max < 0) {\n        value = this.max;\n        if (incr < 0) {\n          incr = 0;\n        } else {\n          // FIXME(yuriy): find a proper solution to make correct step back\n          if (this._getIncrement(1, value - this.step) > this.max) {\n            value -= 2 * this.step;\n          } else {\n            value -= this.step;\n          }\n        }\n      }\n    } else if (value < this.min) {\n      incr = 0;\n      value = this.min;\n    } else if (value > this.max) {\n      incr = 0;\n      value = this.max;\n    }\n\n    const newValue = this._getIncrement(incr, value);\n    if (!this.value || incr == 0 || this._incrementIsInsideTheLimits(incr, value)) {\n      this._setValue(newValue);\n    }\n  }\n\n  _setValue(value) {\n    this.value = this.inputElement.value = String(parseFloat(value));\n    this.dispatchEvent(new CustomEvent('change', {bubbles: true}));\n  }\n\n  _getIncrement(incr, currentValue) {\n    let step = this.step || 1,\n      min = this.min || 0;\n\n    // To avoid problems with decimal math, multiplying to operate with integers.\n    const multiplier = Math.max(this._getMultiplier(currentValue),\n      this._getMultiplier(step),\n      this._getMultiplier(min));\n\n    step *= multiplier;\n    currentValue = Math.round(currentValue * multiplier);\n    min *= multiplier;\n\n    const margin = (currentValue - min) % step;\n\n    if (incr > 0) {\n      return (currentValue - margin + step) / multiplier;\n    } else if (incr < 0) {\n      return (currentValue - (margin || step)) / multiplier;\n    } else {\n      return currentValue / multiplier;\n    }\n  }\n\n  _getDecimalCount(number) {\n    const s = String(number);\n    const i = s.indexOf('.');\n    return i === -1 ? 1 : s.length - i - 1;\n  }\n\n  _getMultiplier(number) {\n    if (!isNaN(number)) {\n      return Math.pow(10, this._getDecimalCount(number));\n    }\n  }\n\n  _incrementIsInsideTheLimits(incr, value) {\n    if (incr < 0) {\n      return this.min == null || this._getIncrement(incr, value) >= this.min;\n    } else if (incr > 0) {\n      return this.max == null || this._getIncrement(incr, value) <= this.max;\n    } else {\n      return this._getIncrement(incr, value) <= this.max && this._getIncrement(incr, value) >= this.min;\n    }\n  }\n\n  _allowed(sign) {\n    const incr = sign * (this.step || 1);\n    const value = parseFloat(this.value);\n    return !this.value || (!this.disabled && this._incrementIsInsideTheLimits(incr, value));\n  }\n\n  _stepChanged(step) {\n    // Avoid using initial value in validation\n    this.__validateByStep = this.__stepChangedCalled || this.getAttribute('step') !== null;\n    this.inputElement.step = this.__validateByStep ? step : 'any';\n\n    this.__stepChangedCalled = true;\n    this.setAttribute('step', step);\n  }\n\n  _minChanged(min) {\n    this.inputElement.min = min;\n  }\n\n  _maxChanged(max) {\n    this.inputElement.max = max;\n  }\n\n  _valueChanged(newVal, oldVal) {\n    // Validate value to be numeric\n    if (newVal && isNaN(parseFloat(newVal))) {\n      this.value = '';\n    } else if (typeof this.value !== 'string') {\n      this.value = String(this.value);\n    }\n\n    super._valueChanged(this.value, oldVal);\n  }\n\n  _onKeyDown(e) {\n    if (e.keyCode == 38) {\n      e.preventDefault();\n      this._increaseValue();\n    } else if (e.keyCode == 40) {\n      e.preventDefault();\n      this._decreaseValue();\n    }\n    super._onKeyDown(e);\n  }\n\n  __onInputChange() {\n    this.validate();\n  }\n\n  checkValidity() {\n    // text-field mixin does not check against `min`, `max` and `step`\n    if (this.min !== undefined || this.max !== undefined || this.__validateByStep) {\n      return this.inputElement.checkValidity();\n    }\n\n    return super.checkValidity();\n  }\n}\n\nwindow.customElements.define(NumberFieldElement.is, NumberFieldElement);\n\nexport { NumberFieldElement };\n","/**\n@license\nCopyright (c) 2019 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport '@polymer/polymer/polymer-element.js';\n\nimport '@polymer/polymer/lib/elements/custom-style.js';\nimport { NumberFieldElement } from './vaadin-number-field.js';\nconst $_documentContainer = document.createElement('template');\n\n$_documentContainer.innerHTML = `<dom-module id=\"vaadin-integer-field-template\">\n\n  \n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n\n/**\n* `<vaadin-integer-field>` is a Web Component for integer field control in forms.\n*\n* ```html\n* <vaadin-integer-field label=\"Number\">\n* </vaadin-integer-field>\n* ```\n*\n* @extends PolymerElement\n* @demo demo/index.html\n*/\nclass IntegerFieldElement extends NumberFieldElement {\n  static get is() {\n    return 'vaadin-integer-field';\n  }\n\n  static get version() {\n    return '2.6.2';\n  }\n\n  static get properties() {\n    // Hide inherited props that don't work with <input type=\"number\"> from JSDoc.\n    return {\n      /**\n       * @private\n       */\n      pattern: String,\n      /**\n       * @private\n       */\n      preventInvalidInput: Boolean,\n      /**\n       * @private\n       */\n      minlength: Number,\n      /**\n       * @private\n       */\n      maxlength: Number\n    };\n  }\n\n  ready() {\n    super.ready();\n    this._enabledCharPattern = '[-+\\\\d]';\n  }\n\n  _valueChanged(newVal, oldVal) {\n    if (newVal !== '' && !this.__isInteger(newVal)) {\n      console.warn(`Trying to set non-integer value \"${newVal}\" to <vaadin-integer-field>.`\n        + ` Clearing the value.`);\n      this.value = '';\n      return;\n    }\n    super._valueChanged(newVal, oldVal);\n  }\n\n  _stepChanged(newVal, oldVal) {\n    if (!this.__hasOnlyDigits(newVal)) {\n      console.warn(`Trying to set invalid step size \"${newVal}\",`\n        + ` which is not a positive integer, to <vaadin-integer-field>.`\n        + ` Resetting the default value 1.`);\n      this.step = 1;\n      return;\n    }\n    super._stepChanged(newVal, oldVal);\n  }\n\n  __isInteger(value) {\n    return /^(-\\d)?\\d*$/.test(String(value));\n  }\n\n  __hasOnlyDigits(value) {\n    return /^\\d*$/.test(String(value));\n  }\n}\n\nwindow.customElements.define(IntegerFieldElement.is, IntegerFieldElement);\n\nexport { IntegerFieldElement };\n","import './theme/lumo/vaadin-checkbox.js';\nexport * from './src/vaadin-checkbox.js';\n","import './theme/lumo/vaadin-text-field.js';\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\nconst $_documentContainer = html`<dom-module id=\"lumo-grid-tree-toggle\" theme-for=\"vaadin-grid-tree-toggle\">\n  <template>\n    <style>\n      :host {\n        --vaadin-grid-tree-toggle-level-offset: 2em;\n        align-items: center;\n        vertical-align: middle;\n        margin-left: calc(var(--lumo-space-s) * -1);\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      :host(:not([leaf])) {\n        cursor: default;\n      }\n\n      [part=\"toggle\"] {\n        display: inline-block;\n        font-size: 1.5em;\n        line-height: 1;\n        width: 1em;\n        height: 1em;\n        text-align: center;\n        color: var(--lumo-contrast-50pct);\n        /* Increase touch target area */\n        padding: calc(1em / 3);\n        margin: calc(1em / -3);\n      }\n\n      :host(:not([dir=\"rtl\"])) [part=\"toggle\"] {\n        margin-right: 0;\n      }\n\n      @media (hover: hover) {\n        :host(:hover) [part=\"toggle\"] {\n          color: var(--lumo-contrast-80pct);\n        }\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"lumo-icons\";\n        display: inline-block;\n        height: 100%;\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-right);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-right);\n        transform: rotate(90deg);\n      }\n\n      /* Experimental support for hierarchy connectors, using an unsupported selector */\n      :host([theme~=\"connectors\"]) #level-spacer {\n        position: relative;\n        z-index: -1;\n        font-size: 1em;\n        height: 1.5em;\n      }\n\n      :host([theme~=\"connectors\"]) #level-spacer::before {\n        display: block;\n        content: \"\";\n        margin-top: calc(var(--lumo-space-m) * -1);\n        height: calc(var(--lumo-space-m) + 3em);\n        background-image: linear-gradient(to right, transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px), var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px));\n        background-size: var(--vaadin-grid-tree-toggle-level-offset) var(--vaadin-grid-tree-toggle-level-offset);\n        background-position: calc(var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px) 0;\n      }\n\n      /* RTL specific styles */\n\n      :host([dir=\"rtl\"]) {\n        margin-left: 0;\n        margin-right: calc(var(--lumo-space-s) * -1);\n      }\n\n      :host([dir=\"rtl\"]) [part=\"toggle\"] {\n        margin-left: 0;\n      }\n\n      :host([dir=\"rtl\"][expanded]) [part=\"toggle\"]::before {\n        transform: rotate(-90deg);\n      }\n\n      :host([dir=\"rtl\"][theme~=\"connectors\"]) #level-spacer::before {\n        background-image: linear-gradient(to left, transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px), var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px));\n        background-position: calc(100% - (var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px)) 0;\n      }\n\n      :host([dir=\"rtl\"]:not([expanded])) [part=\"toggle\"]::before,\n      :host([dir=\"rtl\"][expanded]) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-left);\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '@polymer/polymer/lib/elements/custom-style.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { DirMixin } from '@vaadin/vaadin-element-mixin/vaadin-dir-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { microTask } from '@polymer/polymer/lib/utils/async.js';\nconst $_documentContainer = document.createElement('template');\n\n$_documentContainer.innerHTML = `<custom-style>\n  <style>\n    @font-face {\n      font-family: \"vaadin-grid-tree-icons\";\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAQkAA0AAAAABrwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAECAAAABoAAAAcgHwa6EdERUYAAAPsAAAAHAAAAB4AJwAOT1MvMgAAAZQAAAA/AAAAYA8TBIJjbWFwAAAB8AAAAFUAAAFeGJvXWmdhc3AAAAPkAAAACAAAAAgAAAAQZ2x5ZgAAAlwAAABLAAAAhIrPOhFoZWFkAAABMAAAACsAAAA2DsJI02hoZWEAAAFcAAAAHQAAACQHAgPHaG10eAAAAdQAAAAZAAAAHAxVAgBsb2NhAAACSAAAABIAAAASAIAAVG1heHAAAAF8AAAAGAAAACAACgAFbmFtZQAAAqgAAAECAAACTwflzbdwb3N0AAADrAAAADYAAABZQ7Ajh3icY2BkYGAA4twv3Vfi+W2+MnCzMIDANSOmbGSa2YEZRHEwMIEoAAoiB6sAeJxjYGRgYD7w/wADAwsDCDA7MDAyoAI2AFEEAtIAAAB4nGNgZGBg4GBgZgDRDAxMDGgAAAGbABB4nGNgZp7JOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDA+38d84P8BBgdmIAapQZJVYGAEAGc/C54AeJxjYYAAxlAIzQTELAwMBxgZGB0ACy0BYwAAAHicY2BgYGaAYBkGRgYQiADyGMF8FgYbIM3FwMHABISMDArP9/3/+/8/WJXC8z0Q9v8nEp5gHVwMMMAIMo+RDYiZoQJMQIKJARUA7WBhGN4AACFKDtoAAAAAAAAAAAgACAAQABgAJgA0AEIAAHichYvBEYBADAKBVHBjBT4swl9KS2k05o0XHd/yW1hAfBFwCv9sIlJu3nZaNS3PXAaXXHI8Lge7DlzF7C1RgXc7xkK6+gvcD2URmQB4nK2RQWoCMRiFX3RUqtCli65yADModOMBLLgQSqHddRFnQghIAnEUvEA3vUUP0LP0Fj1G+yb8R5iEhO9/ef/7FwFwj28o9EthiVp4hBlehcfUP4Ur8o/wBAv8CU+xVFvhOR7UB7tUdUdlVRJ6HnHWTnhM/V24In8JT5j/KzzFSi2E53hUz7jCcrcIiDDwyKSW1JEct2HdIPH1DFytbUM0PofWdNk5E5oUqb/Q6HHBiVGZpfOXkyUMEj5IyBuNmYZQjBobfsuassvnkKLe1OuBBj0VQ8cRni2xjLWsHaM0jrjx3peYA0/vrdmUYqe9iy7bzrX6eNP7Jh1SijX+AaUVbB8AAHicY2BiwA84GBgYmRiYGJkZmBlZGFkZ2djScyoLMgzZS/MyDQwMwLSruZMzlHaB0q4A76kLlwAAAAEAAf//AA94nGNgZGBg4AFiMSBmYmAEQnYgZgHzGAAD6wA2eJxjYGBgZACCKxJigiD6mhFTNowGACmcA/8AAA==) format('woff');\n      font-weight: normal;\n      font-style: normal;\n    }\n  </style>\n</custom-style>`;\n\ndocument.head.appendChild($_documentContainer.content);\n/**\n * `<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\n * that provides toggle and level display functionality for the item tree.\n *\n * #### Example:\n * ```html\n * <vaadin-grid-column>\n *   <template class=\"header\">Package name</template>\n *   <template>\n *     <vaadin-grid-tree-toggle\n *         leaf=\"[[!item.hasChildren]]\"\n *         expanded=\"{{expanded}}\"\n *         level=\"[[level]]\">\n *       [[item.name]]\n *     </vaadin-grid-tree-toggle>\n *   </template>\n * </vaadin-grid-column>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ---|---\n * `toggle` | The tree toggle icon\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * ---|---|---\n * `expanded` | When present, the toggle is expanded | :host\n * `leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n *\n * The following custom CSS properties are available on\n * the `<vaadin-grid-tree-toggle>` element:\n *\n * Custom CSS property | Description | Default\n * ---|---|---\n * `--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`\n *\n * @extends PolymerElement\n * @mixes ThemableMixin\n */\nclass GridTreeToggleElement extends ThemableMixin(DirMixin(PolymerElement)) {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: inline-flex;\n        align-items: baseline;\n\n        /* CSS API for :host */\n        --vaadin-grid-tree-toggle-level-offset: 1em;\n\n        /*\n          ShadyCSS seems to polyfill :dir(rtl) only for :host, thus using\n          a host custom CSS property for ltr/rtl toggle icon choice.\n         */\n        ---collapsed-icon: \"\\\\e7be\\\\00a0\";\n      }\n\n      :host(:dir(rtl)) {\n        ---collapsed-icon: \"\\\\e7bd\\\\00a0\";\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:not([leaf])) {\n        cursor: pointer;\n      }\n\n      #level-spacer,\n      [part=\"toggle\"] {\n        flex: none;\n      }\n\n      #level-spacer {\n        display: inline-block;\n        width: calc(var(---level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"vaadin-grid-tree-icons\";\n        line-height: 1em; /* make icon font metrics not affect baseline */\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(---collapsed-icon);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: \"\\\\e7bc\\\\00a0\"; /* icon glyph + single non-breaking space */\n      }\n\n      :host([leaf]) [part=\"toggle\"] {\n        visibility: hidden;\n      }\n    </style>\n\n    <span id=\"level-spacer\"></span>\n    <span part=\"toggle\"></span>\n    <slot></slot>\n`;\n  }\n\n  static get is() {\n    return 'vaadin-grid-tree-toggle';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Current level of the tree represented with a horizontal offset\n       * of the toggle button.\n       */\n      level: {\n        type: Number,\n        value: 0,\n        observer: '_levelChanged'\n      },\n\n      /**\n       * Hides the toggle icon and disables toggling a tree sublevel.\n       */\n      leaf: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * Sublevel toggle state.\n       */\n      expanded: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n\n    this.addEventListener('click', e => this._onClick(e));\n  }\n\n  _onClick(e) {\n    if (this.leaf) {\n      return;\n    }\n\n    e.preventDefault();\n    this.expanded = !this.expanded;\n  }\n\n  _levelChanged(level) {\n    const value = Number(level).toString();\n    this.style['---level'] = value;\n    // Async is to make DOM updates applied before evaluating the style\n    // update, required for polyfilled RTL support in MSIE and Edge.\n    this._debouncerUpdateLevel = Debouncer.debounce(\n      this._debouncerUpdateLevel,\n      microTask,\n      () => this.updateStyles({'---level': value})\n    );\n  }\n}\n\ncustomElements.define(GridTreeToggleElement.is, GridTreeToggleElement);\n\nexport { GridTreeToggleElement };\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\nconst $_documentContainer = html`<dom-module id=\"lumo-text-area\" theme-for=\"vaadin-text-area\">\n  <template>\n    <style include=\"lumo-text-field\">\n      [part=\"input-field\"],\n      [part=\"input-field\"] ::slotted(textarea) {\n        /* Equal to the implicit padding in vaadin-text-field */\n        padding-top: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\n        padding-bottom: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\n        height: auto;\n        box-sizing: border-box;\n        transition: background-color 0.1s;\n        line-height: var(--lumo-line-height-s);\n      }\n\n      :host(:not([readonly])) [part=\"input-field\"]::after {\n        display: none;\n      }\n\n      :host([readonly]) [part=\"input-field\"] {\n        border: 1px dashed var(--lumo-contrast-30pct);\n      }\n\n      :host([readonly]) [part=\"input-field\"]::after {\n        border: none;\n      }\n\n      :host(:hover:not([readonly]):not([focused])) [part=\"input-field\"] {\n        background-color: var(--lumo-contrast-20pct);\n      }\n\n      @media (pointer: coarse) {\n        :host(:hover:not([readonly]):not([focused])) [part=\"input-field\"] {\n          background-color: var(--lumo-contrast-10pct);\n        }\n\n        :host(:active:not([readonly]):not([focused])) [part=\"input-field\"] {\n          background-color: var(--lumo-contrast-20pct);\n        }\n      }\n\n      [part=\"value\"],\n      [part=\"input-field\"] ::slotted(textarea) {\n        line-height: inherit;\n        --_lumo-text-field-overflow-mask-image: none;\n      }\n\n      /* Vertically align icon prefix/suffix with the first line of text */\n      [part=\"input-field\"] ::slotted(iron-icon) {\n        margin-top: calc((var(--lumo-icon-size-m) - 1em * var(--lumo-line-height-s)) / -2);\n      }\n\n      [part=\"input-field\"] [part=\"value\"],\n      [part=\"input-field\"] ::slotted(textarea) {\n        white-space: pre-wrap; /* override \\`nowrap\\` from <vaadin-text-field> */\n        align-self: stretch; /* override \\`baseline\\` from <vaadin-text-field> */\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport { TextFieldMixin } from './vaadin-text-field-mixin.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n/**\n * `<vaadin-text-area>` is a Web Component for text area control in forms.\n *\n * ```html\n * <vaadin-text-area label=\"Add description\">\n * </vaadin-text-area>\n * ```\n *\n * ### Prefixes and suffixes\n *\n * These are child elements of a `<vaadin-text-area>` that are displayed\n * inline with the input, before or after.\n * In order for an element to be considered as a prefix, it must have the slot\n * attribute set to `prefix` (and similarly for `suffix`).\n *\n * ```html\n * <vaadin-text-area label=\"Add description\">\n *   <div slot=\"prefix\">Details:</div>\n *   <div slot=\"suffix\">The end!</div>\n * </vaadin-text-area>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ----------------|----------------\n * `label` | The label element\n * `input-field` | The element that wraps prefix, value and suffix\n * `value` | The text value element inside the `input-field` element\n * `error-message` | The error message element\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * -------------|-------------|------------\n * `disabled` | Set to a disabled text field | :host\n * `has-value` | Set when the element has a value | :host\n * `has-label` | Set when the element has a label | :host\n * `invalid` | Set when the element is invalid | :host\n * `focused` | Set when the element is focused | :host\n * `focus-ring` | Set when the element is keyboard focused | :host\n * `readonly` | Set to a readonly text field | :host\n *\n * See [ThemableMixin – how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)\n *\n * @extends PolymerElement\n * @mixes TextFieldMixin\n * @mixes ThemableMixin\n * @demo demo/index.html\n */\nclass TextAreaElement extends ElementMixin(TextFieldMixin(ThemableMixin(PolymerElement))) {\n  static get template() {\n    return html`\n    <style include=\"vaadin-text-field-shared-styles\">\n      .vaadin-text-area-container {\n        flex: auto;\n        max-height: inherit; /* MSIE 11 */\n        min-height: inherit; /* MSIE 11 */\n      }\n\n      /* The label and the error message should neither grow nor shrink. */\n      [part=\"label\"],\n      [part=\"error-message\"] {\n        flex: none;\n      }\n\n      [part=\"input-field\"] {\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      [part=\"value\"] {\n        resize: none;\n      }\n\n      [part=\"value\"],\n      [part=\"input-field\"] ::slotted(*) {\n        align-self: flex-start;\n      }\n\n      @keyframes vaadin-text-area-appear {\n        to {\n          opacity: 1;\n        }\n      }\n\n      :host {\n        animation: 1ms vaadin-text-area-appear;\n      }\n    </style>\n\n    <div class=\"vaadin-text-area-container\">\n\n      <label part=\"label\" on-click=\"focus\" id=\"[[_labelId]]\">[[label]]</label>\n\n      <div part=\"input-field\" id=\"[[_inputId]]\">\n\n        <slot name=\"prefix\"></slot>\n\n        <slot name=\"textarea\">\n          <textarea part=\"value\"></textarea>\n        </slot>\n\n        <div part=\"clear-button\" id=\"clearButton\" role=\"button\" aria-label\\$=\"[[i18n.clear]]\"></div>\n        <slot name=\"suffix\"></slot>\n\n      </div>\n\n      <div part=\"error-message\" id=\"[[_errorId]]\" aria-live=\"assertive\" aria-hidden\\$=\"[[_getErrorMessageAriaHidden(invalid, errorMessage, _errorId)]]\">[[errorMessage]]</div>\n\n    </div>\n`;\n  }\n\n  static get is() {\n    return 'vaadin-text-area';\n  }\n\n  static get version() {\n    return '2.6.2';\n  }\n\n  static get observers() {\n    return [\n      '_textAreaValueChanged(value)'\n    ];\n  }\n\n  ready() {\n    super.ready();\n    this._updateHeight();\n    this.addEventListener('animationend', this._onAnimationEnd);\n  }\n\n  _onAnimationEnd(e) {\n    if (e.animationName.indexOf('vaadin-text-area-appear') === 0) {\n      this._updateHeight();\n    }\n  }\n\n  get _slottedTagName() {\n    return 'textarea';\n  }\n\n  _textAreaValueChanged(value) {\n    this._updateHeight();\n  }\n\n  _updateHeight() {\n    const inputField = this.root.querySelector('[part=input-field]');\n    const scrollTop = inputField.scrollTop;\n    const input = this.inputElement;\n\n    const inputWidth = getComputedStyle(input).width;\n\n    const valueLength = this.value ? this.value.length : 0;\n    // Only clear the height when the content shortens to minimize scrollbar flickering.\n    if (this._oldValueLength >= valueLength) {\n      // Fix the input element width so its scroll height isn't affected by host's disappearing scrollbars\n      input.style.maxWidth = inputWidth;\n      input.style.height = 'auto';\n      // Avoid a jumpy Safari rendering issue\n      inputField.style.display = 'block';\n    }\n    this._oldValueLength = valueLength;\n\n    const inputHeight = input.scrollHeight;\n    if (inputHeight > input.clientHeight) {\n      input.style.height = inputHeight + 'px';\n    }\n\n    // Restore\n    input.style.removeProperty('max-width');\n    inputField.style.removeProperty('display');\n    inputField.scrollTop = scrollTop;\n\n    this._dispatchIronResizeEventIfNeeded('InputHeight', inputHeight);\n  }\n\n  /**\n   * Fired when the text-area height changes.\n   *\n   * @event iron-resize\n   */\n}\n\ncustomElements.define(TextAreaElement.is, TextAreaElement);\n\nexport { TextAreaElement };\n"],"sourceRoot":""}