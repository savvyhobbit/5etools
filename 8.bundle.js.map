{"version":3,"sources":["webpack:///./node_modules/@vaadin/number-field/theme/lumo/vaadin-number-field-styles.js","webpack:///./node_modules/@vaadin/number-field/src/vaadin-number-field.js","webpack:///./node_modules/@vaadin/integer-field/src/vaadin-integer-field.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-integer-field.js","webpack:///./components/views/character/dnd-character-builder-background-race.js"],"names":["numberField","moduleId","hasControls","type","Boolean","value","reflectToAttribute","stepButtonsVisible","min","Number","max","step","super","delegateProps","constraints","this","_setType","tag","localName","slotStyles","$","clearButton","ready","addController","input","_setInputElement","_setFocusElement","stateTarget","ariaTarget","inputElement","_labelController","_tooltipController","setPosition","checkValidity","invalid","e","preventDefault","_decreaseValue","_increaseValue","_incrementValue","incr","disabled","readonly","parseFloat","_getIncrement","newValue","_incrementIsInsideTheLimits","_setValue","String","dispatchEvent","CustomEvent","bubbles","currentValue","multiplier","Math","_getMultiplier","margin","round","number","s","i","indexOf","length","isNaN","_getDecimalCount","sign","newVal","oldVal","_valueChanged","event","key","_onKeyDown","target","composedPath","_hasInputValue","validity","badInput","customElements","define","is","allowedCharPattern","__isInteger","console","warn","__hasOnlyDigits","_stepChanged","test","DndCharacterBuilderBackgroundRace","selectedBackground","selectedBackgroundRef","Object","selectedRace","selectedRaceRef","isEditMode","backgroundName","raceName","additionalOptionAddOptions","connectedCallback","characterChangeHandler","character","detail","updateFromCharacter","addEventListener","editModeHandler","disconnectedCallback","removeEventListener","maxAdditionalOptionsIndex","additionalOptions","addedFeatures","entries","filter","includes","index","parseInt","substring","map","set","background","name","undefined","race","composed","linkData","source","push","dataLink","bg","isBackground","classList","contains","selectedItem","viewId","optionChoice","optionAdd","openAdditionalSpellModal","optionKey","model","__data","item","addtlSpellUsageType","addtlSpellUsageCount","addtlSpellCastingAbility","addtlSpellUsageProficiency","additionalSpellModalOpened","addtlSpellItem","choiceKey","additionalSpells","innate","_","choose","known","daily","rest","ritual","ability","saveCharacter","closeAdditionalSpellModal","result","_dailyOrRest","ATB_ABV_TO_FULL","arg","arguments","constructor","Array","isArray","a","b"],"mappings":"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","file":"8.bundle.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport { fieldButton } from '@vaadin/vaadin-lumo-styles/mixins/field-button.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst numberField = css`\n  :host {\n    width: 8em;\n  }\n\n  :host([step-buttons-visible]:not([theme~='align-right'])) ::slotted(input),\n  :host([has-controls]:not([theme~='align-right'])) ::slotted(input) {\n    text-align: center;\n  }\n\n  [part$='button'][disabled] {\n    opacity: 0.2;\n  }\n\n  :host([step-buttons-visible]) [part='input-field'],\n  :host([has-controls]) [part='input-field'] {\n    padding: 0;\n  }\n\n  [part\\$='button'] {\n    cursor: pointer;\n    font-size: var(--lumo-icon-size-s);\n    width: 1.6em;\n    height: 1.6em;\n  }\n\n  [part\\$='button']::before {\n    margin-top: 0.3em;\n  }\n\n  [part='decrease-button']::before {\n    content: var(--lumo-icons-minus);\n  }\n\n  [part='increase-button']::before {\n    content: var(--lumo-icons-plus);\n  }\n\n  /* RTL specific styles */\n  :host([dir='rtl']:not([theme~='align-right'])) ::slotted(input) {\n    --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em);\n  }\n`;\n\nregisterStyles('vaadin-number-field', [inputFieldShared, fieldButton, numberField], {\n  moduleId: 'lumo-number-field',\n});\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport { html, PolymerElement } from '@polymer/polymer';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-number-field', inputFieldShared, { moduleId: 'vaadin-number-field-styles' });\n\n/**\n * `<vaadin-number-field>` is an input field web component that only accepts numeric input.\n *\n * ```html\n * <vaadin-number-field label=\"Balance\"></vaadin-number-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-number-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name         | Description\n * ------------------|-------------------------\n * `increase-button` | Increase (\"plus\") button\n * `decrease-button` | Decrease (\"minus\") button\n *\n * Note, the `input-prevented` state attribute is only supported when `allowedCharPattern` is set.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes InputFieldMixin\n * @mixes SlotStylesMixin\n * @mixes ElementMixin\n * @mixes ThemableMixin\n */\nexport class NumberField extends InputFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-number-field';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host([readonly]) [part$='button'] {\n          pointer-events: none;\n        }\n\n        [part='decrease-button']::before {\n          content: '−';\n        }\n\n        [part='increase-button']::before {\n          content: '+';\n        }\n\n        [part='decrease-button'],\n        [part='increase-button'] {\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n\n        :host([dir='rtl']) [part='input-field'] {\n          direction: ltr;\n        }\n      </style>\n\n      <div class=\"vaadin-field-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[_theme]]\"\n        >\n          <div\n            disabled$=\"[[!_allowed(-1, value, min, max, step)]]\"\n            part=\"decrease-button\"\n            on-click=\"_decreaseValue\"\n            on-touchend=\"_decreaseButtonTouchend\"\n            hidden$=\"[[!_isStepButtonVisible(hasControls, stepButtonsVisible)]]\"\n            aria-hidden=\"true\"\n            slot=\"prefix\"\n          ></div>\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"input\"></slot>\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n          <div\n            disabled$=\"[[!_allowed(1, value, min, max, step)]]\"\n            part=\"increase-button\"\n            on-click=\"_increaseValue\"\n            on-touchend=\"_increaseButtonTouchend\"\n            hidden$=\"[[!_isStepButtonVisible(hasControls, stepButtonsVisible)]]\"\n            aria-hidden=\"true\"\n            slot=\"suffix\"\n          ></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set to true to display value increase/decrease controls.\n       * @attr {boolean} has-controls\n       * @deprecated since 23.3.\n       * Use [`stepButtonsVisible`](#/elements/vaadin-number-field#property-stepButtonsVisible) instead\n       */\n      hasControls: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * Set to true to show increase/decrease buttons.\n       * @attr {boolean} step-buttons-visible\n       */\n      stepButtonsVisible: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * The minimum value of the field.\n       */\n      min: {\n        type: Number,\n      },\n\n      /**\n       * The maximum value of the field.\n       */\n      max: {\n        type: Number,\n      },\n\n      /**\n       * Specifies the allowed number intervals of the field.\n       * @type {number}\n       */\n      step: {\n        type: Number,\n      },\n    };\n  }\n\n  static get observers() {\n    return ['_stepChanged(step, inputElement)'];\n  }\n\n  static get delegateProps() {\n    return [...super.delegateProps, 'min', 'max'];\n  }\n\n  static get constraints() {\n    return [...super.constraints, 'min', 'max', 'step'];\n  }\n\n  constructor() {\n    super();\n    this._setType('number');\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      ...super.slotStyles,\n      `\n        ${tag} input[type=\"number\"]::-webkit-outer-spin-button,\n        ${tag} input[type=\"number\"]::-webkit-inner-spin-button {\n          -webkit-appearance: none;\n          margin: 0;\n        }\n\n        ${tag} input[type=\"number\"] {\n          -moz-appearance: textfield;\n        }\n\n        ${tag}[dir='rtl'] input[type=\"number\"]::placeholder {\n          direction: rtl;\n        }\n\n        ${tag}[dir='rtl']:not([step-buttons-visible]):not([has-controls]) input[type=\"number\"]::placeholder {\n          text-align: left;\n        }\n      `,\n    ];\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new InputController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      }),\n    );\n\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n\n    this._tooltipController = new TooltipController(this);\n    this.addController(this._tooltipController);\n    this._tooltipController.setPosition('top');\n  }\n\n  /**\n   * Override the method from `InputConstraintsMixin`\n   * to enforce HTML constraint validation even if\n   * the user didn't add any constraints explicitly:\n   * the field has to be regardless checked for bad input.\n   *\n   * @override\n   */\n  checkValidity() {\n    if (this.inputElement) {\n      return this.inputElement.checkValidity();\n    }\n\n    return !this.invalid;\n  }\n\n  /** @private */\n  _decreaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._decreaseValue();\n  }\n\n  /** @private */\n  _increaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._increaseValue();\n  }\n\n  /** @private */\n  _decreaseValue() {\n    this._incrementValue(-1);\n  }\n\n  /** @private */\n  _increaseValue() {\n    this._incrementValue(1);\n  }\n\n  /** @private */\n  _incrementValue(incr) {\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    const step = this.step || 1;\n    let value = parseFloat(this.value);\n\n    if (!this.value) {\n      if ((this.min === 0 && incr < 0) || (this.max === 0 && incr > 0) || (this.max === 0 && this.min === 0)) {\n        incr = 0;\n        value = 0;\n      } else if ((this.max == null || this.max >= 0) && (this.min == null || this.min <= 0)) {\n        value = 0;\n      } else if (this.min > 0) {\n        value = this.min;\n        if (this.max < 0 && incr < 0) {\n          value = this.max;\n        }\n        incr = 0;\n      } else if (this.max < 0) {\n        value = this.max;\n        if (incr < 0) {\n          incr = 0;\n        } else if (this._getIncrement(1, value - step) > this.max) {\n          value -= 2 * step;\n          // FIXME(yuriy): find a proper solution to make correct step back\n        } else {\n          value -= step;\n        }\n      }\n    } else if (value < this.min) {\n      incr = 0;\n      value = this.min;\n    } else if (value > this.max) {\n      incr = 0;\n      value = this.max;\n    }\n\n    const newValue = this._getIncrement(incr, value);\n    if (!this.value || incr === 0 || this._incrementIsInsideTheLimits(incr, value)) {\n      this._setValue(newValue);\n    }\n  }\n\n  /** @private */\n  _setValue(value) {\n    this.value = this.inputElement.value = String(parseFloat(value));\n    this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n  }\n\n  /** @private */\n  _getIncrement(incr, currentValue) {\n    let step = this.step || 1,\n      min = this.min || 0;\n\n    // To avoid problems with decimal math, multiplying to operate with integers.\n    const multiplier = Math.max(this._getMultiplier(currentValue), this._getMultiplier(step), this._getMultiplier(min));\n\n    step *= multiplier;\n    currentValue = Math.round(currentValue * multiplier);\n    min *= multiplier;\n\n    const margin = (currentValue - min) % step;\n\n    if (incr > 0) {\n      return (currentValue - margin + step) / multiplier;\n    } else if (incr < 0) {\n      return (currentValue - (margin || step)) / multiplier;\n    }\n    return currentValue / multiplier;\n  }\n\n  /** @private */\n  _getDecimalCount(number) {\n    const s = String(number);\n    const i = s.indexOf('.');\n    return i === -1 ? 1 : s.length - i - 1;\n  }\n\n  /** @private */\n  _getMultiplier(number) {\n    if (!isNaN(number)) {\n      return 10 ** this._getDecimalCount(number);\n    }\n  }\n\n  /** @private */\n  _incrementIsInsideTheLimits(incr, value) {\n    if (incr < 0) {\n      return this.min == null || this._getIncrement(incr, value) >= this.min;\n    } else if (incr > 0) {\n      return this.max == null || this._getIncrement(incr, value) <= this.max;\n    }\n    return this._getIncrement(incr, value) <= this.max && this._getIncrement(incr, value) >= this.min;\n  }\n\n  /** @private */\n  _allowed(sign) {\n    const incr = sign * (this.step || 1);\n    const value = parseFloat(this.value);\n    return !this.value || (!this.disabled && this._incrementIsInsideTheLimits(incr, value));\n  }\n\n  /**\n   * @param {number} step\n   * @param {HTMLElement | undefined} inputElement\n   * @protected\n   */\n  _stepChanged(step, inputElement) {\n    if (inputElement) {\n      inputElement.step = step || 'any';\n    }\n  }\n\n  /**\n   * @param {unknown} newVal\n   * @param {unknown} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    // Validate value to be numeric\n    if (newVal && isNaN(parseFloat(newVal))) {\n      this.value = '';\n    } else if (typeof this.value !== 'string') {\n      this.value = String(this.value);\n    }\n\n    super._valueChanged(this.value, oldVal);\n  }\n\n  /**\n   * Override an event listener from `InputControlMixin`\n   * to avoid adding a separate listener.\n   * @param {!KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      this._increaseValue();\n    } else if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      this._decreaseValue();\n    }\n\n    super._onKeyDown(event);\n  }\n\n  /**\n   * Determines whether to hide the increase / decrease buttons based on the\n   * deprecated `hasControls` property, and the replacement `stepButtonsVisible`\n   * property\n   * @private\n   */\n  _isStepButtonVisible(hasControls, stepButtonsVisible) {\n    return hasControls || stepButtonsVisible;\n  }\n\n  /**\n   * Native [type=number] inputs don't update their value\n   * when you are entering input that the browser is unable to parse\n   * e.g. \"--5\", hence we have to override this method from `InputMixin`\n   * so that, when value is empty, it would additionally check\n   * for bad input based on the native `validity.badInput` property.\n   *\n   * @param {InputEvent} event\n   * @protected\n   * @override\n   */\n  _setHasInputValue(event) {\n    const target = event.composedPath()[0];\n    this._hasInputValue = target.value.length > 0 || target.validity.badInput;\n  }\n}\n\ncustomElements.define(NumberField.is, NumberField);\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { NumberField } from '@vaadin/number-field/src/vaadin-number-field.js';\n\n/**\n * `<vaadin-integer-field>` is an input field web component that only accepts entering integer numbers.\n *\n * ```html\n * <vaadin-integer-field label=\"X\"></vaadin-integer-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-integer-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name         | Description\n * ------------------|-------------------------\n * `increase-button` | Increase (\"plus\") button\n * `decrease-button` | Decrease (\"minus\") button\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends NumberField\n */\nexport class IntegerField extends NumberField {\n  static get is() {\n    return 'vaadin-integer-field';\n  }\n\n  constructor() {\n    super();\n\n    this.allowedCharPattern = '[-+\\\\d]';\n  }\n\n  /**\n   * Override an observer from `InputMixin` to clear the value\n   * when trying to type invalid characters.\n   * @param {string | undefined} newVal\n   * @param {string | undefined} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    if (newVal !== '' && !this.__isInteger(newVal)) {\n      console.warn(`Trying to set non-integer value \"${newVal}\" to <vaadin-integer-field>. Clearing the value.`);\n      this.value = '';\n      return;\n    }\n    super._valueChanged(newVal, oldVal);\n  }\n\n  /**\n   * Override an observer from `NumberField` to reset the step\n   * property when an invalid step is set.\n   * @param {number} newVal\n   * @param {HTMLElement | undefined} inputElement\n   * @protected\n   * @override\n   */\n  _stepChanged(step, inputElement) {\n    if (step != null && !this.__hasOnlyDigits(step)) {\n      console.warn(\n        `<vaadin-integer-field> The \\`step\\` property must be a positive integer but \\`${step}\\` was provided, so the property was reset to \\`null\\`.`,\n      );\n      this.step = null;\n      return;\n    }\n\n    super._stepChanged(step, inputElement);\n  }\n\n  /** @private */\n  __isInteger(value) {\n    return /^(-\\d)?\\d*$/.test(String(value));\n  }\n\n  /** @private */\n  __hasOnlyDigits(value) {\n    return /^\\d+$/.test(String(value));\n  }\n}\n\ncustomElements.define(IntegerField.is, IntegerField);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { IntegerField } from '@vaadin/integer-field/src/vaadin-integer-field.js';\n\n/**\n * @deprecated Import `IntegerField` from `@vaadin/integer-field` instead.\n */\nexport const IntegerFieldElement = IntegerField;\n\nexport * from '@vaadin/integer-field/src/vaadin-integer-field.js';\n\nconsole.warn(\n  'WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/integer-field\" instead.',\n);\n","import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n  addAdditionalChoice,\n  deleteAdditionalChoice,\n  getBackgroundReference,\n  getCharacterChannel,\n  getRaceReference,\n  getSelectedCharacter,\n} from \"../../../util/charBuilder\";\nimport './dnd-character-builder-suboptions';\nimport \"@vaadin/vaadin-select\";\nimport \"@vaadin/vaadin-text-field/vaadin-integer-field\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { encodeForHash } from \"../../../js/utils\"; \nimport Parser from \"../../../util/Parser\";\nimport \"../../dnd-switch\";\n\nclass DndCharacterBuilderBackgroundRace extends PolymerElement {\n  \n  static get properties() {\n    return {\n      selectedBackground: {\n        type: String,\n        value: \"\"\n      },\n      selectedBackgroundRef: {\n        type: Object,\n      },\n      selectedRace: {\n        type: String,\n        value: \"\"\n      },\n      selectedRaceRef: {\n        type: Object,\n      },\n      isEditMode: {\n        type: Boolean,\n        value: false\n      },\n      backgroundName: {\n        type: String,\n        value: ''\n      },\n      raceName: {\n        type: String,\n        value: ''\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    \n    this.additionalOptionAddOptions = [\"Feat\", \"Spell\", \"Attribute +1\", \"Attribute +2\", \"Skill\", \"Language\", \"Tool\", \"Weapon\", \"Armor\"];\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    \n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  async updateFromCharacter(character) {\n    if (character) {\n      this.character = character;\n      let maxAdditionalOptionsIndex = 0;\n      let additionalOptions = character.addedFeatures ? Object.entries(character.addedFeatures)\n        .filter(([key, value]) => {\n          if (key.includes(\"additionalChoice\") && !key.includes(\"suboptions\")) {\n            const index = parseInt(key.substring(key.indexOf('_') + 1));\n            if (index > maxAdditionalOptionsIndex) {\n              maxAdditionalOptionsIndex = index;\n            }\n            if (value) {\n              value.index = index;\n            } else {\n              return false;\n            }\n            return true;\n          }\n          return false;\n        })\n        .map(([key, value]) => {\n          value.key = key;\n          return value;\n        }) : [];\n      this.maxAdditionalOptionsIndex = maxAdditionalOptionsIndex;\n      this.set('additionalOptions', additionalOptions);\n\n      if (character.background) {\n        this.selectedBackground = character.background;\n        this.selectedBackgroundRef = await getBackgroundReference();\n        this.backgroundName = this.selectedBackground.name;\n      } else {\n        this.selectedBackground = {};\n        this.selectedBackgroundRef = undefined;\n        this.backgroundName = \"\";\n      }\n\n      if (character.race) {\n        this.selectedRace = character.race;\n        this.selectedRaceRef = await getRaceReference();\n        this.raceName = this.selectedRace.name;\n      } else {\n        this.selectedRace = {};\n        this.selectedRaceRef = undefined;\n        this.raceName = \"\";\n      }\n    }\n    \n    this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n  }\n\n  _getRaceLink(race) {\n    let linkData = [race.name];\n    if (race.source) {\n      linkData.push(race.source);\n    }\n    let dataLink = encodeForHash(linkData);\n    return race ? `#/races/${dataLink}` : '#/races'\n  }\n\n  _getBackgroundLink(bg) {\n    let linkData = [bg.name];\n    if (bg.source) {\n      linkData.push(bg.source);\n    }\n    let dataLink = encodeForHash(linkData);\n    return bg ? `#/backgrounds/${dataLink}` : '#/backgrounds'\n  }\n\n  _linkClick(e) {\n    const isBackground = e.target.classList.contains('background');\n    this.dispatchEvent(new CustomEvent(\"open-drawer\", {\n      bubbles: true,\n      composed: true,\n      detail: {\n        selectedItem: isBackground ? this.selectedBackground : this.selectedRace,\n        viewId: isBackground ? 'backgrounds' : 'races'\n      }\n    }));\n  }\n\n  _addAdditionalOption(e) {\n    const optionChoice = this.$.optionAdd.value;\n    if (optionChoice !== \"Spell\") {\n      addAdditionalChoice(optionChoice, this.maxAdditionalOptionsIndex + 1);\n    } else {\n      this.openAdditionalSpellModal();\n    }\n    this.$.optionAdd.value = \"\";\n  }\n\n  _deleteAdditionalOption(e) {\n    const optionKey = e.model.__data.item.key;\n    deleteAdditionalChoice(optionKey);\n  }\n\n  openAdditionalSpellModal() {\n    this.addtlSpellUsageType = \"At Will\";\n    this.addtlSpellUsageCount = 1;\n    this.addtlSpellCastingAbility = \"inherit\";\n    this.addtlSpellUsageProficiency = false;\n    this.additionalSpellModalOpened = true;\n  }\n\n  closeAdditionalSpellModal() {\n    this.additionalSpellModalOpened = false;\n  }\n\n  addAdditionalSpell() {\n    const addtlSpellItem = { choiceKey: 'Spell', addtlSpellUsageType: this.addtlSpellUsageType, addtlSpellUsageProficiency: this.addtlSpellUsageProficiency, addtlSpellUsageCount: this.addtlSpellUsageCount, addtlSpellCastingAbility: this.addtlSpellCastingAbility};\n\n    switch (this.addtlSpellUsageType) {\n      case 'At Will':\n        addtlSpellItem.additionalSpells=[{innate:{_:[{choose:\"level=1;2;3;4;5;6;7;8;9\"}]}}];\n        break;\n      case 'Known':\n        addtlSpellItem.additionalSpells=[{known:{_:[{choose:\"level=1;2;3;4;5;6;7;8;9\"}]}}];\n        break;\n      case 'Long Rest':\n        addtlSpellItem.additionalSpells=[{innate:{_:{daily:{}}}}];\n        addtlSpellItem.additionalSpells[0].innate._.daily[`${this.addtlSpellUsageProficiency ? 'proficiency' : this.addtlSpellUsageCount||1}`]=[{choose:\"level=1;2;3;4;5;6;7;8;9\"}];\n        break;\n      case 'Short Rest':\n        addtlSpellItem.additionalSpells=[{innate:{_:{rest:{}}}}];\n        addtlSpellItem.additionalSpells[0].innate._.rest[`${this.addtlSpellUsageProficiency ? 'proficiency' : this.addtlSpellUsageCount||1}`]=[{choose:\"level=1;2;3;4;5;6;7;8;9\"}];\n        break;\n      case 'Ritual':\n        addtlSpellItem.additionalSpells=[{innate:{_:{ritual:[{choose:\"level=1;2;3;4;5;6;7;8;9|components & miscellaneous=ritual\"}]}}}];\n        break;\n    }\n\n    if (addtlSpellItem.additionalSpells) {\n      if (this.addtlSpellCastingAbility && this.addtlSpellCastingAbility !== 'inherit') {\n        addtlSpellItem.additionalSpells[0].ability = this.addtlSpellCastingAbility\n      }\n      if (!this.character.addedFeatures) {\n        this.character.addedFeatures = {};\n      }\n      this.character.addedFeatures[`additionalChoice_${this.maxAdditionalOptionsIndex + 1}`] = addtlSpellItem;\n      saveCharacter(this.character);    \n    }\n    this.closeAdditionalSpellModal();\n  }\n\n  _showEmpty(isEditMode, value) {\n    return !isEditMode && !value;\n  }\n\n  _spellUsageText(item) {\n    let result = '';\n    if (this._dailyOrRest(item.addtlSpellUsageType)) {\n      if (item.addtlSpellUsageProficiency) {\n        result += 'Proficiency Bonus times';\n      } else if (item.addtlSpellUsageCount === '1') {\n        result += 'Once'\n      } else {\n        result += `${item.addtlSpellUsageCount} times`;\n      }\n      result += ` per ${item.addtlSpellUsageType}`;\n\n    } else if (item.addtlSpellUsageType === 'Ritual') {\n      result += 'Ritual only';\n    } else {\n      result += item.addtlSpellUsageType;\n    }\n\n    result += '.'\n\n    if (item.addtlSpellCastingAbility !== 'inherit') {\n      result += ` ${Parser.ATB_ABV_TO_FULL[item.addtlSpellCastingAbility]} is your spellcasting ability.`;\n    }\n\n    return result;\n  }\n\n  _exists() {\n    for (let arg of arguments) {\n      if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _equal(a, b) {\n    return a === b;\n  }\n  \n  _dailyOrRest(addtlSpellUsageType) {\n    return addtlSpellUsageType === 'Long Rest' || addtlSpellUsageType === 'Short Rest';\n  }\n\n  static get template() {\n    return html`\n      <style include=\"material-styles my-styles\">\n        body {}\n        :host {\n          display: block;\n          padding: 14px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        .col-wrap {\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          margin-bottom: var(--tab-bottom-margin);\n        }\n\n        .row-wrap {\n          width: 100%;\n          margin-bottom: 32px;\n        }\n\n        .row-wrap > *:not(h2):not(:last-child) {\n          margin-bottom: 10px;\n        }\n\n        .heading {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--lumo-contrast-10pct);\n        }\n        .heading .mdc-icon-button {\n          margin-left: 40px;\n          margin-left: auto;\n          margin-right: 10px;\n        }\n\n        .missing-text {\n          font-style: italic;\n          font-size: 14px;\n        }\n\n        @media(min-width: 420px) {\n          .heading {\n            justify-content: flex-start;\n          }\n          .reference-link {\n            margin-left: 8px;\n          }\n        }\n\n        @media(min-width: 921px) {\n          .row-wrap {\n            width: calc(50% - 10px);\n          }\n        }\n\n        h2 {\n          display: block;\n          font-size: 1.5em;\n          margin-block-start: 0.83em;\n          margin-block-end: 0.83em;\n          margin-inline-start: 0px;\n          margin-inline-end: 0px;\n          font-weight: bold;\n        }\n\n        h3 {\n          font-size: 24px;\n          font-weight: bold;\n          margin-bottom: 8px;\n        }\n        .details-container  {\n          background: var(--lumo-contrast-10pct);\n          padding: 14px;\n          border-radius: 4px;\n          font-size: 14px;\n        }\n        .stats-wrapper.margin-bottom_large {\n          margin-bottom: 0px !important;\n        }\n        .spell-usage-text {\n          font-size: 14px;\n          margin-left: 30px;\n          font-style: italic;\n          margin-bottom: -10px;\n        }\n        .extra-title {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          margin-top: 10px;\n          height: 48px;\n        }\n        vaadin-select[add-button] {\n          cursor: pointer;\n          margin-left: 20px;\n          --lumo-font-size-m: 20px;\n          --vaadin-text-field-default-width: 0;\n        }\n        \n        dnd-select-add {\n          --lumo-font-size-m: 20px;\n          width: 100%;\n        }\n\n        dnd-character-builder-suboptions {\n          display: block;\n          margin-left: 30px;\n        }\n      </style>\n\n      <div class=\"col-wrap\">\n        <div class=\"row-wrap\">\n          <div class=\"heading\">\n            <h2>Race</h2>\n            <button class=\"mdc-icon-button\" on-click=\"_linkClick\">\n              <dnd-icon type=\"material\" icon=\"logout\"></dnd-icon>\n            </button>\n          </div>\n          <div class=\"missing-text\" hidden$=\"[[_exists(selectedRaceRef)]]\">Enter edit mode to select a Race.</div>\n          <dnd-select-add model=\"races\" value=\"[[selectedRace]]\" placeholder=\"<Choose Race>\" disabled$=\"[[!isEditMode]]\" hidden$=\"[[_showEmpty(isEditMode, selectedRace)]]\"></dnd-select-add>\n          <dnd-character-builder-suboptions label=\"Race\" storage-key=\"race\" selected-item=\"[[selectedRaceRef]]\"></dnd-character-builder-suboptions>\n        </div>\n\n        <div class=\"row-wrap\">\n          <div class=\"heading\">\n            <h2>Background</h2>\n            <button class=\"mdc-icon-button material-icons background\" on-click=\"_linkClick\">logout</button>\n          </div>\n          <div class=\"missing-text\" hidden$=\"[[_exists(selectedBackgroundRef)]]\">Enter edit mode to select a Background.</div>\n          <dnd-select-add model=\"backgrounds\" value=\"[[selectedBackground]]\" placeholder=\"<Choose Background>\" disabled$=\"[[!isEditMode]]\" hidden$=\"[[_showEmpty(isEditMode, selectedBackground)]]\"></dnd-select-add>\n          <dnd-character-builder-suboptions label=\"Background\" storage-key=\"background\" selected-item=\"[[selectedBackgroundRef]]\"></dnd-character-builder-suboptions>\n        </div>\n\n        <div class=\"row-wrap\">\n          <div class=\"heading\">\n            <h2>Extra Features</h2>\n            <vaadin-select add-button id=\"optionAdd\" class=\"label--secondary\" on-change=\"_addAdditionalOption\" placeholder=\"<Add Additional Feature>\" disabled$=\"[[!isEditMode]]\" hidden$=\"[[!isEditMode]]\">\n              <template>\n                <vaadin-list-box>\n                  <template is=\"dom-repeat\" items=\"[[additionalOptionAddOptions]]\">\n                    <vaadin-item>[[item]]</vaadin-item>\n                  </template>\n                </vaadin-list-box>\n              </template>\n            </vaadin-select>\n          </div>\n\n          <div class=\"added-options\">\n            <template is=\"dom-repeat\" items=\"[[additionalOptions]]\">\n              <div>\n                <div class=\"extra-title\">\n                  Extra [[item.choiceKey]]\n                  <button hidden$=\"[[!isEditMode]]\" class=\"mdc-icon-button material-icons\" on-click=\"_deleteAdditionalOption\">delete</button>\n                </div>\n                <div class=\"spell-usage-text\" hidden=\"[[!_equal(item.choiceKey, 'Spell')]]\" inner-h-t-m-l=\"[[_spellUsageText(item)]]\"></div>\n                <dnd-character-builder-suboptions label=\"Extra [[item.choiceKey]]\" storage-key=\"[[item.key]]\" selected-item=\"[[item]]\"></dnd-character-builder-suboptions>\n              </div>\n            </template>\n          </div>\n        </div>\n\n        <vaadin-dialog opened=\"[[additionalSpellModalOpened]]\">\n          <template>\n            <style>\n              h2 {\n                margin: 0;\n              }\n              .modal-content {\n                display: flex;\n                justify-content: center;\n                flex-direction: column;\n              }\n              .modal-footer {\n                display: flex;\n                justify-content: space-between;\n                margin-top: 20px;\n              }\n              .modal-footer dnd-button:last-child {\n                --mdc-theme-primary: var(--mdc-theme-error);\n              }\n              .modal-footer dnd-button:first-child {\n                margin-right: 40px;\n              }\n              .use-wrap {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                margin-top: 10px;\n              }\n              [hidden] {\n                display: none !important;\n              }\n            </style>\n            <div class=\"modal-content\">\n              <h2>Additional Spell Options</h2>\n              \n              <vaadin-select label=\"Spell Usage\" value=\"{{addtlSpellUsageType}}\">\n                <template>\n                  <vaadin-list-box>\n                    <vaadin-item>At Will</vaadin-item>\n                    <vaadin-item>Long Rest</vaadin-item>\n                    <vaadin-item>Short Rest</vaadin-item>\n                    <vaadin-item>Known</vaadin-item>\n                    <vaadin-item>Ritual</vaadin-item>\n                  </vaadin-list-box>\n                </template>\n              </vaadin-select>\n\n              <div class=\"use-wrap\" hidden$=\"[[!_dailyOrRest(addtlSpellUsageType)]]\">\n                <dnd-switch label='Set Usage' secondary-label='Proficiency Usage' checked={{addtlSpellUsageProficiency}}></dnd-switch>\n                <vaadin-integer-field hidden$=\"[[addtlSpellUsageProficiency]]\" has-controls label=\"Uses\" min=\"1\" max=\"10\" value=\"{{addtlSpellUsageCount}}\"></vaadin-integer-field>\n              </div>\n\n              <vaadin-select value=\"{{addtlSpellCastingAbility}}\" label=\"Spellcasting Ability\">\n                <template>\n                  <vaadin-list-box>\n                    <vaadin-item value='inherit'>Inherit</vaadin-item>\n                    <vaadin-item value='str'>Strength</vaadin-item>\n                    <vaadin-item value='dex'>Dexterity</vaadin-item>\n                    <vaadin-item value='con'>Constitution</vaadin-item>\n                    <vaadin-item value='wis'>Wisdom</vaadin-item>\n                    <vaadin-item value='int'>Intelligence</vaadin-item>\n                    <vaadin-item value='cha'>Charisma</vaadin-item>\n                  </vaadin-list-box>\n                </template>\n              </vaadin-select>\n            </div>\n            <div class=\"modal-footer\">\n              <dnd-button label=\"Add Spell\" border on-click=\"addAdditionalSpell\"></dnd-button>\n              <dnd-button label=\"Cancel\" border on-click=\"closeAdditionalSpellModal\"></dnd-button>\n            </div>\n          </template>\n        </vaadin-dialog>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-background-race\", DndCharacterBuilderBackgroundRace);"],"sourceRoot":""}