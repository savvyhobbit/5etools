{"version":3,"sources":["webpack:///./components/views/character/dnd-character-builder-rolls.js"],"names":["DndCharacterBuilderRolls","isEditMode","type","Boolean","value","super","connectedCallback","this","characterChangeHandler","e","character","detail","updateFromCharacter","addEventListener","editModeHandler","disconnectedCallback","removeEventListener","customRolls","dispatchEvent","CustomEvent","bubbles","composed","arg","arguments","constructor","Object","entries","length","Array","isArray","num","rollModel","model","__data","item","toHit","name","__abs","damages","forEach","damage","index","setTimeout","roll","rollIndexAttr","getAttribute","rollIndex","parseInt","newRoll","push","splice","curRoll","customElements","define"],"mappings":"2FAAA,0DAeA,MAAMA,UAAiC,IAErC,wBACE,MAAO,CACLC,WAAY,CACVC,KAAMC,QACNC,OAAO,IAKb,oBACEC,MAAMC,oBAENC,KAAKC,uBAA0BC,IAC7B,IAAIC,EAAYD,EAAEE,OAAOD,UACzBH,KAAKK,oBAAoBF,IAG3BH,KAAKK,oBAAoB,eACzB,cAAsBC,iBAAiB,qBAAsBN,KAAKC,wBAElED,KAAKO,gBAAmBL,IACtBF,KAAKN,WAAaQ,EAAEE,OAAOV,YAE7B,cAAqBY,iBAAiB,iBAAkBN,KAAKO,iBAC7DP,KAAKN,WAAa,cAGpB,uBACEI,MAAMU,uBAEN,cAAsBC,oBAAoB,qBAAsBT,KAAKC,wBACrE,cAAqBQ,oBAAoB,iBAAkBT,KAAKO,iBAGlE,0BAA0BJ,GAExBH,KAAKU,YAAcP,EAAUO,aAAe,GAO5CV,KAAKW,cAAc,IAAIC,YAAY,gBAAiB,CAAEC,SAAS,EAAMC,UAAU,KAGjF,WACE,IAAK,IAAIC,KAAOC,UACd,GAAMD,IAAQA,EAAIE,cAAgBC,QAAUA,OAAOC,QAAQJ,GAAKK,OAAS,MAAQC,MAAMC,QAAQP,IAAQA,EAAIK,OAAS,GAClH,OAAO,EAGX,OAAO,EAGT,MAAMG,GACJ,OAAOA,GAAO,EAAI,IAAIA,EAAOA,EAG/B,UAAUrB,GACR,IAAKF,KAAKN,WAAY,CACpB,IAAI8B,EAAYtB,EAAEuB,MAAMC,OAAOC,KAC3BH,EAAUI,OACZ,YAAYJ,EAAUK,KAAb,YAA8B,OAAO7B,KAAK8B,MAAMN,EAAUI,QAErEJ,EAAUO,QAAQC,QAAQ,CAACC,EAAQC,KACjCC,WAAW,KACT,YAAS,GAAGX,EAAUK,SAASI,EAAOtC,eAAgBsC,EAAOG,OAC9C,KAAbF,EAAQ,OAKlB,mBAAmBhC,GACjB,MACMmC,EADS,qBAAW,QAASnC,GACNoC,aAAa,SACpCC,EAAYC,SAASH,EAAe,IAE1C,aAAcrC,KAAKU,YAAY6B,GAAYA,GAG7C,WACE,MAAME,EAAU,CAACZ,KAAM,GAAID,MAAO,EAAGG,QAAS,CAAE,CAACK,KAAM,GAAIzC,KAAM,MACjEK,KAAK0C,KAAK,cAAeD,GACzB,aAAcA,EAASzC,KAAKU,YAAYU,OAAS,GAGnD,YAAYlB,GACV,MACMmC,EADS,qBAAW,QAASnC,GACNoC,aAAa,SACpCC,EAAYC,SAASH,EAAe,IAC1CrC,KAAK2C,OAAO,cAAeJ,EAAW,GACtC,YAAiBA,GAGnB,WAAWrC,GACT,MACMmC,EADS,qBAAW,QAASnC,GACNoC,aAAa,SACpCC,EAAYC,SAASH,EAAe,IACpCO,EAAU5C,KAAKU,YAAY6B,GAEjCK,EAAQb,QAAQW,KAAK,CAACN,KAAM,GAAIzC,KAAM,KACtCK,KAAK2C,OAAO,cAAeJ,EAAW,EAAGK,GACzC,aAAcA,EAASL,GAGzB,sBACE,OAAO,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsGfM,eAAeC,OAAO,8BAA+BrD","file":"10.bundle.js","sourcesContent":["import { PolymerElement, html } from \"@polymer/polymer\";\nimport \"@polymer/polymer/lib/elements/dom-repeat.js\";\nimport { findInPath } from \"../../../js/utils\";\nimport {\n  getCharacterChannel,\n  getSelectedCharacter,\n  getCustomRolls,\n  getSpellRolls,\n  getItemRolls,\n  setCustomRoll,\n  removeCustomRoll\n} from \"../../../util/charBuilder\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { rollDice } from \"../../../util/roll\";\n\nclass DndCharacterBuilderRolls extends PolymerElement {\n  \n  static get properties() {\n    return {\n      isEditMode: {\n        type: Boolean,\n        value: false\n      }\n    };\n  }\n  \n  connectedCallback() {\n    super.connectedCallback();\n    \n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    \n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n    \n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n  \n  disconnectedCallback() {\n    super.disconnectedCallback();\n    \n    getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n  \n  async updateFromCharacter(character) {\n    //this.customRolls = getCustom(character);\n    this.customRolls = character.customRolls || [];\n\n    //this.itemRolls = await getItemRolls();\n\n    //this.spellRolls = await getSpellRolls();\n\n\n    this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n  }\n  \n  __exists() {\n    for (let arg of arguments) {\n      if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  __abs(num) {\n    return num >= 0 ? `+${num}`: num;\n  }\n  \n  _makeRoll(e) {\n    if (!this.isEditMode) {\n      let rollModel = e.model.__data.item;\n      if (rollModel.toHit) {\n        rollDice(`${rollModel.name} (to hit)`, `1d20${this.__abs(rollModel.toHit)}`);\n      }\n      rollModel.damages.forEach((damage, index) => {\n        setTimeout(() =>{\n          rollDice(`${rollModel.name} (${damage.type} damage)`, damage.roll);\n        }, (index + 1) * 300);\n      });\n    }\n  }\n\n  _rollChangeHandler(e) {\n    const rollEl = findInPath('.roll', e);\n    const rollIndexAttr = rollEl.getAttribute('index');\n    const rollIndex = parseInt(rollIndexAttr, 10);\n    \n    setCustomRoll(this.customRolls[rollIndex], rollIndex);\n  }\n\n  _addRoll() {\n    const newRoll = {name: \"\", toHit: 0, damages: [ {roll: '', type: ''} ]};\n    this.push('customRolls', newRoll);\n    setCustomRoll(newRoll, this.customRolls.length - 1);\n  }\n\n  _removeRoll(e) {\n    const rollEl = findInPath('.roll', e);\n    const rollIndexAttr = rollEl.getAttribute('index');\n    const rollIndex = parseInt(rollIndexAttr, 10);\n    this.splice('customRolls', rollIndex, 1);\n    removeCustomRoll(rollIndex);\n  }\n\n  _addDamage(e) {\n    const rollEl = findInPath('.roll', e);\n    const rollIndexAttr = rollEl.getAttribute('index');\n    const rollIndex = parseInt(rollIndexAttr, 10);\n    const curRoll = this.customRolls[rollIndex];\n\n    curRoll.damages.push({roll: '', type: ''})\n    this.splice('customRolls', rollIndex, 1, curRoll);\n    setCustomRoll(curRoll, rollIndex);\n  }\n  \n  static get template() {\n    return html`\n    <style include=\"material-styles\">\n      body {}\n      :host {\n        display: block;\n        padding: 14px;\n      }\n      [hidden] {\n        display: none !important;\n      }\n      \n      .col-wrap {\n        display: flex; \n        justify-content: space-between;\n        flex-wrap: wrap;\n      }\n      .row-wrap {\n        width: 100%;\n      }\n\n      h2 {\n        margin-bottom: 24px;\n      }\n\n      .roll {\n        display: flex;\n        flex-direction: column;\n        cursor: pointer;\n      }\n      .roll-header {\n        display: flex;\n        justify-content: space-between;\n      }\n      .roll-header dnd-button {\n        margin-top: 36px;\n      }\n      h3 {\n        margin-bottom: 4px;\n      }\n      .roll__to-hit {\n        margin-right: 10px;\n      }\n      .roll-footer {\n        display: flex;\n      }\n      .roll__damages {\n        display: flex;\n        flex-direction: column;\n      }\n      .roll__damage {\n        display: flex;\n      }\n    </style>\n    \n    <div class=\"col-wrap\">\n      <div class=\"row-wrap\">\n        <h2>Rolls</h2>\n\n        <div class=\"rolls rolls--custom\">\n\n          <template is=\"dom-repeat\" items=\"[[customRolls]]\">\n            <div class=\"roll\" on-click=\"_makeRoll\" index$=\"[[index]]\">\n              <div class=\"roll-header\">\n                <h3 hidden$=\"[[isEditMode]]\">[[item.name]]</h3>\n                <vaadin-text-field hidden$=\"[[!isEditMode]]\" value=\"{{item.name}}\" on-change=\"_rollChangeHandler\" label=\"Name\"></vaadin-text-field>\n                <dnd-button hidden$=\"[[!isEditMode]]\" label=\"Remove\" icon=\"remove\" on-click=\"_removeRoll\"></dnd-button>\n              </div>\n\n              <div class=\"roll-footer\">\n                <div class=\"roll__to-hit\">\n                  <span hidden$=\"[[isEditMode]]\">to hit: <span>[[__abs(item.toHit)]]</span></span>\n                  <vaadin-integer-field hidden$=\"[[!isEditMode]]\" value=\"{{item.toHit}}\" on-change=\"_rollChangeHandler\" min=\"-20\" max=\"20\" has-controls label=\"To Hit\"></vaadin-integer-field>\n                </div>\n\n                <div class=\"roll__damages\">\n                  <template is=\"dom-repeat\" items=\"[[item.damages]]\" as=\"damage\">\n                    <div class=\"roll__damage\">\n                      <span class=\"roll__damage-roll\" hidden$=\"[[isEditMode]]\" >[[damage.roll]]</span>\n                      <div class=\"roll__damage-roll--edit\" hidden$=\"[[!isEditMode]]\">\n                        <vaadin-text-field value=\"{{damage.roll}}\" on-change=\"_rollChangeHandler\" label=\"Damage Roll\"></vaadin-text-field>\n                      </div>\n                      <span class=\"roll__damage-type\" hidden$=\"[[isEditMode]]\" >[[damage.type]]</span>\n                      <div class=\"roll__damage-type--edit\" hidden$=\"[[!isEditMode]]\">\n                        <vaadin-select value=\"{{damage.type}}\" on-change=\"_rollChangeHandler\" label=\"Damage Type\"></vaadin-select>\n                      </div>\n                    </div>\n                  </template>\n                  <dnd-button hidden$=\"[[!isEditMode]]\" on-click=\"_addDamage\" label=\"Add Damage\" icon=\"add\"></dnd-button>\n                </div>\n              </div>\n            </div>\n          </template>\n\n          <dnd-button hidden$=\"[[!isEditMode]]\" on-click=\"_addRoll\" label=\"Add Roll\" icon=\"add\"></dnd-button>\n        </div>\n\n      </div>\n    </div>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-rolls\", DndCharacterBuilderRolls);"],"sourceRoot":""}