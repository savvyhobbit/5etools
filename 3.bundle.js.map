{"version":3,"sources":["webpack:///./node_modules/@vaadin/number-field/theme/lumo/vaadin-number-field-styles.js","webpack:///./node_modules/@vaadin/number-field/src/vaadin-number-field.js","webpack:///./node_modules/@vaadin/integer-field/src/vaadin-integer-field.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-integer-field.js","webpack:///./node_modules/@vaadin/vaadin-checkbox/src/vaadin-checkbox.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-text-field.js","webpack:///./components/views/character/dnd-character-builder-abilities.js"],"names":["numberField","moduleId","hasControls","type","Boolean","value","reflectToAttribute","stepButtonsVisible","min","Number","max","step","super","delegateProps","constraints","this","_setType","tag","localName","slotStyles","$","clearButton","ready","addController","input","_setInputElement","_setFocusElement","stateTarget","ariaTarget","inputElement","_labelController","_tooltipController","setPosition","checkValidity","invalid","e","preventDefault","_decreaseValue","_increaseValue","_incrementValue","incr","disabled","readonly","parseFloat","_getIncrement","newValue","_incrementIsInsideTheLimits","_setValue","String","dispatchEvent","CustomEvent","bubbles","currentValue","multiplier","Math","_getMultiplier","margin","round","number","s","i","indexOf","length","isNaN","_getDecimalCount","sign","newVal","oldVal","_valueChanged","event","key","_onKeyDown","target","composedPath","_hasInputValue","validity","badInput","customElements","define","is","allowedCharPattern","__isInteger","console","warn","__hasOnlyDigits","_stepChanged","test","DndCharacterBuilderAbilities","isEditMode","abilities","Array","resetOptions","connectedCallback","characterChangeHandler","character","detail","updateFromCharacter","addEventListener","editModeHandler","disconnectedCallback","removeEventListener","customAbilities","set","composed","name","currentSlots","slots","setTimeout","abilityEls","shadowRoot","querySelectorAll","scrollIntoView","index","model","item","stopPropagation","isInput","maxSlots","parseInt","children","checked","_setSlotsChecked","count","el","checkboxes","arg","arguments","constructor","Object","entries","isArray","data","push","forEach","reset"],"mappings":"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","file":"3.bundle.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport { fieldButton } from '@vaadin/vaadin-lumo-styles/mixins/field-button.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst numberField = css`\n  :host {\n    width: 8em;\n  }\n\n  :host([step-buttons-visible]:not([theme~='align-right'])) ::slotted(input),\n  :host([has-controls]:not([theme~='align-right'])) ::slotted(input) {\n    text-align: center;\n  }\n\n  [part$='button'][disabled] {\n    opacity: 0.2;\n  }\n\n  :host([step-buttons-visible]) [part='input-field'],\n  :host([has-controls]) [part='input-field'] {\n    padding: 0;\n  }\n\n  [part\\$='button'] {\n    cursor: pointer;\n    font-size: var(--lumo-icon-size-s);\n    width: 1.6em;\n    height: 1.6em;\n  }\n\n  [part\\$='button']::before {\n    margin-top: 0.3em;\n  }\n\n  [part='decrease-button']::before {\n    content: var(--lumo-icons-minus);\n  }\n\n  [part='increase-button']::before {\n    content: var(--lumo-icons-plus);\n  }\n\n  /* RTL specific styles */\n  :host([dir='rtl']:not([theme~='align-right'])) ::slotted(input) {\n    --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em);\n  }\n`;\n\nregisterStyles('vaadin-number-field', [inputFieldShared, fieldButton, numberField], {\n  moduleId: 'lumo-number-field',\n});\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport { html, PolymerElement } from '@polymer/polymer';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-number-field', inputFieldShared, { moduleId: 'vaadin-number-field-styles' });\n\n/**\n * `<vaadin-number-field>` is an input field web component that only accepts numeric input.\n *\n * ```html\n * <vaadin-number-field label=\"Balance\"></vaadin-number-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-number-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name         | Description\n * ------------------|-------------------------\n * `increase-button` | Increase (\"plus\") button\n * `decrease-button` | Decrease (\"minus\") button\n *\n * Note, the `input-prevented` state attribute is only supported when `allowedCharPattern` is set.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes InputFieldMixin\n * @mixes SlotStylesMixin\n * @mixes ElementMixin\n * @mixes ThemableMixin\n */\nexport class NumberField extends InputFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-number-field';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host([readonly]) [part$='button'] {\n          pointer-events: none;\n        }\n\n        [part='decrease-button']::before {\n          content: '−';\n        }\n\n        [part='increase-button']::before {\n          content: '+';\n        }\n\n        [part='decrease-button'],\n        [part='increase-button'] {\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n\n        :host([dir='rtl']) [part='input-field'] {\n          direction: ltr;\n        }\n      </style>\n\n      <div class=\"vaadin-field-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[_theme]]\"\n        >\n          <div\n            disabled$=\"[[!_allowed(-1, value, min, max, step)]]\"\n            part=\"decrease-button\"\n            on-click=\"_decreaseValue\"\n            on-touchend=\"_decreaseButtonTouchend\"\n            hidden$=\"[[!_isStepButtonVisible(hasControls, stepButtonsVisible)]]\"\n            aria-hidden=\"true\"\n            slot=\"prefix\"\n          ></div>\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"input\"></slot>\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n          <div\n            disabled$=\"[[!_allowed(1, value, min, max, step)]]\"\n            part=\"increase-button\"\n            on-click=\"_increaseValue\"\n            on-touchend=\"_increaseButtonTouchend\"\n            hidden$=\"[[!_isStepButtonVisible(hasControls, stepButtonsVisible)]]\"\n            aria-hidden=\"true\"\n            slot=\"suffix\"\n          ></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set to true to display value increase/decrease controls.\n       * @attr {boolean} has-controls\n       * @deprecated since 23.3.\n       * Use [`stepButtonsVisible`](#/elements/vaadin-number-field#property-stepButtonsVisible) instead\n       */\n      hasControls: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * Set to true to show increase/decrease buttons.\n       * @attr {boolean} step-buttons-visible\n       */\n      stepButtonsVisible: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * The minimum value of the field.\n       */\n      min: {\n        type: Number,\n      },\n\n      /**\n       * The maximum value of the field.\n       */\n      max: {\n        type: Number,\n      },\n\n      /**\n       * Specifies the allowed number intervals of the field.\n       * @type {number}\n       */\n      step: {\n        type: Number,\n      },\n    };\n  }\n\n  static get observers() {\n    return ['_stepChanged(step, inputElement)'];\n  }\n\n  static get delegateProps() {\n    return [...super.delegateProps, 'min', 'max'];\n  }\n\n  static get constraints() {\n    return [...super.constraints, 'min', 'max', 'step'];\n  }\n\n  constructor() {\n    super();\n    this._setType('number');\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      ...super.slotStyles,\n      `\n        ${tag} input[type=\"number\"]::-webkit-outer-spin-button,\n        ${tag} input[type=\"number\"]::-webkit-inner-spin-button {\n          -webkit-appearance: none;\n          margin: 0;\n        }\n\n        ${tag} input[type=\"number\"] {\n          -moz-appearance: textfield;\n        }\n\n        ${tag}[dir='rtl'] input[type=\"number\"]::placeholder {\n          direction: rtl;\n        }\n\n        ${tag}[dir='rtl']:not([step-buttons-visible]):not([has-controls]) input[type=\"number\"]::placeholder {\n          text-align: left;\n        }\n      `,\n    ];\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new InputController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      }),\n    );\n\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n\n    this._tooltipController = new TooltipController(this);\n    this.addController(this._tooltipController);\n    this._tooltipController.setPosition('top');\n  }\n\n  /**\n   * Override the method from `InputConstraintsMixin`\n   * to enforce HTML constraint validation even if\n   * the user didn't add any constraints explicitly:\n   * the field has to be regardless checked for bad input.\n   *\n   * @override\n   */\n  checkValidity() {\n    if (this.inputElement) {\n      return this.inputElement.checkValidity();\n    }\n\n    return !this.invalid;\n  }\n\n  /** @private */\n  _decreaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._decreaseValue();\n  }\n\n  /** @private */\n  _increaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._increaseValue();\n  }\n\n  /** @private */\n  _decreaseValue() {\n    this._incrementValue(-1);\n  }\n\n  /** @private */\n  _increaseValue() {\n    this._incrementValue(1);\n  }\n\n  /** @private */\n  _incrementValue(incr) {\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    const step = this.step || 1;\n    let value = parseFloat(this.value);\n\n    if (!this.value) {\n      if ((this.min === 0 && incr < 0) || (this.max === 0 && incr > 0) || (this.max === 0 && this.min === 0)) {\n        incr = 0;\n        value = 0;\n      } else if ((this.max == null || this.max >= 0) && (this.min == null || this.min <= 0)) {\n        value = 0;\n      } else if (this.min > 0) {\n        value = this.min;\n        if (this.max < 0 && incr < 0) {\n          value = this.max;\n        }\n        incr = 0;\n      } else if (this.max < 0) {\n        value = this.max;\n        if (incr < 0) {\n          incr = 0;\n        } else if (this._getIncrement(1, value - step) > this.max) {\n          value -= 2 * step;\n          // FIXME(yuriy): find a proper solution to make correct step back\n        } else {\n          value -= step;\n        }\n      }\n    } else if (value < this.min) {\n      incr = 0;\n      value = this.min;\n    } else if (value > this.max) {\n      incr = 0;\n      value = this.max;\n    }\n\n    const newValue = this._getIncrement(incr, value);\n    if (!this.value || incr === 0 || this._incrementIsInsideTheLimits(incr, value)) {\n      this._setValue(newValue);\n    }\n  }\n\n  /** @private */\n  _setValue(value) {\n    this.value = this.inputElement.value = String(parseFloat(value));\n    this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n  }\n\n  /** @private */\n  _getIncrement(incr, currentValue) {\n    let step = this.step || 1,\n      min = this.min || 0;\n\n    // To avoid problems with decimal math, multiplying to operate with integers.\n    const multiplier = Math.max(this._getMultiplier(currentValue), this._getMultiplier(step), this._getMultiplier(min));\n\n    step *= multiplier;\n    currentValue = Math.round(currentValue * multiplier);\n    min *= multiplier;\n\n    const margin = (currentValue - min) % step;\n\n    if (incr > 0) {\n      return (currentValue - margin + step) / multiplier;\n    } else if (incr < 0) {\n      return (currentValue - (margin || step)) / multiplier;\n    }\n    return currentValue / multiplier;\n  }\n\n  /** @private */\n  _getDecimalCount(number) {\n    const s = String(number);\n    const i = s.indexOf('.');\n    return i === -1 ? 1 : s.length - i - 1;\n  }\n\n  /** @private */\n  _getMultiplier(number) {\n    if (!isNaN(number)) {\n      return 10 ** this._getDecimalCount(number);\n    }\n  }\n\n  /** @private */\n  _incrementIsInsideTheLimits(incr, value) {\n    if (incr < 0) {\n      return this.min == null || this._getIncrement(incr, value) >= this.min;\n    } else if (incr > 0) {\n      return this.max == null || this._getIncrement(incr, value) <= this.max;\n    }\n    return this._getIncrement(incr, value) <= this.max && this._getIncrement(incr, value) >= this.min;\n  }\n\n  /** @private */\n  _allowed(sign) {\n    const incr = sign * (this.step || 1);\n    const value = parseFloat(this.value);\n    return !this.value || (!this.disabled && this._incrementIsInsideTheLimits(incr, value));\n  }\n\n  /**\n   * @param {number} step\n   * @param {HTMLElement | undefined} inputElement\n   * @protected\n   */\n  _stepChanged(step, inputElement) {\n    if (inputElement) {\n      inputElement.step = step || 'any';\n    }\n  }\n\n  /**\n   * @param {unknown} newVal\n   * @param {unknown} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    // Validate value to be numeric\n    if (newVal && isNaN(parseFloat(newVal))) {\n      this.value = '';\n    } else if (typeof this.value !== 'string') {\n      this.value = String(this.value);\n    }\n\n    super._valueChanged(this.value, oldVal);\n  }\n\n  /**\n   * Override an event listener from `InputControlMixin`\n   * to avoid adding a separate listener.\n   * @param {!KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      this._increaseValue();\n    } else if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      this._decreaseValue();\n    }\n\n    super._onKeyDown(event);\n  }\n\n  /**\n   * Determines whether to hide the increase / decrease buttons based on the\n   * deprecated `hasControls` property, and the replacement `stepButtonsVisible`\n   * property\n   * @private\n   */\n  _isStepButtonVisible(hasControls, stepButtonsVisible) {\n    return hasControls || stepButtonsVisible;\n  }\n\n  /**\n   * Native [type=number] inputs don't update their value\n   * when you are entering input that the browser is unable to parse\n   * e.g. \"--5\", hence we have to override this method from `InputMixin`\n   * so that, when value is empty, it would additionally check\n   * for bad input based on the native `validity.badInput` property.\n   *\n   * @param {InputEvent} event\n   * @protected\n   * @override\n   */\n  _setHasInputValue(event) {\n    const target = event.composedPath()[0];\n    this._hasInputValue = target.value.length > 0 || target.validity.badInput;\n  }\n}\n\ncustomElements.define(NumberField.is, NumberField);\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { NumberField } from '@vaadin/number-field/src/vaadin-number-field.js';\n\n/**\n * `<vaadin-integer-field>` is an input field web component that only accepts entering integer numbers.\n *\n * ```html\n * <vaadin-integer-field label=\"X\"></vaadin-integer-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-integer-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name         | Description\n * ------------------|-------------------------\n * `increase-button` | Increase (\"plus\") button\n * `decrease-button` | Decrease (\"minus\") button\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends NumberField\n */\nexport class IntegerField extends NumberField {\n  static get is() {\n    return 'vaadin-integer-field';\n  }\n\n  constructor() {\n    super();\n\n    this.allowedCharPattern = '[-+\\\\d]';\n  }\n\n  /**\n   * Override an observer from `InputMixin` to clear the value\n   * when trying to type invalid characters.\n   * @param {string | undefined} newVal\n   * @param {string | undefined} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    if (newVal !== '' && !this.__isInteger(newVal)) {\n      console.warn(`Trying to set non-integer value \"${newVal}\" to <vaadin-integer-field>. Clearing the value.`);\n      this.value = '';\n      return;\n    }\n    super._valueChanged(newVal, oldVal);\n  }\n\n  /**\n   * Override an observer from `NumberField` to reset the step\n   * property when an invalid step is set.\n   * @param {number} newVal\n   * @param {HTMLElement | undefined} inputElement\n   * @protected\n   * @override\n   */\n  _stepChanged(step, inputElement) {\n    if (step != null && !this.__hasOnlyDigits(step)) {\n      console.warn(\n        `<vaadin-integer-field> The \\`step\\` property must be a positive integer but \\`${step}\\` was provided, so the property was reset to \\`null\\`.`,\n      );\n      this.step = null;\n      return;\n    }\n\n    super._stepChanged(step, inputElement);\n  }\n\n  /** @private */\n  __isInteger(value) {\n    return /^(-\\d)?\\d*$/.test(String(value));\n  }\n\n  /** @private */\n  __hasOnlyDigits(value) {\n    return /^\\d+$/.test(String(value));\n  }\n}\n\ncustomElements.define(IntegerField.is, IntegerField);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { IntegerField } from '@vaadin/integer-field/src/vaadin-integer-field.js';\n\n/**\n * @deprecated Import `IntegerField` from `@vaadin/integer-field` instead.\n */\nexport const IntegerFieldElement = IntegerField;\n\nexport * from '@vaadin/integer-field/src/vaadin-integer-field.js';\n\nconsole.warn(\n  'WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/integer-field\" instead.',\n);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Checkbox } from '@vaadin/checkbox/src/vaadin-checkbox.js';\n\n/**\n * @deprecated Import `Checkbox` from `@vaadin/checkbox` instead.\n */\nexport const CheckboxElement = Checkbox;\n\nexport * from '@vaadin/checkbox/src/vaadin-checkbox.js';\n\nconsole.warn('WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-checkbox\" is deprecated. Use \"@vaadin/checkbox\" instead.');\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { TextField } from '@vaadin/text-field/src/vaadin-text-field.js';\n\n/**\n * @deprecated Import `TextField` from `@vaadin/text-field` instead.\n */\nexport const TextFieldElement = TextField;\n\nexport * from '@vaadin/text-field/src/vaadin-text-field.js';\n\nconsole.warn(\n  'WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/text-field\" instead.',\n);\n","import { PolymerElement, html } from \"@polymer/polymer\";\nimport \"@vaadin/vaadin-checkbox\";\nimport \"@vaadin/vaadin-text-field\";\nimport \"@vaadin/vaadin-text-field/vaadin-integer-field\";\nimport \"@vaadin/vaadin-select\";\nimport \"../../dnd-button\";\nimport {\n  getCharacterChannel,\n  getSelectedCharacter,\n  setAbilityUsage,\n  removeAbilityUsage,\n} from \"../../../util/charBuilder\";\nimport { dispatchEditModeChange, getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { cloneDeep, findInPath } from \"../../../js/utils\";\n\nclass DndCharacterBuilderAbilities extends PolymerElement {\n  static get properties() {\n    return {\n      isEditMode: {\n        type: Boolean,\n        value: false,\n      },\n      abilities: {\n        type: Array\n      }\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.resetOptions = ['', 'Short Rest', 'Long Rest'];\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n\n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\n      \"character-selected\",\n      this.characterChangeHandler\n    );\n\n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n    };\n    getEditModeChannel().addEventListener(\n      \"editModeChange\",\n      this.editModeHandler\n    );\n    this.isEditMode = isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    getCharacterChannel().removeEventListener(\n      \"character-selected\",\n      this.characterChangeHandler\n    );\n    getEditModeChannel().removeEventListener(\n      \"editModeChange\",\n      this.editModeHandler\n    );\n  }\n\n  updateFromCharacter(character) {\n    if (character && character.customAbilities) {\n      this.set('abilities', cloneDeep(character.customAbilities));\n    } else {\n      this.set('abilities', []);\n    }\n\n    this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n  }\n  \n  _addAbility() {\n    setAbilityUsage({name: '', currentSlots: 0, slots: 1}, this.abilities.length);\n    if (!this.isEditMode) {\n      dispatchEditModeChange(true);\n    }\n    setTimeout(() => {\n      const abilityEls = this.shadowRoot.querySelectorAll('.ability');\n      abilityEls[abilityEls.length - 1].scrollIntoView();\n    }, 1);\n  }\n\n  _deleteAbility(e) {\n    const index = e.model.index;\n    removeAbilityUsage(index);\n  }\n\n  _updateAbility(e) {\n    const index = e.model.index;\n    setAbilityUsage(e.model.item, index);\n  }\n\n  _toggleSlot(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isInput = findInPath('.checkbox-wrap', e);\n    const item = e.model.item;\n    const maxSlots = item.slots;\n    const index = e.model.index;\n\n    if (typeof item.currentSlots !== 'number') {\n      item.currentSlots = parseInt(item.currentSlots, 10);\n      if (isNaN(item.currentSlots)) {\n        item.currentSlots = 0;\n      }\n    }\n    \n    if (isInput) {\n      const isChecked = isInput.children[0].checked;\n      if (!isChecked && item.currentSlots < maxSlots) {\n        item.currentSlots = item.currentSlots + 1;\n  \n      } else if (item.currentSlots > 0) {\n        item.currentSlots = item.currentSlots - 1;\n      }\n    } else {\n      if (item.currentSlots < maxSlots) {\n        item.currentSlots = item.currentSlots + 1;\n\n      } else if (item.currentSlots > 0) {\n        item.currentSlots = item.currentSlots - 1;\n      }\n    }\n\n    this._setSlotsChecked(item.currentSlots, findInPath('.ability__slots-label-wrap', e));\n    setAbilityUsage(item, index);\n  }\n\n  _setSlotsChecked(count, el) {\n    const checkboxes = el.querySelectorAll('vaadin-checkbox');\n    for (let i = 0; i < checkboxes.length; i++) {\n      if (i < count) {\n        checkboxes[i].checked = true;\n      } else {\n        checkboxes[i].checked = false\n      }\n    }\n  }\n\n  _exists() {\n    for (let arg of arguments) {\n      if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  _countToArray(count) {\n    const data = [];\n    for (var i = 0; i < count; i++) {\n      data.push(null);\n    }\n    return data;\n  }\n\n  _shortRest() {\n    if (this.abilities) {\n      this.abilities.forEach((item, index) => {\n        if (item.reset === 'Short Rest') {\n          item.currentSlots = 0;\n          setAbilityUsage(item, index);\n        }\n      });\n    }\n  }\n\n  _longRest() {\n    if (this.abilities) {\n      this.abilities.forEach((item, index) => {\n        if (item.reset === 'Long Rest') {\n          item.currentSlots = 0;\n          setAbilityUsage(item, index);\n        }\n      });\n    }\n  }\n\n  _isSlotChecked(currentSlots, index) {\n    return index < currentSlots;\n  }\n\n  static get template() {\n    return html`\n      <style include=\"material-styles\">\n        :host {\n          display: block;\n          padding: 14px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        h2 {\n          display: block;\n          font-size: 1.5em;\n          margin-block-start: 0.83em;\n          margin-block-end: 0.83em;\n          margin-inline-start: 0px;\n          margin-inline-end: 0px;\n          font-weight: bold;\n        }\n\n        h3 {\n          font-size: 24px;\n          font-weight: bold;\n          margin-bottom: 8px;\n        }\n\n        .col-wrap {\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n        }\n\n        .heading {\n          width: 100%;\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--lumo-contrast-10pct);\n        }\n        \n        .rest-buttons {\n          display: flex;\n          flex-direction: row;\n          flex-wrap: wrap;\n        }\n\n        .short-rest { \n          margin-left: 10px;\n        }\n\n        .abilities {\n          width: 100%;\n          margin-bottom: var(--tab-bottom-margin);\n        }\n\n        .ability {\n          width: 100%;\n          display: flex;\n          align-items: center;\n          border-bottom: 1px solid var(--mdc-theme-text-divider-on-background);\n          padding: 8px 0;\n          position: relative;\n          flex-wrap: wrap;\n        }\n\n        [edit-mode] .ability__name {\n          width: 100%;\n        }\n\n        .ability__slots-label-wrap {\n          display: flex;\n          align-items: center;\n        }\n\n        .ability__slots-label-wrap vaadin-integer-field {\n          width: 90px;\n        }\n\n        .col-wrap:not([edit-mode]) .ability__slots-wrap {\n          margin-left: auto;\n        }\n\n        .ability__slots {\n          cursor: pointer;\n          display: flex;\n          padding: 4px;\n          max-width: 120px;\n          flex-wrap: wrap;\n        }\n\n        .ability__slots span {\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .ability__slots-label {\n          padding-left: 8px;\n          width: 64px;\n          text-align: center;\n          font-size: 12px;\n          line-height: 1.4;\n          user-select: none;\n        }\n\n        .ability__slots-label-suffix {\n          user-select: none;\n          font-size: 16px;\n          padding-left: 6px;\n        }\n\n        .ability__delete {\n          position: absolute;\n          top: 0;\n          right: 0;\n        }\n\n        .add-ability {\n          display: inline-flex;\n        }\n\n        vaadin-checkbox {\n          pointer-events: none;\n        }\n        vaadin-select {\n          margin-right: 10px;\n        }\n\n        @media (min-width: 420px) {\n        }\n\n        @media (min-width: 921px) {\n        }\n      </style>\n\n      <div class=\"col-wrap\" edit-mode$=[[isEditMode]]>\n        <div class=\"heading\">\n          <h2>Abilities</h2>\n          <div class='rest-buttons'>\n            <!-- <dnd-button class=\"long-rest\" label=\"Long Rest\" on-click=\"_longRest\"></dnd-button>\n            <dnd-button class=\"short-rest\" label=\"Short Rest\" on-click=\"_shortRest\"></dnd-button> -->\n            <dnd-button class=\"add-ability\" link edit-mode$=\"[[isEditMode]]\" not-edit-mode$=\"[[!isEditMode]]\" label=\"Add an Ability\" icon=\"edit\"  on-click=\"_addAbility\"></dnd-button>\n          </div>\n        </div>\n\n        <div class=\"abilities\">\n          <template is=\"dom-repeat\" items=\"[[abilities]]\">\n            <div class=\"ability\">\n              <div class=\"ability__name\">\n                <span hidden$=\"[[isEditMode]]\">[[item.name]]<span hidden$=\"[[_exists(item.name)]]\">&lt;No Name&gt;</span></span>\n                <vaadin-text-field theme=\"label--secondary\" hidden$=\"[[!isEditMode]]\" label=\"Name\" value=\"{{item.name}}\" on-change=\"_updateAbility\"></vaadin-text-field>\n              </div>\n\n              <vaadin-select hidden$=\"[[!isEditMode]]\" value=\"{{item.reset}}\" on-change=\"_updateAbility\" label=\"Reset\" >\n                <template>\n                  <vaadin-list-box>\n                    <template is=\"dom-repeat\" items=\"[[resetOptions]]\">\n                      <vaadin-item>[[item]]</vaadin-item>\n                    </template>\n                  </vaadin-list-box>\n                </template>\n              </vaadin-select>\n\n              <div hidden$=\"[[!isEditMode]]\" class=\"ability__usage\">\n                <vaadin-integer-field min=\"1\" value=\"{{item.slots}}\" on-change=\"_updateAbility\" has-controls label=\"Usages\"></vaadin-integer-field>\n              </div>\n              \n              <div class=\"ability__slots-wrap\" hidden$=\"[[isEditMode]]\">\n                <div hidden$=\"[[item.useNumberField]]\" on-click=\"_toggleSlot\" class=\"ability__slots-label-wrap\">\n                  <div class=\"ability__slots\">\n                    <template is='dom-repeat' items='[[_countToArray(item.slots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                  </div>\n                  <span class=\"ability__slots-label\">Uses <span hidden$=\"[[!item.reset]]\"> per </span>[[item.reset]]</span>\n                </div>\n\n                <div hidden$=\"[[!item.useNumberField]]\" class=\"ability__slots-label-wrap\">\n                  <div>\n                    <vaadin-integer-field min=\"0\" max=\"[[item.slots]]\" value=\"{{item.currentSlots}}\" on-change=\"_updateAbility\" has-controls></vaadin-integer-field>\n                    <span class=\"ability__slots-label-suffix\"> / [[item.slots]]</span>\n                  </div>\n                  <span class=\"ability__slots-label\">Uses <span hidden$=\"[[!item.reset]]\"> per </span>[[item.reset]]</span>\n                </div>\n              </div>\n              \n              <dnd-button hidden$=\"[[!isEditMode]]\" class=\"ability__delete\" link icon=\"delete\" on-click=\"_deleteAbility\"></dnd-button>\n\n            </div>\n          </template>\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\n  \"dnd-character-builder-abilities\",\n  DndCharacterBuilderAbilities\n);\n"],"sourceRoot":""}