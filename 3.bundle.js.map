{"version":3,"sources":["webpack:///./node_modules/@vaadin/vaadin-checkbox/vaadin-checkbox.js","webpack:///./node_modules/@vaadin/vaadin-text-field/vaadin-text-field.js","webpack:///./node_modules/@vaadin/vaadin-grid/theme/lumo/vaadin-grid-tree-toggle-styles.js","webpack:///./node_modules/@vaadin/vaadin-grid/src/vaadin-grid-tree-toggle.js","webpack:///./components/views/character/dnd-character-builder-spells.js"],"names":["$_documentContainer","document","head","appendChild","content","createElement","innerHTML","level","type","Number","value","observer","leaf","Boolean","reflectToAttribute","expanded","notify","super","ready","this","addEventListener","e","_onClick","preventDefault","toString","style","_debouncerUpdateLevel","debounce","updateStyles","customElements","define","is","DndCharacterBuilderSpells","spellsKnown","Object","preparedSpells","noContentMessage","isEditMode","filterStr","String","expandedItems","Array","window","scrollTo","originalScrollHeight","scrollY","length","oldExpanded","$","grid","expandAll","clearCache","setTimeout","undefined","_filterChange","__filterChangeThrottled","bind","connectedCallback","characterChangeHandler","character","detail","updateFromCharacter","refresh","editModeHandler","disconnectedCallback","removeEventListener","multiclassSlotsDef","fullCasterSlotsDef","halfCasterSlotsDef","thirdCasterSlotsDef","dataProvider","params","callback","startIndex","page","pageSize","children","parentItem","spellDisplay","filter","child","hasDecendentWithFilter","toLowerCase","slice","node","name","indexOf","findExpandables","array","id","push","classRefs","classLevels","newSpellMods","overalLevel","entries","reduce","total","className","profBonus","classRef","casterProgression","alreadyAdded","find","spellMod","spellcastingAbility","classes","attributeModifier","spellAttackBonus","dc","mod","spellMods","spellsKnownObj","updateSpellStats","casterSourceRef","isSubclass","tableGroups","classTableGroups","casterName","subclassLevel","subclasses","subclassDef","i","shortName","subclassTableGroups","spellsKnownOrPrepared","cantripsKnown","warlockSpellLevel","warlockSpellSlots","spellsKnowPreparedType","forEach","tableGroup","colLabels","spellsColIndex","findIndex","label","rows","cantripsColIndex","warlockSpellLevelColIndex","warlockSpellLevelMatches","match","parseInt","warlockSpellSlotsColIndex","levelMultiplier","Math","floor","subclassName","classSpellList","searchSource","source","searchName","replaceAll","trim","key","divineSoulSpellList","Set","concat","spellTable","title","spellSlotEntries","rowsSpellProgression","spellSlots","hasCantrips","oldSpellsPrepared","oldCantripsPrepared","preparedCantrips","map","index","spellList","spell","sort","a","b","isCantrip","isPrepared","isSubclassSpell","hasChildren","parentClass","parentLevel","isWarlock","levelObj","currentSlots","some","item","slots","current","keys","max","maxCantrips","currentCantrips","classObj","spellPrepType","multiclassingLevels","newSpellDisplay","multiclassLevel","isMulticlass","spellClass","spellLevel","adjIndex","multiclassSlotsArray","currentWarlockSlots","dispatchEvent","CustomEvent","bubbles","composed","stopPropagation","model","_toggleCantripPrepared","_isPreparedSpell","currentPreparedCount","_currentSpellsKnownCount","maxPreparedCount","_maxSpellsKnownCount","spellsKnownCopy","JSON","parse","stringify","splice","_flashPreparedButton","_isPreparedCantrip","_currentCantripsKnownCount","_maxCantripsKnownCount","buttonEl","classList","add","remove","isInput","maxSlots","checked","_setSpellSlotsChecked","count","el","checkboxes","querySelectorAll","spellName","prepareType","data","spLevelToFull","tooltipStr","target","dataset","tooltip","hasTooltip","from","childEl","matches","tooltipCloseListener","tooltips","tooltipEl","spellParent","meta","ritual","duration","d","concentration","time","t","unit","SP_SCHOOL_ABV_TO_FULL","school","values","clas","join","num"],"mappings":"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","file":"3.bundle.js","sourcesContent":["import './theme/lumo/vaadin-checkbox.js';\nexport * from './src/vaadin-checkbox.js';\n","import './theme/lumo/vaadin-text-field.js';\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\nconst $_documentContainer = html`<dom-module id=\"lumo-grid-tree-toggle\" theme-for=\"vaadin-grid-tree-toggle\">\n  <template>\n    <style>\n      :host {\n        --vaadin-grid-tree-toggle-level-offset: 2em;\n        align-items: center;\n        vertical-align: middle;\n        margin-left: calc(var(--lumo-space-s) * -1);\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      :host(:not([leaf])) {\n        cursor: default;\n      }\n\n      [part=\"toggle\"] {\n        display: inline-block;\n        font-size: 1.5em;\n        line-height: 1;\n        width: 1em;\n        height: 1em;\n        text-align: center;\n        color: var(--lumo-contrast-50pct);\n        /* Increase touch target area */\n        padding: calc(1em / 3);\n        margin: calc(1em / -3);\n      }\n\n      :host(:not([dir=\"rtl\"])) [part=\"toggle\"] {\n        margin-right: 0;\n      }\n\n      @media (hover: hover) {\n        :host(:hover) [part=\"toggle\"] {\n          color: var(--lumo-contrast-80pct);\n        }\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"lumo-icons\";\n        display: inline-block;\n        height: 100%;\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-right);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-right);\n        transform: rotate(90deg);\n      }\n\n      /* Experimental support for hierarchy connectors, using an unsupported selector */\n      :host([theme~=\"connectors\"]) #level-spacer {\n        position: relative;\n        z-index: -1;\n        font-size: 1em;\n        height: 1.5em;\n      }\n\n      :host([theme~=\"connectors\"]) #level-spacer::before {\n        display: block;\n        content: \"\";\n        margin-top: calc(var(--lumo-space-m) * -1);\n        height: calc(var(--lumo-space-m) + 3em);\n        background-image: linear-gradient(to right, transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px), var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px));\n        background-size: var(--vaadin-grid-tree-toggle-level-offset) var(--vaadin-grid-tree-toggle-level-offset);\n        background-position: calc(var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px) 0;\n      }\n\n      /* RTL specific styles */\n\n      :host([dir=\"rtl\"]) {\n        margin-left: 0;\n        margin-right: calc(var(--lumo-space-s) * -1);\n      }\n\n      :host([dir=\"rtl\"]) [part=\"toggle\"] {\n        margin-left: 0;\n      }\n\n      :host([dir=\"rtl\"][expanded]) [part=\"toggle\"]::before {\n        transform: rotate(-90deg);\n      }\n\n      :host([dir=\"rtl\"][theme~=\"connectors\"]) #level-spacer::before {\n        background-image: linear-gradient(to left, transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px), var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px));\n        background-position: calc(100% - (var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px)) 0;\n      }\n\n      :host([dir=\"rtl\"]:not([expanded])) [part=\"toggle\"]::before,\n      :host([dir=\"rtl\"][expanded]) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-left);\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '@polymer/polymer/lib/elements/custom-style.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { DirMixin } from '@vaadin/vaadin-element-mixin/vaadin-dir-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { microTask } from '@polymer/polymer/lib/utils/async.js';\nconst $_documentContainer = document.createElement('template');\n\n$_documentContainer.innerHTML = `<custom-style>\n  <style>\n    @font-face {\n      font-family: \"vaadin-grid-tree-icons\";\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAQkAA0AAAAABrwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAECAAAABoAAAAcgHwa6EdERUYAAAPsAAAAHAAAAB4AJwAOT1MvMgAAAZQAAAA/AAAAYA8TBIJjbWFwAAAB8AAAAFUAAAFeGJvXWmdhc3AAAAPkAAAACAAAAAgAAAAQZ2x5ZgAAAlwAAABLAAAAhIrPOhFoZWFkAAABMAAAACsAAAA2DsJI02hoZWEAAAFcAAAAHQAAACQHAgPHaG10eAAAAdQAAAAZAAAAHAxVAgBsb2NhAAACSAAAABIAAAASAIAAVG1heHAAAAF8AAAAGAAAACAACgAFbmFtZQAAAqgAAAECAAACTwflzbdwb3N0AAADrAAAADYAAABZQ7Ajh3icY2BkYGAA4twv3Vfi+W2+MnCzMIDANSOmbGSa2YEZRHEwMIEoAAoiB6sAeJxjYGRgYD7w/wADAwsDCDA7MDAyoAI2AFEEAtIAAAB4nGNgZGBg4GBgZgDRDAxMDGgAAAGbABB4nGNgZp7JOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDA+38d84P8BBgdmIAapQZJVYGAEAGc/C54AeJxjYYAAxlAIzQTELAwMBxgZGB0ACy0BYwAAAHicY2BgYGaAYBkGRgYQiADyGMF8FgYbIM3FwMHABISMDArP9/3/+/8/WJXC8z0Q9v8nEp5gHVwMMMAIMo+RDYiZoQJMQIKJARUA7WBhGN4AACFKDtoAAAAAAAAAAAgACAAQABgAJgA0AEIAAHichYvBEYBADAKBVHBjBT4swl9KS2k05o0XHd/yW1hAfBFwCv9sIlJu3nZaNS3PXAaXXHI8Lge7DlzF7C1RgXc7xkK6+gvcD2URmQB4nK2RQWoCMRiFX3RUqtCli65yADModOMBLLgQSqHddRFnQghIAnEUvEA3vUUP0LP0Fj1G+yb8R5iEhO9/ef/7FwFwj28o9EthiVp4hBlehcfUP4Ur8o/wBAv8CU+xVFvhOR7UB7tUdUdlVRJ6HnHWTnhM/V24In8JT5j/KzzFSi2E53hUz7jCcrcIiDDwyKSW1JEct2HdIPH1DFytbUM0PofWdNk5E5oUqb/Q6HHBiVGZpfOXkyUMEj5IyBuNmYZQjBobfsuassvnkKLe1OuBBj0VQ8cRni2xjLWsHaM0jrjx3peYA0/vrdmUYqe9iy7bzrX6eNP7Jh1SijX+AaUVbB8AAHicY2BiwA84GBgYmRiYGJkZmBlZGFkZ2djScyoLMgzZS/MyDQwMwLSruZMzlHaB0q4A76kLlwAAAAEAAf//AA94nGNgZGBg4AFiMSBmYmAEQnYgZgHzGAAD6wA2eJxjYGBgZACCKxJigiD6mhFTNowGACmcA/8AAA==) format('woff');\n      font-weight: normal;\n      font-style: normal;\n    }\n  </style>\n</custom-style>`;\n\ndocument.head.appendChild($_documentContainer.content);\n/**\n * `<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\n * that provides toggle and level display functionality for the item tree.\n *\n * #### Example:\n * ```html\n * <vaadin-grid-column>\n *   <template class=\"header\">Package name</template>\n *   <template>\n *     <vaadin-grid-tree-toggle\n *         leaf=\"[[!item.hasChildren]]\"\n *         expanded=\"{{expanded}}\"\n *         level=\"[[level]]\">\n *       [[item.name]]\n *     </vaadin-grid-tree-toggle>\n *   </template>\n * </vaadin-grid-column>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ---|---\n * `toggle` | The tree toggle icon\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * ---|---|---\n * `expanded` | When present, the toggle is expanded | :host\n * `leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n *\n * The following custom CSS properties are available on\n * the `<vaadin-grid-tree-toggle>` element:\n *\n * Custom CSS property | Description | Default\n * ---|---|---\n * `--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`\n *\n * @extends PolymerElement\n * @mixes ThemableMixin\n */\nclass GridTreeToggleElement extends ThemableMixin(DirMixin(PolymerElement)) {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: inline-flex;\n        align-items: baseline;\n\n        /* CSS API for :host */\n        --vaadin-grid-tree-toggle-level-offset: 1em;\n\n        /*\n          ShadyCSS seems to polyfill :dir(rtl) only for :host, thus using\n          a host custom CSS property for ltr/rtl toggle icon choice.\n         */\n        ---collapsed-icon: \"\\\\e7be\\\\00a0\";\n      }\n\n      :host(:dir(rtl)) {\n        ---collapsed-icon: \"\\\\e7bd\\\\00a0\";\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:not([leaf])) {\n        cursor: pointer;\n      }\n\n      #level-spacer,\n      [part=\"toggle\"] {\n        flex: none;\n      }\n\n      #level-spacer {\n        display: inline-block;\n        width: calc(var(---level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"vaadin-grid-tree-icons\";\n        line-height: 1em; /* make icon font metrics not affect baseline */\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(---collapsed-icon);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: \"\\\\e7bc\\\\00a0\"; /* icon glyph + single non-breaking space */\n      }\n\n      :host([leaf]) [part=\"toggle\"] {\n        visibility: hidden;\n      }\n    </style>\n\n    <span id=\"level-spacer\"></span>\n    <span part=\"toggle\"></span>\n    <slot></slot>\n`;\n  }\n\n  static get is() {\n    return 'vaadin-grid-tree-toggle';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Current level of the tree represented with a horizontal offset\n       * of the toggle button.\n       */\n      level: {\n        type: Number,\n        value: 0,\n        observer: '_levelChanged'\n      },\n\n      /**\n       * Hides the toggle icon and disables toggling a tree sublevel.\n       */\n      leaf: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * Sublevel toggle state.\n       */\n      expanded: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n\n    this.addEventListener('click', e => this._onClick(e));\n  }\n\n  _onClick(e) {\n    if (this.leaf) {\n      return;\n    }\n\n    e.preventDefault();\n    this.expanded = !this.expanded;\n  }\n\n  _levelChanged(level) {\n    const value = Number(level).toString();\n    this.style['---level'] = value;\n    // Async is to make DOM updates applied before evaluating the style\n    // update, required for polyfilled RTL support in MSIE and Edge.\n    this._debouncerUpdateLevel = Debouncer.debounce(\n      this._debouncerUpdateLevel,\n      microTask,\n      () => this.updateStyles({'---level': value})\n    );\n  }\n}\n\ncustomElements.define(GridTreeToggleElement.is, GridTreeToggleElement);\n\nexport { GridTreeToggleElement };\n","import { PolymerElement,html } from \"@polymer/polymer\";\nimport \"@vaadin/vaadin-grid\";\nimport \"@vaadin/vaadin-grid/vaadin-grid-tree-toggle\";\nimport { getCharacterChannel, getSelectedCharacter, getClassReferences, getClassLevelGroups, toggleSpellPrepared, saveCharacter, getAttributeModifier, isSpellPreparedFromObj, setSpellSlots, getSpellSlots, toggleCantripPrepared, getSubclassChoiceLevel, getSubclassChoice } from \"../../../util/charBuilder\";\nimport { filterModel, loadModel } from \"../../../util/data\";\nimport { dispatchEditModeChange, getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { spellHtml } from \"../../../js/spells\";\nimport { findInPath, util_capitalize, util_capitalizeAll, getProfBonus, throttle, debounce, cloneDeep } from \"../../../js/utils\";\nimport Parser from \"../../../util/Parser\";\nimport \"@vaadin/vaadin-checkbox\";\nimport \"@vaadin/vaadin-text-field\";\nimport \"../../dnd-button\";\n\nclass DndCharacterBuilderSpells extends PolymerElement {\n  \n  static get properties() {\n    return {\n      spellsKnown: {\n        type: Object,\n        value: {}\n      },\n      preparedSpells: {\n        type: Object,\n        value: {}\n      },\n      noContentMessage: {\n        type: Boolean,\n        value: false\n      },\n      isEditMode: {\n        type: Boolean,\n        value: false\n      },\n      filterStr: {\n        type: String,\n        value: '',\n        observer: '_filterChange'\n      },\n      expandedItems: {\n        type: Array\n      },\n    };\n  }\n\n  static get observers() {\n    return [\n      '_expandedItemsChange(expandedItems.*)'\n    ]\n  }\n\n  _expandedItemsChange() {\n    window.scrollTo(0, this.originalScrollHeight);\n  }\n\n  _recordScrollHeight() {\n    // Fix reposition issue after tree expand/collapse toggle\n    this.originalScrollHeight = window.scrollY;\n  }\n\n  __filterChangeThrottled() {\n    if (this.filterStr.length) {\n      if (!this.oldExpanded) {\n        this.oldExpanded = this.$.grid.expandedItems;\n      }\n      this.expandAll();\n      this.$.grid.clearCache();\n      setTimeout(() => {\n        this.expandAll();\n      }, 10);\n    } else {\n      if (this.oldExpanded) {\n        this.$.grid.expandedItems = this.oldExpanded;\n        this.oldExpanded = undefined;\n      }\n      this.$.grid.clearCache();\n    }\n  }\n\n  constructor() {\n    super();\n\n    this._filterChange = debounce(this.__filterChangeThrottled.bind(this), 250);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    this.refresh = true;\n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\",this.characterChangeHandler);\n\n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n      this.refresh = true;\n      this.updateFromCharacter(getSelectedCharacter());\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    getCharacterChannel().removeEventListener(\"character-selected\",this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  ready() {\n    super.ready();\n\n    this.multiclassSlotsDef = [\n      [2],\n      [3],\n      [4,2],\n      [4,3],\n      [4,3,2],\n      [4,3,3],\n      [4,3,3,1],\n      [4,3,3,2],\n      [4,3,3,3,1],\n      [4,3,3,3,2],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1,1],\n      [4,3,3,3,3,1,1,1,1],\n      [4,3,3,3,3,2,1,1,1],\n      [4,3,3,3,3,2,2,1,1]\n    ];\n\n    this.fullCasterSlotsDef = [];\n\n    this.halfCasterSlotsDef = [];\n    \n    this.thirdCasterSlotsDef = [];\n\n    setTimeout(() => {\n      const grid = this.$.grid;\n\n      grid.dataProvider = ((params, callback) => {\n        const startIndex = params.page * params.pageSize;\n        let children = params.parentItem ? params.parentItem.children : this.spellDisplay;\n        if (this.filterStr.length) {\n          children = children.filter((child) => {\n            return this.hasDecendentWithFilter(child, this.filterStr.toLowerCase()) \n          });\n        }\n        if (children && children.length) {\n          const page = children.slice(startIndex, startIndex + params.pageSize);\n          callback(page, children.length);\n        }\n      }).bind(this);\n    }, 0);\n  }\n\n  hasDecendentWithFilter(node, filterStr) {\n    if (!node.name || node.name.toLowerCase().indexOf(filterStr) > -1) {\n      return true;\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        return this.hasDecendentWithFilter(child, filterStr);\n      }\n    }\n    return false;\n  }\n\n  clearFilterStr() {\n    this.filterStr = '';\n  }\n\n  expandAll() {\n    this.$.grid.expandedItems = this.findExpandables(this.spellDisplay);\n  }\n\n  findExpandables(node, array = []) {\n    if (node.id === 'level' || node.id === 'class') {\n      array.push(node);\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        this.findExpandables(child, array);\n      }\n    }\n    return array;\n  }\n\n  async updateSpellStats(classRefs, classLevels) {\n    if (classLevels && classRefs) {\n      // DCs and Spell Modifier\n      const newSpellMods = [];\n      const overalLevel = Object.entries(classLevels).reduce((total, [className, level]) => total + level, 0);\n      const profBonus = getProfBonus(overalLevel);\n\n      for (const [className, level] of Object.entries(classLevels)) {\n        const classRef = classRefs[className];\n        if (classRef.casterProgression) {\n          const alreadyAdded = newSpellMods.find(spellMod => classRef.spellcastingAbility === spellMod.spellcastingAbility);\n          if (alreadyAdded) {\n            alreadyAdded.classes.push(className);\n          } else {\n            const attributeModifier = await getAttributeModifier(classRef.spellcastingAbility);\n            const spellAttackBonus = attributeModifier + profBonus\n            const dc = 8 + spellAttackBonus;\n            newSpellMods.push({ classes: [className], mod: attributeModifier, spellAttackBonus, dc, spellcastingAbility: classRef.spellcastingAbility});\n          }\n        }\n      }\n\n      this.spellMods = newSpellMods;\n    } else {\n      this.spellMods = [];\n    }\n  }\n\n  async updateFromCharacter(character) {\n    if (character && this.refresh) {\n      this.noContentMessage = true;\n      const classRefs = await getClassReferences(character),\n        classLevels = getClassLevelGroups(character),\n        expandedItems = [],\n        spellsKnownObj = {};\n      let spellDisplay = [];\n\n      this.updateSpellStats(classRefs, classLevels);\n\n      for (const [ className, level ] of Object.entries(classLevels)) {\n        const classRef = classRefs[className];\n        let casterSourceRef = classRef;\n        let isSubclass = false;\n        let tableGroups = classRef.classTableGroups;\n        let casterName = className;\n\n        // Checking the class first for a caster progression, then checking subclass\n        if (!casterSourceRef.casterProgression) {\n          const subclassLevel = getSubclassChoiceLevel(classRef);\n          if (level >= subclassLevel && character.subclasses && character.subclasses[className] && classRef.subclasses && classRef.subclasses.length) {\n            const subclassDef = classRef.subclasses.find(i => character.subclasses[className].name === i.name);\n            if (subclassDef && subclassDef.casterProgression) {\n              // replacing caster parsing references with that from subclass \n              casterSourceRef = subclassDef;\n              casterName = subclassDef.shortName;\n              tableGroups = subclassDef.subclassTableGroups;\n              isSubclass = true;\n            }\n          }\n        }\n\n        if (casterSourceRef.casterProgression) {\n          this.noContentMessage = false;\n          let spellsKnownOrPrepared;\n          let spellsKnowPreparedType = 'known';\n          let cantripsKnown;\n          let warlockSpellLevel;\n          let warlockSpellSlots;\n\n          // Getting spells + cantrips known info from table, also getting warlock info from table\n          tableGroups.forEach((tableGroup) => {\n            if (tableGroup.colLabels && tableGroup.colLabels.length) {\n              const spellsColIndex = tableGroup.colLabels.findIndex((label) => label.toLowerCase().indexOf(\"spells known\") > -1);\n              if (spellsColIndex > -1 && tableGroup.rows && tableGroup.rows.length > level - 1) {\n                spellsKnownOrPrepared = tableGroup.rows[level - 1][spellsColIndex];\n              }\n              const cantripsColIndex = tableGroup.colLabels.findIndex((label) => label.toLowerCase().indexOf(\"cantrips known\") > -1);\n              if (cantripsColIndex > -1 && tableGroup.rows && tableGroup.rows.length > level - 1) {\n                cantripsKnown = tableGroup.rows[level - 1][cantripsColIndex];\n              }\n              const warlockSpellLevelColIndex = tableGroup.colLabels.findIndex((label) => label.toLowerCase().indexOf(\"slot level\") > -1);\n              if (warlockSpellLevelColIndex > -1 && tableGroup.rows && tableGroup.rows.length > level - 1) {\n                const warlockSpellLevelString = tableGroup.rows[level - 1][warlockSpellLevelColIndex];\n                const warlockSpellLevelMatches = warlockSpellLevelString.match(/(\\d+)/g);\n                if (warlockSpellLevelMatches && warlockSpellLevelMatches.length) {\n                  warlockSpellLevel = parseInt(warlockSpellLevelMatches[0]);\n                }\n              }\n              const warlockSpellSlotsColIndex = tableGroup.colLabels.findIndex((label) => label.toLowerCase().indexOf(\"spell slots\") > -1);\n              if (warlockSpellSlotsColIndex > -1 && tableGroup.rows && tableGroup.rows.length > level - 1) {\n                warlockSpellSlots = tableGroup.rows[level - 1][warlockSpellSlotsColIndex];\n              }\n            }\n          });\n\n          // otherwise compute spells prepared\n          if (spellsKnownOrPrepared === undefined) {\n            spellsKnowPreparedType = 'prepared';\n            // todo, check 1/3 caster progression\n            const levelMultiplier = casterSourceRef.casterProgression === 'full' ? 1 : 0.51;\n            const attributeModifier = await getAttributeModifier(casterSourceRef.spellcastingAbility);\n            spellsKnownOrPrepared = Math.floor(level * levelMultiplier) + attributeModifier;\n            spellsKnownOrPrepared = spellsKnownOrPrepared < 1 ? 1 : spellsKnownOrPrepared;\n          }\n\n          /* SPELL LISTS */\n          // Getting class spell list\n          let classSpellList = [];\n          let subclassName;\n          \n          if (isSubclass) {\n            subclassName = casterSourceRef.shortName;\n          } else {\n            // Revised Ranger fix\n            let searchSource = casterSourceRef.name.indexOf('(Revised)') > -1 ? 'PHB' : casterSourceRef.source;\n            let searchName = casterSourceRef.name.indexOf('(Revised)') > -1 ? casterSourceRef.name.replaceAll('(Revised)', '').trim() : casterSourceRef.name;\n            classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: searchName, source: searchSource } } );\n\n            const subclassLevel = getSubclassChoiceLevel(classRef);\n            if (level >= subclassLevel) {\n              subclassName = character.subclasses && character.subclasses[className] ? character.subclasses[className].shortName : '';\n            }\n          }\n\n          // Getting subclass spell list (always prepared)\n          if (subclassName) {\n            if (subclassName === 'Eldritch Knight') {\n              classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'wizard', source: 'phb' } } );\n            }\n            if (subclassName === 'Divine Soul') {\n              let divineSoulSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'cleric', source: 'phb' } } );\n              classSpellList = [...new Set(classSpellList.concat(divineSoulSpellList))];\n            }\n          }\n\n          // Getting spell slots per level array\n          const spellTable = tableGroups.find((tableGroup) => tableGroup.title === \"Spell Slots\");\n          let spellSlotEntries;\n          if (spellTable) {\n            spellSlotEntries = spellTable.rowsSpellProgression[level - 1].filter((spellSlots) => spellSlots !== 0);\n          } else {\n            // If no spell slots per level, then we're a warlock, get spell entries for\n            // warlocks with zero spell slots at each level (pact slots will be added later)\n            spellSlotEntries = [];\n            for (let i = 0; i < warlockSpellLevel; i++) {\n              spellSlotEntries.push(0);\n            }\n          }\n\n          // // Adding additionalSpells\n          // const additionalSpellChoices = Object.values(character.choices).filter((c) => !!c.additionalSpells);\n          // const spellsModel = await loadModel('spells');\n          // const addtlLevelsObj = {};\n          // additionalSpellChoices.forEach(spellChoice => {\n          //   const allAddtlSpells = spellChoice.additionalSpells.defaultSpells.concat(spellChoice.additionalSpells.selectedSpells);\n\n          //   allAddtlSpells.forEach((spellChoiceEntry) => {\n          //     const spellsForThisEntry = spellChoiceEntry.spells ? spellChoiceEntry.spells : [spellChoiceEntry];\n\n          //     spellsForThisEntry.forEach((addtlSpell) => {\n          //       const spellDef = spellsModel.find(s => s.name.toLowerCase() === addtlSpell.name.toLowerCase() && s.source.toLowerCase() === addtlSpell.source.toLowerCase());\n                \n          //       if (spellDef) {\n          //         const spellLevel = spellDef.level;\n          //         const spellClass = spellChoice.class || 'Other';\n\n          //         if (!addtlLevelsObj[spellClass]) {\n          //           addtlLevelsObj[spellClass] = {};\n          //         }\n          //         if (!addtlLevelsObj[spellClass][spellLevel]) {\n          //           addtlLevelsObj[spellClass][spellLevel] = [];\n          //         }\n      \n          //         addtlLevelsObj[spellClass][spellLevel].push({...spellChoice, spellDef});\n          //       }\n          //     })\n          //   });\n          // });\n\n          // Adding cantrips entry\n          const hasCantrips = cantripsKnown ? 0 : 1;\n          if (cantripsKnown) {\n            spellSlotEntries = [0].concat(spellSlotEntries);\n          }\n\n          // Clearing prepared spells to filter out those that can no longer be prepared\n          let oldSpellsPrepared = cloneDeep(character.preparedSpells);\n          let oldCantripsPrepared = cloneDeep(character.preparedCantrips);\n          character.preparedSpells[casterName] = {};\n          character.preparedCantrips[casterName] = {};\n          \n\n          // Generating hierarchical structure of classes > levels > spells > spellDef\n          const spellSlots = spellSlotEntries.map((spellSlots, index) => {\n            if (spellSlots !== -1) {\n              let spellList = classSpellList\n                .filter((spell) => {\n                  return spell.level === index + hasCantrips;\n                })\n                .sort((a, b) => {\n                  if (a.name < b.name) { return -1; }\n                  if (a.name > b.name) { return 1; }\n                  return 0;\n                })\n                .map(spell => {\n                  const isCantrip = index + hasCantrips === 0;\n                  const isPrepared = isCantrip ? isSpellPreparedFromObj(casterName, spell, oldCantripsPrepared) : isSpellPreparedFromObj(casterName, spell, oldSpellsPrepared);\n                  if (isPrepared) {\n                    if (isCantrip) {\n                      character.preparedCantrips[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    } else {\n                      character.preparedSpells[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    }\n                  }\n                  if (this.isEditMode || isPrepared || spell.isSubclassSpell) {\n                    return {\n                      id: 'spell',\n                      name: spell.name, \n                      children: [{...spell, hasChildren: false, id: 'spelldef', parentClass: casterName, parentLevel: index + hasCantrips} ],\n                      hasChildren: true,\n                      parentClass: casterName,\n                      parentLevel: index + hasCantrips,\n                      isCantrip,\n                      isSubclassSpell: spell.isSubclassSpell,\n                      isWarlock: !!warlockSpellLevel\n                    };\n                  } else {\n                    return undefined;\n                  }\n                })\n                .filter((spell) => spell !== undefined);\n              const levelObj = {\n                id: 'level',\n                level: index + hasCantrips,\n                spellSlots,\n                currentSlots: getSpellSlots(index + hasCantrips),\n                children: spellList,\n                hasChildren: spellList.length > 0,\n                parentClass: casterName,\n                isWarlock: !!warlockSpellLevel\n              };\n              const isExpanded = this.$.grid.expandedItems.some(item => item.id === 'level' && item.level === levelObj.level && item.parentClass === levelObj.parentClass);\n              if (isExpanded) {\n                expandedItems.push(levelObj);\n              }\n              return levelObj;\n            } else {\n              return null\n            }\n          }).filter(slots => slots !== null);\n\n          spellsKnownObj[casterName] = {\n            current: character.preparedSpells && character.preparedSpells[casterName] ? Object.keys(character.preparedSpells[casterName]) : [],\n            max: spellsKnownOrPrepared,\n            type: spellsKnowPreparedType,\n            maxCantrips: cantripsKnown,\n            currentCantrips: character.preparedCantrips && character.preparedCantrips[casterName] ? Object.keys(character.preparedCantrips[casterName]) : []\n          };\n\n          if (spellSlots.length) {\n            const classObj = {\n              id: 'class',\n              className: casterName,\n              level,\n              hasCantrips,\n              children: spellSlots,\n              spellsKnown: spellsKnownOrPrepared,\n              hasChildren: spellSlots.length > 0,\n              spellPrepType: spellsKnowPreparedType,\n              multiclassingLevels: isSubclass ? 0 : Math.floor((classRef.casterProgression === 'full' ? 1 : 0.5) * level),\n              isWarlock: !!warlockSpellLevel,\n              warlockSpellLevel,\n              warlockSpellSlots\n            };\n            expandedItems.push(classObj);\n            spellDisplay.push(classObj);\n          }\n        }\n      } // end level loop\n\n      // const levelObj = {\n      //   id: 'level',\n      //   level: index + hasCantrips,\n      //   spellSlots,\n      //   currentSlots: getSpellSlots(index + hasCantrips),\n      //   children: spellList,\n      //   hasChildren: spellList.length > 0,\n      //   parentClass: casterName,\n      //   isWarlock: !!warlockSpellLevel\n      // };\n      // const sortedLevels = Object.entries(addtlLevelsObj).sort((a, b) => parseInt(a[0]) - parseInt(b[0])).map(a => {\n      //   const spellList = a[1];\n      //   return {\n      //     id: 'level',\n      //     level: parseInt(a[0]),\n      //     spellSlots: 0,\n      //     currentSlots: 0,\n      //     children: spellList,\n      //     hasChildren: spellList.length > 0,\n      //     parentClass: 'Other',\n      //     isWarlock: false\n      //   };\n      // });\n      // const otherSpellsObj = {\n      //   id: 'class',\n      //   className: 'Other',\n      //   level: 0,\n      //   hasCantrips: false,\n      //   children: sortedLevels,\n      //   spellsKnown: 0,\n      //   hasChildren: sortedLevels > 0,\n      //   spellPrepType: 'always',\n      //   multiclassingLevels: 0,\n      //   isWarlock: false,\n      //   warlockSpellLevel: 0,\n      //   warlockSpellSlots: 0\n      // };\n      // spellDisplay.push(otherSpellsObj);\n      // expandedItems.push(otherSpellsObj);\n\n      // console.error(additionalSpellChoices, otherSpellsObj);\n      // console.error('spells', spellDisplay);\n      // spellsKnownObj.Other = {\n      //   max: 12,\n      //   maxCantrips: 0,\n      //   current: [],\n      //   currentCantrips: []\n      // }\n\n      // sorting most levels first\n      spellDisplay.sort((a, b) => a.children.length - b.children.length);\n\n      // Changing structure for non-edit mode & multiclassing\n      if (!this.isEditMode) {\n        let newSpellDisplay = [];\n        if (spellDisplay.length) {\n          let multiclassLevel = 0,\n            isMulticlass = -1,\n            warlockSpellLevel,\n            warlockSpellSlots;\n\n          // Combine all class spell levels into single references\n          for (let spellClass of spellDisplay) {\n            if (!spellClass.isWarlock) {\n              multiclassLevel += spellClass.multiclassingLevels;\n              isMulticlass ++;\n            } else {\n              warlockSpellLevel = spellClass.warlockSpellLevel;\n              warlockSpellSlots = spellClass.warlockSpellSlots;\n            }\n\n            spellClass.children.forEach((spellLevel, index) => {\n              const adjIndex = index + spellClass.hasCantrips;\n              if (!newSpellDisplay[adjIndex]) {\n                newSpellDisplay[adjIndex] = spellLevel;\n              } else if (spellLevel.children[index]) {\n                newSpellDisplay[adjIndex].children = newSpellDisplay[adjIndex].children.concat(spellLevel.children);\n              }\n            });\n          }\n\n          // remove index 0 if no cantrips\n          newSpellDisplay = newSpellDisplay.filter(i => i !== undefined);\n\n          // Changing spell slots for multiclass rules\n          const hasCantrips = newSpellDisplay[0].level === 0;\n          if (isMulticlass > 0) {\n            const multiclassSlotsArray = this.multiclassSlotsDef[multiclassLevel + 1];\n\n            for (let i = (hasCantrips ? 1 : 0); i < multiclassSlotsArray.length; i++) {\n              const spellSlots =  multiclassSlotsArray[i - (hasCantrips ? 1 : 0)];\n              if (newSpellDisplay[i]) {\n                newSpellDisplay[i].spellSlots = spellSlots;\n              } else {\n                newSpellDisplay.push({\n                  children: [],\n                  currentSlots: getSpellSlots(i + 1 - (hasCantrips ? 1 : 0)),\n                  hasChildren: false,\n                  id: \"level\",\n                  isWarlock: false,\n                  level: i,\n                  spellSlots\n                });\n              }\n            }\n          }\n\n          // Adding warlock slots\n          if (warlockSpellLevel) {\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].warlockSpellSlots = warlockSpellSlots;\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].currentWarlockSlots = character.warlockSpellSlots || 0;\n          }\n        }\n        spellDisplay = newSpellDisplay;\n      }\n\n      this.refresh = false;\n      saveCharacter(character);\n      this.spellsKnown = spellsKnownObj;\n      this.spellDisplay = spellDisplay;\n      this.expandedItems = expandedItems;\n      this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n      this.$.grid.clearCache();\n    }\n  }\n\n  _renderSpell(spell) {\n    return spellHtml(spell);\n  }\n\n  _toggleSpellPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isSubclassSpell = e.model.item.isSubclassSpell;\n    if (!isSubclassSpell && this.isEditMode) {\n      const isCantrip = e.model.item.isCantrip;\n      if (isCantrip) {\n        this._toggleCantripPrepared(e);\n      } else {\n        const className = e.model.item.parentClass;\n        const spell = e.model.item.children[0];\n        const isPrepared = this._isPreparedSpell(this.spellsKnown, className, spell.name);\n        const currentPreparedCount = this._currentSpellsKnownCount(className, this.spellsKnown);\n        const maxPreparedCount = this._maxSpellsKnownCount(className, this.spellsKnown);\n\n        if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n          let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n          if (isPrepared) {\n            const index = spellsKnownCopy[className].current.indexOf(spell.name);\n            spellsKnownCopy[className].current.splice(index, 1);\n          } else {\n            spellsKnownCopy[className].current.push(spell.name);\n          }\n          this.spellsKnown = spellsKnownCopy;\n          toggleSpellPrepared(className, spell);\n        } else if (currentPreparedCount >= maxPreparedCount) {\n          this._flashPreparedButton(findInPath('button', e));\n        }\n      }\n    }\n  }\n\n  _toggleCantripPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const className = e.model.item.parentClass;\n    const spell = e.model.item.children[0];\n    const isPrepared = this._isPreparedCantrip(this.spellsKnown, className, spell.name);\n    const currentPreparedCount = this._currentCantripsKnownCount(className, this.spellsKnown);\n    const maxPreparedCount = this._maxCantripsKnownCount(className, this.spellsKnown);\n\n    if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n      let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n      if (isPrepared) {\n        const index = spellsKnownCopy[className].currentCantrips.indexOf(spell.name);\n        spellsKnownCopy[className].currentCantrips.splice(index, 1);\n      } else {\n        spellsKnownCopy[className].currentCantrips.push(spell.name);\n      }\n      this.spellsKnown = spellsKnownCopy;\n      toggleCantripPrepared(className, spell);\n    } else if (currentPreparedCount >= maxPreparedCount) {\n      this._flashPreparedButton(findInPath('button', e));\n    }\n  }\n\n  _flashPreparedButton(buttonEl) {\n    if (buttonEl) {\n      buttonEl.classList.add('transition-bg');\n      buttonEl.classList.add('flash-error');\n      setTimeout(() => {\n        buttonEl.classList.remove('flash-error');\n        setTimeout(() => {\n          buttonEl.classList.remove('transition-bg');\n        }, 200);\n      }, 200);\n    }\n  }\n\n  _toggleSpellSlot(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isInput = findInPath('.checkbox-wrap', e);\n    const isWarlock = !!findInPath('[warlock-spell]', e);\n    const currentSlots = isWarlock ? e.model.item.currentWarlockSlots : e.model.item.currentSlots;\n    const maxSlots = isWarlock ? e.model.item.warlockSpellSlots : e.model.item.spellSlots;\n    const level = e.model.item.level;\n\n    if (isInput) {\n      const isChecked = isInput.children[0].checked;\n      if (!isChecked && currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n  \n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    } else {\n      if (currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1;\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n\n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    }\n    \n    if (isWarlock) {\n      this._setSpellSlotsChecked(e.model.item.currentWarlockSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentWarlockSlots, undefined, true);\n    } else {\n      this._setSpellSlotsChecked(e.model.item.currentSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentSlots);\n    }\n  }\n\n  _setSpellSlotsChecked(count, el) {\n    const checkboxes = el.querySelectorAll('vaadin-checkbox');\n    for (let i = 0; i < checkboxes.length; i++) {\n      if (i < count) {\n        checkboxes[i].checked = true;\n      } else {\n        checkboxes[i].checked = false\n      }\n    }\n  }\n\n  _isPreparedClass(spellsKnown, item, isEditMode) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isSubclassSpell = item.isSubclassSpell;\n    if (isSubclassSpell) {\n      return isEditMode ? 'spell-button always-prepared edit-mode' : 'spell-button always-prepared';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isSubclassSpell);\n    if (isPrepared) {\n      return isEditMode ? 'spell-prepared spell-button edit-mode' : 'spell-prepared spell-button';\n    }\n    return isEditMode ? 'spell-button edit-mode' : 'spell-button';\n  }\n\n  _isPreparedSpell(spellsKnown, className, spellName, isSubclassSpell){\n    return isSubclassSpell || spellsKnown[className] && spellsKnown[className].current && spellsKnown[className].current.length && spellsKnown[className].current.indexOf(spellName) > -1;\n  }\n\n  _isPreparedCantrip(spellsKnown, className, spellName){\n    return spellsKnown[className] && spellsKnown[className].currentCantrips && spellsKnown[className].currentCantrips.length && spellsKnown[className].currentCantrips.indexOf(spellName) > -1;\n  }\n\n  _isPreparedText(spellsKnown, item) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isSubclassSpell = item.isSubclassSpell;\n    const prepareType = spellsKnown[className].type;\n    if (isSubclassSpell) {\n      return prepareType === 'known' ? 'Always' : 'Always';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isSubclassSpell);\n    \n    if (isPrepared) {\n      return prepareType === 'known' ? 'Learned' : 'Prepared';\n    } else {\n      return prepareType === 'known' ? 'Learn' : 'Prepare';\n    }\n  }\n\n  _countToArray(count) {\n    const data = [];\n    for (var i = 0; i < count; i++) {\n      data.push(null);\n    }\n    return data;\n  }\n\n  _toLevel(level) {\n    if (level === 0) {\n      return Parser.spLevelToFull(level) + 's';\n    } else {\n      return Parser.spLevelToFull(level) + ' Level';\n    }\n  }\n  \n  _currentSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].current.length;\n    }\n    return 0;\n  }\n\n  _maxSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].max;\n    }\n    return 0;\n  }\n  \n  _currentCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].currentCantrips.length;\n    }\n    return 0;\n  }\n\n  _maxCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].maxCantrips;\n    }\n    return 0;\n  }\n\n  _toggleTooltip(e) {\n    const tooltipStr = e.target.dataset.tooltip;\n    const hasTooltip = Array.from(e.target.children).find((childEl) => childEl.matches('.tooltip'));\n\n    if (!window.tooltipCloseListener) {\n      window.tooltipCloseListener = true;\n      window.tooltips = [];\n      document.addEventListener('click', () => {\n        window.tooltips.forEach((tooltip) => {\n          tooltip.classList.remove('tooltip--open');\n          setTimeout(() => {\n            tooltip.remove();\n          }, 300);\n        });\n        window.tooltips = [];\n      });\n    }\n\n    if (hasTooltip) {\n      hasTooltip.classList.remove('tooltip--open');\n      setTimeout(() => {\n        hasTooltip.remove();\n      }, 300);\n    } else if (tooltipStr) {\n      const tooltipEl = document.createElement('div');\n      tooltipEl.innerHTML = tooltipStr;\n      tooltipEl.classList.add('tooltip');\n      e.target.appendChild(tooltipEl);\n      setTimeout(() => {\n        tooltipEl.classList.add('tooltip--open');\n        window.tooltips.push(tooltipEl);\n      }, 0);\n    }\n  }\n\n  _toggleEditMode() {\n    dispatchEditModeChange(!this.isEditMode);\n  }\n\n  _spellsKnownString(spellPrepType) {\n    return 'Spells ' + util_capitalize(spellPrepType) + ':'\n  }\n\n  _isRitualSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell && spell.meta && spell.meta.ritual;\n  }\n\n  _isConcentrationSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.duration.some((d) => d.concentration);\n  }\n\n  _isBonusActionSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.time.some((t) => t.unit === 'bonus');\n  }\n\n  _getSpellSchool(spellParent) {\n    const spell = spellParent.children[0];\n    return Parser.SP_SCHOOL_ABV_TO_FULL[spell.school];\n  }\n\n  _hidePrepareSpellsButton(isEditMode, spellsKnown) {\n    return isEditMode || !Object.values(spellsKnown).some((clas) => clas.current.length < clas.max - 1 || clas.currentCantrips.length < clas.maxCantrips - 1);\n  }\n\n  _spellLevel(item) {\n    if (item && item.children && item.children.length && item.children[0].level) {\n      return Parser.spLevelToFull(item.children[0].level);\n    }\n  }\n\n  _isSpellSlotChecked(currentSlots, index) {\n    return index < currentSlots;\n  }\n\n  _spellClassText(parentClass) {\n    return parentClass;//util_capitalizeAll(parentClass);\n  }\n\n  _isEmpty(a) {\n    return !a || !a.length;\n  }\n\n  _hideCheckboxes(spellSlots) {\n    return !spellSlots || spellSlots > 0 && this.isEditMode;\n  }\n  \n  _hideSlotsLabel(isEditMode, level) {\n    return !isEditMode || level === 0;\n  }\n  \n  _wrapClassString(isEditMode) {\n    return isEditMode ? 'edit-mode' : 'not-edit-mode';\n  }\n\n  _equal(a, b) {\n    return a === b;\n  }\n\n  _hasTwo(a) {\n    return a && a.length && a.length > 1;\n  }\n\n  _join(a) {\n    return a.join(', ');\n  }\n\n  _abs(num) {\n    return num >= 0 ? `+${num}`: num;\n  }\n\n  static get template() {\n    return html`\n      <style include='my-styles'>\n        :host {}\n        :host {\n          display: block;\n          padding-top: 16px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        .heading {\n          width: calc(100% - 32px);\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--lumo-contrast-10pct);\n          margin: 0 16px;\n        }\n\n        h2 {\n          display: block;\n          font-size: 1.5em;\n          margin: 20px 0 20px 0;\n          font-weight: bold;\n        }\n\n        vaadin-grid {\n          margin-bottom: 200px;\n        }\n\n        vaadin-grid-tree-toggle { \n          width: 100%;\n          cursor: pointer;\n        }\n\n        .class-wrap {\n          width: 100%;\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          align-items: center;\n          padding-top: 4px;\n          /* padding-top: 34px;\n          padding-bottom: 8px; */\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n          left: -16px;\n          border-bottom: 3px solid var(--_lumo-grid-secondary-border-color);;\n          padding: 24px 16px 8px;\n          position: relative;\n        }\n        .class-wrap h3 {\n          font-size: 22px;\n          font-weight: bold;\n        }\n\n        .spells-prepared-text {\n          margin-right: 6px;\n          margin-left: auto;\n        }\n        .prepared-count {\n          color: var(--mdc-theme-primary);\n          font-weight: bold;\n        }\n        .prepared-count[edit-mode] {\n          color: var(--mdc-theme-secondary);\n        }\n        .cantrips-prepared {\n          margin-right: 0;\n        }\n\n        .level-outer-wrap {\n          border-bottom: 1px solid var(--_lumo-grid-secondary-border-color);\n          padding-bottom: 8px;\n          display: flex;\n          height: 32px;\n        }\n\n        .level-wrap {\n          width: 100%;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .level-wrap .label {\n          padding-left: 6px;\n          font-size: 12px;\n          color: var(--lumo-tint-70pct);\n        }\n\n        .slot-checkboxes {\n          cursor: pointer;\n          display: flex;\n          padding: 4px;\n        }\n\n        .slot-checkboxes span {\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .slot-checkboxes .label {\n          padding-left: 8px;\n        }\n\n        vaadin-checkbox {\n          pointer-events: none;\n        }\n\n        .spell-outer-wrap {\n          display: flex;\n        }\n\n        .spell-wrap {\n          width: 100%;\n          margin-left: 24px;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .spell-inner-wrap {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .spell-level {\n          color: var(--mdc-theme-text-disabled-on-background);\n          margin-left: 8px;\n          margin-right: 4px;\n          font-size: 12px;\n        }\n\n        .ind {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          border-radius: 8px;\n          color: var(--mdc-theme-on-secondary);\n          background-color: var(--mdc-theme-secondary);\n          font-size: 12px;\n          position: relative;\n          bottom: 2px;\n          margin-left: 0;\n          padding: 0px 4px;\n          font-weight: 500;\n        }\n\n        .rit-ind::before {\n          content: 'R';\n        }\n        .conc-ind::before {\n          content: 'C';\n        }\n        .bonus-ind::before {\n          content: 'BA';\n        }\n        .school-ind {\n          font-size: 10px;\n          height: 16px;\n          bottom: 3px;\n        }\n\n        .spell-inner-wrap[not-edit-mode] .ind {\n          background-color: var(--mdc-theme-primary);\n        }\n\n        .spell-def-wrap {\n          font-size: 14px;\n          width: calc(100% - 20px);\n          margin: 0 auto;\n          background: var(--lumo-contrast-10pct);\n          border-radius: 4px;\n          white-space: pre-line;\n        }\n\n        .spell-def-wrap .margin-bottom_med {\n          margin-bottom: 0px !important;\n        }\n\n        .spell-def-wrap .text {\n          margin-top: 16px;\n        }\n\n        .spell-def-wrap p {\n          margin-bottom: 16px;\n        }\n\n        .stats-wrapper {\n          margin: 0 14px;\n        }\n\n        .spell-button {\n          background-color: var(--mdc-theme-text-disabled-on-background);\n          color: var(--mdc-theme-on-secondary);\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 80px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n          margin-left: 8px;\n        }\n        .class-icon {\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 60px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n          width: 20px;\n        }\n        .spell-button.edit-mode {\n          cursor: pointer;\n        }\n        .spell-button.always-prepared {\n          background-color: var(--mdc-theme-secondary-lighter);\n          cursor: not-allowed;\n        }\n        .spell-button.spell-prepared {\n          background-color: var(--mdc-theme-secondary);\n        }\n        .spell-button.flash-error {\n          background-color: var(--mdc-theme-error);\n          transition: background-color 0.2s ease-out;\n        }\n        .spell-button.transition-bg {\n          transition: background-color 0.2s ease-in;\n        }\n\n        .mods {\n          display: flex;\n          flex-wrap: nowrap;\n          justify-content: space-around;\n          margin: 16px 0;\n        }\n        .mod-row {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          font-size: 12px;\n          text-align: center;\n          margin: 0 4px;\n          width: 130px;\n        }\n        .mod-val-wrap {\n          font-size: 16px;\n        }\n        .mod-val:not(:first-child)::before {\n          content: '|';\n          margin-right: 4px;\n          color: var(--lumo-contrast-30pct);\n        }\n        .mod-label {\n          font-weight: bold;\n          color: var(--mdc-theme-primary);\n          font-size: 15px;\n        }\n        .edit-mode .mod-label {\n          font-weight: bold;\n          color: var(--mdc-theme-secondary);\n        }\n        @media(min-width: 420px) {\n          .mods {\n            justify-content: center;\n          }\n          .mod-row {\n            font-size: 14px;\n          }\n          .mod-val-wrap {\n            font-size: 18px;\n          }\n        }\n\n        @media(min-width: 921px) {\n          .mods {\n            justify-content: flex-start;\n          }\n        }\n\n        .filter {\n          margin-left: 16px;\n\n        }\n\n        .tooltip {\n          position: absolute;\n          background: lightgray;\n          color: black;\n          padding: 2px 10px;\n          border-radius: 4px;\n          white-space: nowrap;\n          left: 8px;\n          opacity: 0;\n          transition: opacity 0.3s ease;\n          border-top-left-radius: 0px;\n        }\n        .tooltip--open {\n          opacity: 1;\n        }\n        .tooltip::after {\n          content: '';\n          height: 0;\n          width: 0;\n          position: absolute;\n          border-left: 5px solid transparent;\n          border-right: 5px solid transparent;\n          border-bottom: 5px solid lightgray;\n          top: -5px;\n          left: 0px;\n        }\n        [data-tooltip] {\n          position: relative;\n        }\n\n        .no-content-message {\n          font-size: 14px;\n          padding: 20px;\n          font-style: italic;\n        }\n      </style>\n\n      <div class$=\"[[_wrapClassString(isEditMode)]]\" hidden$=\"[[noContentMessage]]\">\n        <div class=\"heading\">\n          <h2>Spells</h2>\n          <dnd-button class=\"prepare-spells-button link\" hidden$=\"[[_hidePrepareSpellsButton(isEditMode, spellsKnown)]]\" edit-mode$=\"[[isEditMode]]\" not-edit-mode$=\"[[!isEditMode]]\" label=\"Prepare Your Spells!\" icon=\"edit\" on-click=\"_toggleEditMode\"></dnd-button>\n        </div>\n\n        <!-- Spell Mods -->\n        <div class=\"mods\" >\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">[[_abs(item.mod)]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">Modifier</span>\n          </div>\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">+[[item.spellAttackBonus]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">Attack +</span>\n          </div>\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">[[item.dc]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">DC</span>\n          </div>\n        </div>\n\n        <div class=\"filter\">\n          <vaadin-text-field clear-button-visible value=\"{{filterStr}}\" placeholder='Filter'></vaadin-text-field>\n        </div>\n      </div>\n\n      <div class=\"no-content-message\" hidden$=\"[[!noContentMessage]]\">Enter edit mode to add classes and levels.</div>\n\n      <vaadin-grid id=\"grid\" theme=\"no-border no-row-borders\" expanded-items=\"{{expandedItems}}\" height-by-rows hidden$=\"[[noContentMessage]]\">\n        <vaadin-grid-column flex-grow=\"1\">\n          <template>\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'class')]]\">\n                <div class=\"class-wrap\">\n                  <h3>[[item.className]]</h3>\n                  <div class='spells-prepared-text'>\n                    <span>[[_spellsKnownString(item.spellPrepType)]]</span>\n                    <span class='prepared-count' edit-mode$=[[isEditMode]]>[[_currentSpellsKnownCount(item.className, spellsKnown)]] / [[_maxSpellsKnownCount(item.className, spellsKnown)]]</span>\n                  </div>\n                </div>\n              </template>\n  \n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'level')]]\">\n                <div class=\"level-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\" on-click='_recordScrollHeight'>\n                    <h4 class=\"level-wrap\">[[_toLevel(item.level)]]<span hidden$=\"[[_hideSlotsLabel(isEditMode, item.level)]]\" class=\"label\">([[item.spellSlots]] Slots)</span></h4>\n                    <div class=\"cantrips-prepared spells-prepared-text\" hidden$=\"[[!_equal(item.level, 0)]]\">\n                      <span>Cantrips Known:</span>\n                      <span class='prepared-count' edit-mode$=[[isEditMode]]>[[_currentCantripsKnownCount(item.parentClass, spellsKnown)]] / [[_maxCantripsKnownCount(item.parentClass, spellsKnown)]]</span>\n                    </div>\n                  </vaadin-grid-tree-toggle>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.warlockSpellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\" warlock-spell>\n                    <template is='dom-repeat' items='[[_countToArray(item.warlockSpellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentWarlockSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Pact</span>\n                  </div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.spellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\">\n                    <template is='dom-repeat' items='[[_countToArray(item.spellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Slots</span>\n                  </div>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spell')]]\">\n                <div class=\"spell-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\" class=\"spell-wrap\" on-click='_recordScrollHeight'>\n                    <div class=\"spell-inner-wrap\" not-edit-mode$=\"[[!isEditMode]]\">\n                      [[item.name]]\n                      <span class=\"spell-level\" hidden>[[_spellLevel(item)]]</span>\n                      <span class=\"ind rit-ind\" title=\"Ritual\" hidden$=\"[[!_isRitualSpell(item)]]\"></span>\n                      <span class=\"ind conc-ind\" title=\"Concentration\" hidden$=\"[[!_isConcentrationSpell(item)]]\"></span>\n                      <span class=\"ind bonus-ind\" title=\"Bonus Action\" hidden$=\"[[!_isBonusActionSpell(item)]]\"></span>\n                      <span class=\"ind school-ind\" title=\"[[_getSpellSchool(item)]]\">[[_getSpellSchool(item)]]</span>\n                    </div>\n                  </vaadin-grid-tree-toggle>\n                  <button class$=\"[[_isPreparedClass(spellsKnown, item, isEditMode)]]\" hidden$=\"[[!isEditMode]]\" on-click=\"_toggleSpellPrepared\">[[_isPreparedText(spellsKnown, item)]]</button>\n                  <dnd-svg class=\"class-icon\" hidden$=\"[[isEditMode]]\" id='[[_spellClassText(item.parentClass)]]' default-color></dnd-svg>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spelldef')]]\">\n                <div class=\"spell-def-wrap\">\n                  <div class= \"stats-wrapper\" inner-h-t-m-l=\"[[_renderSpell(item)]]\"></div>\n                </div>\n              </template>\n          </template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-spells\",DndCharacterBuilderSpells);\n"],"sourceRoot":""}