{"version":3,"sources":["webpack:///./node_modules/@vaadin/vaadin-checkbox/vaadin-checkbox.js","webpack:///./node_modules/@vaadin/vaadin-text-field/vaadin-text-field.js","webpack:///./node_modules/@vaadin/vaadin-grid/theme/lumo/vaadin-grid-tree-toggle-styles.js","webpack:///./node_modules/@vaadin/vaadin-grid/src/vaadin-grid-tree-toggle.js","webpack:///./components/views/character/dnd-character-builder-spells.js"],"names":["$_documentContainer","document","head","appendChild","content","createElement","innerHTML","level","type","Number","value","observer","leaf","Boolean","reflectToAttribute","expanded","notify","super","ready","this","addEventListener","e","_onClick","preventDefault","toString","style","_debouncerUpdateLevel","debounce","updateStyles","customElements","define","is","DndCharacterBuilderSpells","spellsKnown","Object","preparedSpells","noContentMessage","isEditMode","filterStr","String","expandedItems","Array","window","scrollTo","originalScrollHeight","scrollY","length","oldExpanded","$","grid","expandAll","clearCache","setTimeout","undefined","_filterChange","__filterChangeThrottled","bind","connectedCallback","characterChangeHandler","character","detail","updateFromCharacter","refresh","editModeHandler","disconnectedCallback","removeEventListener","multiclassSlotsDef","fullCasterSlotsDef","halfCasterSlotsDef","thirdCasterSlotsDef","dataProvider","params","callback","startIndex","page","pageSize","children","parentItem","spellDisplay","filter","child","hasDecendentWithFilter","toLowerCase","slice","node","name","indexOf","findExpandables","array","id","push","classRefs","classLevels","newSpellMods","overallLevel","entries","reduce","total","className","profBonus","classRef","casterProgression","alreadyAdded","find","spellMod","spellcastingAbility","classes","attributeModifier","spellAttackBonus","dc","mod","spellMods","spellsKnownObj","updateSpellStats","classLevel","casterSourceRef","isSubclass","tableGroups","classTableGroups","casterName","subclasses","subclassDef","i","shortName","subclassTableGroups","spellsKnownOrPrepared","spellsKnowPreparedType","cantripsKnown","cantripProgression","warlockSpellLevel","warlockSpellSlots","spellsKnownProgression","levelMultiplier","Math","floor","console","error","subclassName","classSpellList","searchSource","source","searchName","replaceAll","trim","key","divineSoulSpellList","Set","concat","spellTable","tableGroup","title","spellSlotEntries","rowsSpellProgression","spellSlots","hasCantrips","oldSpellsPrepared","oldCantripsPrepared","preparedCantrips","map","index","spellList","spell","sort","a","b","isCantrip","isPrepared","isAlwaysPrepared","hasChildren","parentClass","parentLevel","isWarlock","levelObj","currentSlots","some","item","slots","current","keys","max","maxCantrips","currentCantrips","classObj","spellPrepType","multiclassingLevels","additionalSpellChoices","values","choices","c","additionalSpells","spellsModel","addtlSpellsObj","forEach","spellChoice","defaultSpells","selectedSpells","spellChoiceEntry","spells","addtlSpell","spellDef","s","spellLevel","spellClass","label","addtlSpellsClass","addtlSpellsClassVal","spellDisplayForClass","sdClass","addtlSpellsClassLevel","addtlSpellsClassLevelVal","spellDisplayForClassLevel","spellAlreadyAdded","uses","spellUseType","otherSpells","Other","otherSpellLevel","otherSpellList","otherSpell","otherSpellsObj","newSpellDisplay","otherClass","multiclassLevel","isMulticlass","adjIndex","multiclassSlotsArray","currentWarlockSlots","dispatchEvent","CustomEvent","bubbles","composed","stopPropagation","model","_toggleCantripPrepared","_isPreparedSpell","currentPreparedCount","_currentSpellsKnownCount","maxPreparedCount","_maxSpellsKnownCount","spellsKnownCopy","JSON","parse","stringify","splice","_flashPreparedButton","_isPreparedCantrip","_currentCantripsKnownCount","_maxCantripsKnownCount","buttonEl","classList","add","remove","isInput","maxSlots","checked","_setSpellSlotsChecked","count","el","checkboxes","querySelectorAll","spellName","prepareType","data","spLevelToFull","tooltipStr","target","dataset","tooltip","hasTooltip","from","childEl","matches","tooltipCloseListener","tooltips","tooltipEl","spellParent","meta","ritual","duration","d","concentration","time","t","unit","SP_SCHOOL_ABV_TO_FULL","school","clas","join","num"],"mappings":"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","file":"3.bundle.js","sourcesContent":["import './theme/lumo/vaadin-checkbox.js';\nexport * from './src/vaadin-checkbox.js';\n","import './theme/lumo/vaadin-text-field.js';\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\nconst $_documentContainer = html`<dom-module id=\"lumo-grid-tree-toggle\" theme-for=\"vaadin-grid-tree-toggle\">\n  <template>\n    <style>\n      :host {\n        --vaadin-grid-tree-toggle-level-offset: 2em;\n        align-items: center;\n        vertical-align: middle;\n        margin-left: calc(var(--lumo-space-s) * -1);\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      :host(:not([leaf])) {\n        cursor: default;\n      }\n\n      [part=\"toggle\"] {\n        display: inline-block;\n        font-size: 1.5em;\n        line-height: 1;\n        width: 1em;\n        height: 1em;\n        text-align: center;\n        color: var(--lumo-contrast-50pct);\n        /* Increase touch target area */\n        padding: calc(1em / 3);\n        margin: calc(1em / -3);\n      }\n\n      :host(:not([dir=\"rtl\"])) [part=\"toggle\"] {\n        margin-right: 0;\n      }\n\n      @media (hover: hover) {\n        :host(:hover) [part=\"toggle\"] {\n          color: var(--lumo-contrast-80pct);\n        }\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"lumo-icons\";\n        display: inline-block;\n        height: 100%;\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-right);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-right);\n        transform: rotate(90deg);\n      }\n\n      /* Experimental support for hierarchy connectors, using an unsupported selector */\n      :host([theme~=\"connectors\"]) #level-spacer {\n        position: relative;\n        z-index: -1;\n        font-size: 1em;\n        height: 1.5em;\n      }\n\n      :host([theme~=\"connectors\"]) #level-spacer::before {\n        display: block;\n        content: \"\";\n        margin-top: calc(var(--lumo-space-m) * -1);\n        height: calc(var(--lumo-space-m) + 3em);\n        background-image: linear-gradient(to right, transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px), var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px));\n        background-size: var(--vaadin-grid-tree-toggle-level-offset) var(--vaadin-grid-tree-toggle-level-offset);\n        background-position: calc(var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px) 0;\n      }\n\n      /* RTL specific styles */\n\n      :host([dir=\"rtl\"]) {\n        margin-left: 0;\n        margin-right: calc(var(--lumo-space-s) * -1);\n      }\n\n      :host([dir=\"rtl\"]) [part=\"toggle\"] {\n        margin-left: 0;\n      }\n\n      :host([dir=\"rtl\"][expanded]) [part=\"toggle\"]::before {\n        transform: rotate(-90deg);\n      }\n\n      :host([dir=\"rtl\"][theme~=\"connectors\"]) #level-spacer::before {\n        background-image: linear-gradient(to left, transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px), var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px));\n        background-position: calc(100% - (var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px)) 0;\n      }\n\n      :host([dir=\"rtl\"]:not([expanded])) [part=\"toggle\"]::before,\n      :host([dir=\"rtl\"][expanded]) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-left);\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '@polymer/polymer/lib/elements/custom-style.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { DirMixin } from '@vaadin/vaadin-element-mixin/vaadin-dir-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { microTask } from '@polymer/polymer/lib/utils/async.js';\nconst $_documentContainer = document.createElement('template');\n\n$_documentContainer.innerHTML = `<custom-style>\n  <style>\n    @font-face {\n      font-family: \"vaadin-grid-tree-icons\";\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAQkAA0AAAAABrwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAECAAAABoAAAAcgHwa6EdERUYAAAPsAAAAHAAAAB4AJwAOT1MvMgAAAZQAAAA/AAAAYA8TBIJjbWFwAAAB8AAAAFUAAAFeGJvXWmdhc3AAAAPkAAAACAAAAAgAAAAQZ2x5ZgAAAlwAAABLAAAAhIrPOhFoZWFkAAABMAAAACsAAAA2DsJI02hoZWEAAAFcAAAAHQAAACQHAgPHaG10eAAAAdQAAAAZAAAAHAxVAgBsb2NhAAACSAAAABIAAAASAIAAVG1heHAAAAF8AAAAGAAAACAACgAFbmFtZQAAAqgAAAECAAACTwflzbdwb3N0AAADrAAAADYAAABZQ7Ajh3icY2BkYGAA4twv3Vfi+W2+MnCzMIDANSOmbGSa2YEZRHEwMIEoAAoiB6sAeJxjYGRgYD7w/wADAwsDCDA7MDAyoAI2AFEEAtIAAAB4nGNgZGBg4GBgZgDRDAxMDGgAAAGbABB4nGNgZp7JOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDA+38d84P8BBgdmIAapQZJVYGAEAGc/C54AeJxjYYAAxlAIzQTELAwMBxgZGB0ACy0BYwAAAHicY2BgYGaAYBkGRgYQiADyGMF8FgYbIM3FwMHABISMDArP9/3/+/8/WJXC8z0Q9v8nEp5gHVwMMMAIMo+RDYiZoQJMQIKJARUA7WBhGN4AACFKDtoAAAAAAAAAAAgACAAQABgAJgA0AEIAAHichYvBEYBADAKBVHBjBT4swl9KS2k05o0XHd/yW1hAfBFwCv9sIlJu3nZaNS3PXAaXXHI8Lge7DlzF7C1RgXc7xkK6+gvcD2URmQB4nK2RQWoCMRiFX3RUqtCli65yADModOMBLLgQSqHddRFnQghIAnEUvEA3vUUP0LP0Fj1G+yb8R5iEhO9/ef/7FwFwj28o9EthiVp4hBlehcfUP4Ur8o/wBAv8CU+xVFvhOR7UB7tUdUdlVRJ6HnHWTnhM/V24In8JT5j/KzzFSi2E53hUz7jCcrcIiDDwyKSW1JEct2HdIPH1DFytbUM0PofWdNk5E5oUqb/Q6HHBiVGZpfOXkyUMEj5IyBuNmYZQjBobfsuassvnkKLe1OuBBj0VQ8cRni2xjLWsHaM0jrjx3peYA0/vrdmUYqe9iy7bzrX6eNP7Jh1SijX+AaUVbB8AAHicY2BiwA84GBgYmRiYGJkZmBlZGFkZ2djScyoLMgzZS/MyDQwMwLSruZMzlHaB0q4A76kLlwAAAAEAAf//AA94nGNgZGBg4AFiMSBmYmAEQnYgZgHzGAAD6wA2eJxjYGBgZACCKxJigiD6mhFTNowGACmcA/8AAA==) format('woff');\n      font-weight: normal;\n      font-style: normal;\n    }\n  </style>\n</custom-style>`;\n\ndocument.head.appendChild($_documentContainer.content);\n/**\n * `<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\n * that provides toggle and level display functionality for the item tree.\n *\n * #### Example:\n * ```html\n * <vaadin-grid-column>\n *   <template class=\"header\">Package name</template>\n *   <template>\n *     <vaadin-grid-tree-toggle\n *         leaf=\"[[!item.hasChildren]]\"\n *         expanded=\"{{expanded}}\"\n *         level=\"[[level]]\">\n *       [[item.name]]\n *     </vaadin-grid-tree-toggle>\n *   </template>\n * </vaadin-grid-column>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ---|---\n * `toggle` | The tree toggle icon\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * ---|---|---\n * `expanded` | When present, the toggle is expanded | :host\n * `leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n *\n * The following custom CSS properties are available on\n * the `<vaadin-grid-tree-toggle>` element:\n *\n * Custom CSS property | Description | Default\n * ---|---|---\n * `--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`\n *\n * @extends PolymerElement\n * @mixes ThemableMixin\n */\nclass GridTreeToggleElement extends ThemableMixin(DirMixin(PolymerElement)) {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: inline-flex;\n        align-items: baseline;\n\n        /* CSS API for :host */\n        --vaadin-grid-tree-toggle-level-offset: 1em;\n\n        /*\n          ShadyCSS seems to polyfill :dir(rtl) only for :host, thus using\n          a host custom CSS property for ltr/rtl toggle icon choice.\n         */\n        ---collapsed-icon: \"\\\\e7be\\\\00a0\";\n      }\n\n      :host(:dir(rtl)) {\n        ---collapsed-icon: \"\\\\e7bd\\\\00a0\";\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:not([leaf])) {\n        cursor: pointer;\n      }\n\n      #level-spacer,\n      [part=\"toggle\"] {\n        flex: none;\n      }\n\n      #level-spacer {\n        display: inline-block;\n        width: calc(var(---level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"vaadin-grid-tree-icons\";\n        line-height: 1em; /* make icon font metrics not affect baseline */\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(---collapsed-icon);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: \"\\\\e7bc\\\\00a0\"; /* icon glyph + single non-breaking space */\n      }\n\n      :host([leaf]) [part=\"toggle\"] {\n        visibility: hidden;\n      }\n    </style>\n\n    <span id=\"level-spacer\"></span>\n    <span part=\"toggle\"></span>\n    <slot></slot>\n`;\n  }\n\n  static get is() {\n    return 'vaadin-grid-tree-toggle';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Current level of the tree represented with a horizontal offset\n       * of the toggle button.\n       */\n      level: {\n        type: Number,\n        value: 0,\n        observer: '_levelChanged'\n      },\n\n      /**\n       * Hides the toggle icon and disables toggling a tree sublevel.\n       */\n      leaf: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * Sublevel toggle state.\n       */\n      expanded: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n\n    this.addEventListener('click', e => this._onClick(e));\n  }\n\n  _onClick(e) {\n    if (this.leaf) {\n      return;\n    }\n\n    e.preventDefault();\n    this.expanded = !this.expanded;\n  }\n\n  _levelChanged(level) {\n    const value = Number(level).toString();\n    this.style['---level'] = value;\n    // Async is to make DOM updates applied before evaluating the style\n    // update, required for polyfilled RTL support in MSIE and Edge.\n    this._debouncerUpdateLevel = Debouncer.debounce(\n      this._debouncerUpdateLevel,\n      microTask,\n      () => this.updateStyles({'---level': value})\n    );\n  }\n}\n\ncustomElements.define(GridTreeToggleElement.is, GridTreeToggleElement);\n\nexport { GridTreeToggleElement };\n","import { PolymerElement,html } from \"@polymer/polymer\";\nimport \"@vaadin/vaadin-grid\";\nimport \"@vaadin/vaadin-grid/vaadin-grid-tree-toggle\";\nimport { getCharacterChannel, getSelectedCharacter, getClassReferences, getClassLevelGroups, toggleSpellPrepared, saveCharacter, getAttributeModifier, isSpellPreparedFromObj, setSpellSlots, getSpellSlots, toggleCantripPrepared, getSubclassChoiceLevel, getSubclassChoice } from \"../../../util/charBuilder\";\nimport { filterModel, loadModel } from \"../../../util/data\";\nimport { dispatchEditModeChange, getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { spellHtml } from \"../../../js/spells\";\nimport { findInPath, util_capitalize, util_capitalizeAll, getProfBonus, throttle, debounce, cloneDeep } from \"../../../js/utils\";\nimport Parser from \"../../../util/Parser\";\nimport \"@vaadin/vaadin-checkbox\";\nimport \"@vaadin/vaadin-text-field\";\nimport \"../../dnd-button\";\n\nclass DndCharacterBuilderSpells extends PolymerElement {\n  \n  static get properties() {\n    return {\n      spellsKnown: {\n        type: Object,\n        value: {}\n      },\n      preparedSpells: {\n        type: Object,\n        value: {}\n      },\n      noContentMessage: {\n        type: Boolean,\n        value: false\n      },\n      isEditMode: {\n        type: Boolean,\n        value: false\n      },\n      filterStr: {\n        type: String,\n        value: '',\n        observer: '_filterChange'\n      },\n      expandedItems: {\n        type: Array\n      },\n    };\n  }\n\n  static get observers() {\n    return [\n      '_expandedItemsChange(expandedItems.*)'\n    ]\n  }\n\n  _expandedItemsChange() {\n    window.scrollTo(0, this.originalScrollHeight);\n  }\n\n  _recordScrollHeight() {\n    // Fix reposition issue after tree expand/collapse toggle\n    this.originalScrollHeight = window.scrollY;\n  }\n\n  __filterChangeThrottled() {\n    if (this.filterStr.length) {\n      if (!this.oldExpanded) {\n        this.oldExpanded = this.$.grid.expandedItems;\n      }\n      this.expandAll();\n      this.$.grid.clearCache();\n      setTimeout(() => {\n        this.expandAll();\n      }, 10);\n    } else {\n      if (this.oldExpanded) {\n        this.$.grid.expandedItems = this.oldExpanded;\n        this.oldExpanded = undefined;\n      }\n      this.$.grid.clearCache();\n    }\n  }\n\n  constructor() {\n    super();\n\n    this._filterChange = debounce(this.__filterChangeThrottled.bind(this), 250);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    this.refresh = true;\n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\",this.characterChangeHandler);\n\n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n      this.refresh = true;\n      this.updateFromCharacter(getSelectedCharacter());\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    getCharacterChannel().removeEventListener(\"character-selected\",this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  ready() {\n    super.ready();\n\n    this.multiclassSlotsDef = [\n      [2],\n      [3],\n      [4,2],\n      [4,3],\n      [4,3,2],\n      [4,3,3],\n      [4,3,3,1],\n      [4,3,3,2],\n      [4,3,3,3,1],\n      [4,3,3,3,2],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1,1],\n      [4,3,3,3,3,1,1,1,1],\n      [4,3,3,3,3,2,1,1,1],\n      [4,3,3,3,3,2,2,1,1]\n    ];\n\n    this.fullCasterSlotsDef = [];\n\n    this.halfCasterSlotsDef = [];\n    \n    this.thirdCasterSlotsDef = [];\n\n    setTimeout(() => {\n      const grid = this.$.grid;\n\n      grid.dataProvider = ((params, callback) => {\n        const startIndex = params.page * params.pageSize;\n        let children = params.parentItem ? params.parentItem.children : this.spellDisplay;\n        if (this.filterStr.length) {\n          children = children.filter((child) => {\n            return this.hasDecendentWithFilter(child, this.filterStr.toLowerCase()) \n          });\n        }\n        if (children && children.length) {\n          const page = children.slice(startIndex, startIndex + params.pageSize);\n          callback(page, children.length);\n        }\n      }).bind(this);\n    }, 0);\n  }\n\n  hasDecendentWithFilter(node, filterStr) {\n    if (!node.name || node.name.toLowerCase().indexOf(filterStr) > -1) {\n      return true;\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        return this.hasDecendentWithFilter(child, filterStr);\n      }\n    }\n    return false;\n  }\n\n  clearFilterStr() {\n    this.filterStr = '';\n  }\n\n  expandAll() {\n    this.$.grid.expandedItems = this.findExpandables(this.spellDisplay);\n  }\n\n  findExpandables(node, array = []) {\n    if (node.id === 'level' || node.id === 'class') {\n      array.push(node);\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        this.findExpandables(child, array);\n      }\n    }\n    return array;\n  }\n\n  async updateSpellStats(classRefs, classLevels) {\n    if (classLevels && classRefs) {\n      // DCs and Spell Modifier\n      const newSpellMods = [];\n      const overallLevel = Object.entries(classLevels).reduce((total, [className, level]) => total + level, 0);\n      const profBonus = getProfBonus(overallLevel);\n\n      for (const [className, level] of Object.entries(classLevels)) {\n        const classRef = classRefs[className];\n        if (classRef.casterProgression) {\n          const alreadyAdded = newSpellMods.find(spellMod => classRef.spellcastingAbility === spellMod.spellcastingAbility);\n          if (alreadyAdded) {\n            alreadyAdded.classes.push(className);\n          } else {\n            const attributeModifier = await getAttributeModifier(classRef.spellcastingAbility);\n            const spellAttackBonus = attributeModifier + profBonus\n            const dc = 8 + spellAttackBonus;\n            newSpellMods.push({ classes: [className], mod: attributeModifier, spellAttackBonus, dc, spellcastingAbility: classRef.spellcastingAbility});\n          }\n        }\n      }\n\n      this.spellMods = newSpellMods;\n    } else {\n      this.spellMods = [];\n    }\n  }\n\n  async updateFromCharacter(character) {\n    if (character && this.refresh) {\n      this.noContentMessage = true;\n      const classRefs = await getClassReferences(character),\n        classLevels = getClassLevelGroups(character),\n        expandedItems = [],\n        spellsKnownObj = {};\n      let spellDisplay = [];\n\n      this.updateSpellStats(classRefs, classLevels);\n\n      for (const [ className, classLevel ] of Object.entries(classLevels)) {\n        const classRef = classRefs[className];\n        let casterSourceRef = classRef;\n        let isSubclass = false;\n        let tableGroups = classRef.classTableGroups;\n        let casterName = className;\n\n        // Checking the class first for a caster progression, then checking subclass\n        if (!casterSourceRef.casterProgression) {\n          const subclassLevel = getSubclassChoiceLevel(classRef);\n          if (classLevel >= subclassLevel && character.subclasses && character.subclasses[className] && classRef.subclasses && classRef.subclasses.length) {\n            const subclassDef = classRef.subclasses.find(i => character.subclasses[className].name === i.name);\n            if (subclassDef && subclassDef.casterProgression) {\n              // replacing caster parsing references with that from subclass \n              casterSourceRef = subclassDef;\n              casterName = subclassDef.shortName;\n              tableGroups = subclassDef.subclassTableGroups;\n              isSubclass = true;\n            }\n          }\n        }\n\n        if (casterSourceRef.casterProgression) {\n          this.noContentMessage = false;\n          let spellsKnownOrPrepared;\n          let spellsKnowPreparedType;\n          const cantripsKnown = casterSourceRef.cantripProgression ? casterSourceRef.cantripProgression[classLevel - 1] : 0;\n          let warlockSpellLevel;\n          let warlockSpellSlots;\n\n          // Use spell known progression\n          if (casterSourceRef.spellsKnownProgression) {\n            spellsKnowPreparedType = 'known';\n            spellsKnownOrPrepared = casterSourceRef.spellsKnownProgression[classLevel - 1];\n            if (casterSourceRef.casterProgression === 'pact') {\n              warlockSpellLevel = [1,1,2,2,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,5][classLevel - 1];\n              warlockSpellSlots = [1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4][classLevel - 1];\n            }\n\n          // otherwise compute spells prepared\n          } else if (casterSourceRef.preparedSpells) {\n            spellsKnowPreparedType = 'prepared';\n            // todo, check 1/3 caster progression\n            const levelMultiplier = casterSourceRef.casterProgression === 'full' ? 1 : 0.51;\n            const attributeModifier = await getAttributeModifier(casterSourceRef.spellcastingAbility);\n            spellsKnownOrPrepared = Math.floor(classLevel * levelMultiplier) + attributeModifier;\n            spellsKnownOrPrepared = spellsKnownOrPrepared < 1 ? 1 : spellsKnownOrPrepared;\n\n          } else {\n            console.error('!!! neither prepared or known spells', casterSourceRef);\n          }\n\n          /* SPELL LISTS */\n          // Getting class spell list\n          let classSpellList = [];\n          let subclassName;\n          \n          if (isSubclass) {\n            subclassName = casterSourceRef.shortName;\n          } else {\n            // Revised Ranger fix\n            let searchSource = casterSourceRef.name.indexOf('(Revised)') > -1 ? 'PHB' : casterSourceRef.source;\n            let searchName = casterSourceRef.name.indexOf('(Revised)') > -1 ? casterSourceRef.name.replaceAll('(Revised)', '').trim() : casterSourceRef.name;\n            classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: searchName, source: searchSource } } );\n\n            const subclassLevel = getSubclassChoiceLevel(classRef);\n            if (classLevel >= subclassLevel) {\n              subclassName = character.subclasses && character.subclasses[className] ? character.subclasses[className].shortName : '';\n            }\n          }\n\n          // Getting subclass spell list (always prepared)\n          if (subclassName) {\n            if (subclassName === 'Eldritch Knight') {\n              classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'wizard', source: 'phb' } } );\n            }\n            if (subclassName === 'Divine Soul') {\n              let divineSoulSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'cleric', source: 'phb' } } );\n              classSpellList = [...new Set(classSpellList.concat(divineSoulSpellList))];\n            }\n          }\n\n          // Getting spell slots per level array\n          const spellTable = tableGroups.find((tableGroup) => tableGroup.title === \"Spell Slots\");\n          let spellSlotEntries;\n          if (spellTable) {\n            spellSlotEntries = spellTable.rowsSpellProgression[classLevel - 1].filter((spellSlots) => spellSlots !== 0);\n          } else {\n            // If no spell slots per level, then we're a warlock, get spell entries for\n            // warlocks with zero spell slots at each level (pact slots will be added later)\n            spellSlotEntries = [];\n            for (let i = 0; i < warlockSpellLevel; i++) {\n              spellSlotEntries.push(0);\n            }\n          }\n\n          // Adding cantrips entry\n          const hasCantrips = cantripsKnown ? 0 : 1;\n          if (cantripsKnown) {\n            spellSlotEntries = [0].concat(spellSlotEntries);\n          }\n\n          // Clearing prepared spells to filter out those that can no longer be prepared\n          let oldSpellsPrepared = cloneDeep(character.preparedSpells);\n          let oldCantripsPrepared = cloneDeep(character.preparedCantrips);\n          character.preparedSpells[casterName] = {};\n          character.preparedCantrips[casterName] = {};\n          \n\n          // Generating hierarchical structure of classes > levels > spells > spellDef\n          const spellSlots = spellSlotEntries.map((spellSlots, index) => {\n            if (spellSlots !== -1) {\n              let spellList = classSpellList\n                .filter((spell) => {\n                  return spell.level === index + hasCantrips;\n                })\n                .sort((a, b) => {\n                  if (a.name < b.name) { return -1; }\n                  if (a.name > b.name) { return 1; }\n                  return 0;\n                })\n                .map(spell => {\n                  const isCantrip = index + hasCantrips === 0;\n                  const isPrepared = isCantrip ? isSpellPreparedFromObj(casterName, spell, oldCantripsPrepared) : isSpellPreparedFromObj(casterName, spell, oldSpellsPrepared);\n                  if (isPrepared) {\n                    if (isCantrip) {\n                      character.preparedCantrips[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    } else {\n                      character.preparedSpells[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    }\n                  }\n                  if (this.isEditMode || isPrepared || spell.isAlwaysPrepared) {\n                    return {\n                      id: 'spell',\n                      name: spell.name, \n                      children: [{...spell, hasChildren: false, id: 'spelldef', parentClass: casterName, parentLevel: index + hasCantrips} ],\n                      hasChildren: true,\n                      parentClass: casterName,\n                      parentLevel: index + hasCantrips,\n                      isCantrip,\n                      isAlwaysPrepared: spell.isAlwaysPrepared,\n                      isWarlock: !!warlockSpellLevel\n                    };\n                  } else {\n                    return undefined;\n                  }\n                })\n                .filter((spell) => spell !== undefined);\n\n              const levelObj = {\n                id: 'level',\n                level: index + hasCantrips,\n                spellSlots,\n                currentSlots: getSpellSlots(index + hasCantrips),\n                children: spellList,\n                hasChildren: spellList.length > 0,\n                parentClass: casterName,\n                isWarlock: !!warlockSpellLevel\n              };\n              const isExpanded = this.$.grid.expandedItems.some(item => item.id === 'level' && item.level === levelObj.level && item.parentClass === levelObj.parentClass);\n              if (isExpanded) {\n                expandedItems.push(levelObj);\n              }\n              return levelObj;\n            } else {\n              return null\n            }\n          }).filter(slots => slots !== null);\n\n          spellsKnownObj[casterName] = {\n            current: character.preparedSpells && character.preparedSpells[casterName] ? Object.keys(character.preparedSpells[casterName]) : [],\n            max: spellsKnownOrPrepared,\n            type: spellsKnowPreparedType,\n            maxCantrips: cantripsKnown,\n            currentCantrips: character.preparedCantrips && character.preparedCantrips[casterName] ? Object.keys(character.preparedCantrips[casterName]) : []\n          };\n\n          if (spellSlots.length) {\n            const classObj = {\n              id: 'class',\n              className: casterName,\n              level: classLevel,\n              hasCantrips,\n              children: spellSlots,\n              spellsKnown: spellsKnownOrPrepared,\n              hasChildren: spellSlots.length > 0,\n              spellPrepType: spellsKnowPreparedType,\n              multiclassingLevels: isSubclass ? 0 : Math.floor((classRef.casterProgression === 'full' ? 1 : 0.5) * classLevel),\n              isWarlock: !!warlockSpellLevel,\n              warlockSpellLevel,\n              warlockSpellSlots\n            };\n            expandedItems.push(classObj);\n            spellDisplay.push(classObj);\n          }\n        }\n      } // end level loop\n\n      // Parsing additionalSpells\n      const additionalSpellChoices = Object.values(character.choices).filter((c) => !!c.additionalSpells);\n      const spellsModel = await loadModel('spells');\n      const addtlSpellsObj = {};\n      additionalSpellChoices.forEach(spellChoice => {\n        const allAddtlSpells = spellChoice.additionalSpells.defaultSpells.concat(spellChoice.additionalSpells.selectedSpells);\n\n        allAddtlSpells.forEach((spellChoiceEntry) => {\n          const spellsForThisEntry = spellChoiceEntry.spells ? spellChoiceEntry.spells : [spellChoiceEntry];\n\n          spellsForThisEntry.forEach((addtlSpell) => {\n            const spellDef = spellsModel.find(s => s.name.toLowerCase() === addtlSpell.name.toLowerCase() && s.source.toLowerCase() === addtlSpell.source.toLowerCase());\n            \n            if (spellDef) {\n              const spellLevel = spellDef.level;\n              const spellClass = spellChoice.label && (addtlSpell.type === 'expanded' || addtlSpell.type === 'prepared') && Object.keys(classLevels).find((c) => c.toLowerCase() === spellChoice.label.toLowerCase()) ? spellChoice.label : 'Other';\n\n              if (!addtlSpellsObj[spellClass]) {\n                addtlSpellsObj[spellClass] = {};\n              }\n              if (!addtlSpellsObj[spellClass][spellLevel]) {\n                addtlSpellsObj[spellClass][spellLevel] = [];\n              }\n  \n              addtlSpellsObj[spellClass][spellLevel].push({...addtlSpell, ...spellChoiceEntry, label: spellChoice.label, spellDef});\n            }\n          })\n        });\n      });\n      console.error('addtlSpellsObj', addtlSpellsObj);\n\n      // Adding additional spells\n      Object.entries(addtlSpellsObj).forEach(([addtlSpellsClass, addtlSpellsClassVal]) => {\n\n        if (addtlSpellsClass !== 'Other') {\n          const spellDisplayForClass = spellDisplay.find((sdClass) => sdClass.className.toLowerCase() === addtlSpellsClass);\n\n          if (spellDisplayForClass) {\n            Object.entries(addtlSpellsClassVal).forEach(([addtlSpellsClassLevel, addtlSpellsClassLevelVal]) => {\n              let spellDisplayForClassLevel = spellDisplayForClass.children[addtlSpellsClassLevel] ? spellDisplayForClass.children[addtlSpellsClassLevel] : null;\n              // while (!spellDisplayForClassLevel) {\n              //   spellDisplayForClass.children.push({\n              //     id: 'level',\n              //     level: spellDisplayForClass.children.length,\n              //     hasChildren: false,\n              //     spellSlots: 0,\n              //     currentSlots: 0,\n              //     children: [],\n              //     parentClass: addtlSpellsClass\n              //   });\n              //   spellDisplayForClassLevel = spellDisplayForClass.children[addtlSpellsClassLevel] ? spellDisplayForClass.children[addtlSpellsClassLevel] : null;\n              // }\n\n              if (spellDisplayForClassLevel) {\n                addtlSpellsClassLevelVal.forEach(addtlSpell => {\n                  const spellAlreadyAdded = spellDisplayForClassLevel.children.find((s) => s.children[0].name === addtlSpell.spellDef.name && s.children[0].source === addtlSpell.spellDef.source);\n\n                  if (spellAlreadyAdded) {\n                    spellAlreadyAdded.isAlwaysPrepared = true;\n                    spellAlreadyAdded.spellSlots = addtlSpell.uses;\n                    spellAlreadyAdded.spellUseType = addtlSpell.type;\n                    spellAlreadyAdded.currentSlots = character.spellSlots && character.spellSlots[addtlSpell.spellDef.name] ? character.spellSlots[addtlSpell.spellDef.name] : 0\n\n                  } else {\n                    spellDisplayForClassLevel.children.push({\n                      id: 'spell',\n                      name: addtlSpell.spellDef.name,\n                      children: [{...addtlSpell.spellDef, hasChildren: false, id: 'spelldef', parentClass: addtlSpellsClass, parentLevel: addtlSpellsClassLevel, uses: addtlSpell.uses} ],\n                      hasChildren: true,\n                      parentClass: addtlSpellsClass,\n                      parentLevel: addtlSpellsClassLevel,\n                      isCantrip: addtlSpellsClassLevel === 0,\n                      isAlwaysPrepared: true,\n                      isWarlock: addtlSpellsClass === 'warlock',\n                      spellUseType: addtlSpell.type,\n                      spellSlots: addtlSpell.uses,\n                      currentSlots: character.spellSlots && character.spellSlots[addtlSpell.spellDef.name] ? character.spellSlots[addtlSpell.spellDef.name] : 0\n                    })\n                    spellDisplayForClassLevel.hasChildren = true;\n                  }\n                })\n              }\n            });\n          } else {\n            console.error('Additional spell for class that doesnt have regular spells');\n          }\n\n        // Other additional Spells\n        } else {\n          const otherSpells = [{\n            id: 'level',\n            level: 'At Will',\n            spellSlots: 0,\n            currentSlots: 0,\n            children: [],\n            hasChildren: true,\n            parentClass: 'Other'\n          }, {\n            id: 'level',\n            level: 'Innate',\n            spellSlots: 0,\n            currentSlots: 0,\n            children: [],\n            hasChildren: true,\n            parentClass: 'Other'\n          }] \n          Object.entries(addtlSpellsObj.Other).forEach(([otherSpellLevel, otherSpellList]) => {\n            otherSpellList.forEach((otherSpell) => {\n              const destList = otherSpell.type === 'will' || otherSpell.spellDef.level === 0 ? otherSpells[0].children : otherSpells[1].children;\n              destList.push({\n                id: 'spell',\n                name: otherSpell.spellDef.name,\n                children: [{...otherSpell.spellDef, hasChildren: false, id: 'spelldef', parentClass: \"Other\", parentLevel: \"Other\"} ],\n                hasChildren: true,\n                parentClass: \"Other\",\n                parentLevel: \"Other\",\n                isCantrip: false,\n                isAlwaysPrepared: true,\n                isWarlock: false,\n                spellUseType: otherSpell.type,\n                spellSlots: otherSpell.uses,\n                currentSlots: character.spellSlots && character.spellSlots[otherSpell.spellDef.name] ? character.spellSlots[otherSpell.spellDef.name] : 0\n              })\n            });\n          });\n  \n          const otherSpellsObj = {\n            id: 'class',\n            className: 'Other',\n            level: 0,\n            hasCantrips: false,\n            children: otherSpells,\n            spellsKnown: 0,\n            hasChildren: otherSpells > 0,\n            spellPrepType: 'always',\n            multiclassingLevels: 0,\n            isWarlock: false,\n            warlockSpellLevel: 0,\n            warlockSpellSlots: 0\n          };\n          spellDisplay.push(otherSpellsObj);\n          expandedItems.push(otherSpellsObj);\n        }\n      });\n\n      // sorting most levels first\n      spellDisplay.sort((a, b) => {\n        if (a.className === 'Other') {\n          return -1\n        }\n        return b.children.length - a.children.length\n      });\n\n      // Changing structure for non-edit mode & multiclassing\n      if (!this.isEditMode) {\n        let newSpellDisplay = [];\n        if (spellDisplay.length) {\n          let multiclassLevel = 0,\n            isMulticlass = -1,\n            warlockSpellLevel,\n            warlockSpellSlots,\n            otherClass;\n\n          // Combine all class spell levels into single references\n          for (let spellClass of spellDisplay) {\n            if (!spellClass.isWarlock) {\n              multiclassLevel += spellClass.multiclassingLevels;\n              isMulticlass ++;\n            } else {\n              warlockSpellLevel = spellClass.warlockSpellLevel;\n              warlockSpellSlots = spellClass.warlockSpellSlots;\n              isMulticlass ++;\n            }\n\n            if (spellClass.className !== 'Other') {\n              spellClass.children.forEach((spellLevel, index) => {\n                const adjIndex = index + spellClass.hasCantrips;\n                if (!newSpellDisplay[adjIndex]) {\n                  newSpellDisplay[adjIndex] = spellLevel;\n                } else {\n                  newSpellDisplay[adjIndex].children = newSpellDisplay[adjIndex].children.concat(spellLevel.children);\n                  newSpellDisplay[adjIndex].hasChildren = !!newSpellDisplay[adjIndex].children.length;\n                }\n              });\n            } else {\n              otherClass = spellClass;\n            }\n          }\n\n          // remove index 0 if no cantrips\n          newSpellDisplay = newSpellDisplay.filter(i => i !== undefined);\n\n          // Changing spell slots for multiclass rules\n          const hasCantrips = newSpellDisplay[0].level === 0;\n          if (isMulticlass > 0) {\n            const multiclassSlotsArray = this.multiclassSlotsDef[multiclassLevel + 1];\n\n            for (let i = (hasCantrips ? 1 : 0); i < multiclassSlotsArray.length; i++) {\n              const spellSlots =  multiclassSlotsArray[i - (hasCantrips ? 1 : 0)];\n              if (newSpellDisplay[i]) {\n                newSpellDisplay[i].spellSlots = spellSlots;\n              } else {\n                newSpellDisplay.push({\n                  children: [],\n                  currentSlots: getSpellSlots(i + 1 - (hasCantrips ? 1 : 0)),\n                  hasChildren: false,\n                  id: \"level\",\n                  isWarlock: false,\n                  level: i,\n                  spellSlots\n                });\n              }\n            }\n          }\n\n          // Adding warlock slots\n          if (warlockSpellLevel) {\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].warlockSpellSlots = warlockSpellSlots;\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].currentWarlockSlots = character.warlockSpellSlots || 0;\n\n          }\n\n          if (otherClass) {\n            newSpellDisplay = otherClass.children.concat(newSpellDisplay);\n          }\n        }\n        spellDisplay = newSpellDisplay;\n      }\n\n      this.refresh = false;\n      saveCharacter(character);\n      this.spellsKnown = spellsKnownObj;\n      this.spellDisplay = spellDisplay;\n      this.expandedItems = expandedItems;\n      this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n      this.$.grid.clearCache();\n    }\n  }\n\n  _renderSpell(spell) {\n    return spellHtml(spell);\n  }\n\n  _toggleSpellPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isAlwaysPrepared = e.model.item.isAlwaysPrepared;\n    if (!isAlwaysPrepared && this.isEditMode) {\n      const isCantrip = e.model.item.isCantrip;\n      if (isCantrip) {\n        this._toggleCantripPrepared(e);\n      } else {\n        const className = e.model.item.parentClass;\n        const spell = e.model.item.children[0];\n        const isPrepared = this._isPreparedSpell(this.spellsKnown, className, spell.name);\n        const currentPreparedCount = this._currentSpellsKnownCount(className, this.spellsKnown);\n        const maxPreparedCount = this._maxSpellsKnownCount(className, this.spellsKnown);\n\n        if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n          let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n          if (isPrepared) {\n            const index = spellsKnownCopy[className].current.indexOf(spell.name);\n            spellsKnownCopy[className].current.splice(index, 1);\n          } else {\n            spellsKnownCopy[className].current.push(spell.name);\n          }\n          this.spellsKnown = spellsKnownCopy;\n          toggleSpellPrepared(className, spell);\n        } else if (currentPreparedCount >= maxPreparedCount) {\n          this._flashPreparedButton(findInPath('button', e));\n        }\n      }\n    }\n  }\n\n  _toggleCantripPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const className = e.model.item.parentClass;\n    const spell = e.model.item.children[0];\n    const isPrepared = this._isPreparedCantrip(this.spellsKnown, className, spell.name);\n    const currentPreparedCount = this._currentCantripsKnownCount(className, this.spellsKnown);\n    const maxPreparedCount = this._maxCantripsKnownCount(className, this.spellsKnown);\n\n    if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n      let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n      if (isPrepared) {\n        const index = spellsKnownCopy[className].currentCantrips.indexOf(spell.name);\n        spellsKnownCopy[className].currentCantrips.splice(index, 1);\n      } else {\n        spellsKnownCopy[className].currentCantrips.push(spell.name);\n      }\n      this.spellsKnown = spellsKnownCopy;\n      toggleCantripPrepared(className, spell);\n    } else if (currentPreparedCount >= maxPreparedCount) {\n      this._flashPreparedButton(findInPath('button', e));\n    }\n  }\n\n  _flashPreparedButton(buttonEl) {\n    if (buttonEl) {\n      buttonEl.classList.add('transition-bg');\n      buttonEl.classList.add('flash-error');\n      setTimeout(() => {\n        buttonEl.classList.remove('flash-error');\n        setTimeout(() => {\n          buttonEl.classList.remove('transition-bg');\n        }, 200);\n      }, 200);\n    }\n  }\n\n  _toggleSpellSlot(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isInput = findInPath('.checkbox-wrap', e);\n    const isWarlock = !!findInPath('[warlock-spell]', e);\n    const currentSlots = isWarlock ? e.model.item.currentWarlockSlots : e.model.item.currentSlots;\n    const maxSlots = isWarlock ? e.model.item.warlockSpellSlots : e.model.item.spellSlots;\n    const level = e.model.item.level || e.model.item.name;\n\n    if (isInput) {\n      const isChecked = isInput.children[0].checked;\n      if (!isChecked && currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n  \n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    } else {\n      if (currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1;\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n\n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    }\n    \n    if (isWarlock) {\n      this._setSpellSlotsChecked(e.model.item.currentWarlockSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentWarlockSlots, undefined, true);\n    } else {\n      this._setSpellSlotsChecked(e.model.item.currentSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentSlots);\n    }\n  }\n\n  _setSpellSlotsChecked(count, el) {\n    const checkboxes = el.querySelectorAll('vaadin-checkbox');\n    for (let i = 0; i < checkboxes.length; i++) {\n      if (i < count) {\n        checkboxes[i].checked = true;\n      } else {\n        checkboxes[i].checked = false\n      }\n    }\n  }\n\n  _isPreparedClass(spellsKnown, item, isEditMode) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isAlwaysPrepared = item.isAlwaysPrepared;\n    if (isAlwaysPrepared) {\n      return isEditMode ? 'spell-button always-prepared edit-mode' : 'spell-button always-prepared';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared);\n    if (isPrepared) {\n      return isEditMode ? 'spell-prepared spell-button edit-mode' : 'spell-prepared spell-button';\n    }\n    return isEditMode ? 'spell-button edit-mode' : 'spell-button';\n  }\n\n  _isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared){\n    return isAlwaysPrepared || spellsKnown[className] && spellsKnown[className].current && spellsKnown[className].current.length && spellsKnown[className].current.indexOf(spellName) > -1;\n  }\n\n  _isPreparedCantrip(spellsKnown, className, spellName){\n    return spellsKnown[className] && spellsKnown[className].currentCantrips && spellsKnown[className].currentCantrips.length && spellsKnown[className].currentCantrips.indexOf(spellName) > -1;\n  }\n\n  _isPreparedText(spellsKnown, item) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isAlwaysPrepared = item.isAlwaysPrepared;\n    const prepareType = spellsKnown[className] ? spellsKnown[className].type : undefined;\n    if (isAlwaysPrepared) {\n      return prepareType === 'known' ? 'Always' : 'Always';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared);\n    \n    if (isPrepared) {\n      return prepareType === 'known' ? 'Learned' : 'Prepared';\n    } else {\n      return prepareType === 'known' ? 'Learn' : 'Prepare';\n    }\n  }\n\n  _countToArray(count) {\n    const data = [];\n    for (var i = 0; i < count; i++) {\n      data.push(null);\n    }\n    return data;\n  }\n\n  _toLevel(level) {\n    if (level === 'At Will' || level === 'Innate') {\n      return level;\n    } else if (level === 0) {\n      return Parser.spLevelToFull(level) + 's';\n    } else {\n      return Parser.spLevelToFull(level) + ' Level';\n    }\n  }\n  \n  _currentSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].current.length;\n    }\n    return 0;\n  }\n\n  _maxSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].max;\n    }\n    return 0;\n  }\n  \n  _currentCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].currentCantrips.length;\n    }\n    return 0;\n  }\n\n  _maxCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].maxCantrips;\n    }\n    return 0;\n  }\n\n  _toggleTooltip(e) {\n    const tooltipStr = e.target.dataset.tooltip;\n    const hasTooltip = Array.from(e.target.children).find((childEl) => childEl.matches('.tooltip'));\n\n    if (!window.tooltipCloseListener) {\n      window.tooltipCloseListener = true;\n      window.tooltips = [];\n      document.addEventListener('click', () => {\n        window.tooltips.forEach((tooltip) => {\n          tooltip.classList.remove('tooltip--open');\n          setTimeout(() => {\n            tooltip.remove();\n          }, 300);\n        });\n        window.tooltips = [];\n      });\n    }\n\n    if (hasTooltip) {\n      hasTooltip.classList.remove('tooltip--open');\n      setTimeout(() => {\n        hasTooltip.remove();\n      }, 300);\n    } else if (tooltipStr) {\n      const tooltipEl = document.createElement('div');\n      tooltipEl.innerHTML = tooltipStr;\n      tooltipEl.classList.add('tooltip');\n      e.target.appendChild(tooltipEl);\n      setTimeout(() => {\n        tooltipEl.classList.add('tooltip--open');\n        window.tooltips.push(tooltipEl);\n      }, 0);\n    }\n  }\n\n  _toggleEditMode() {\n    dispatchEditModeChange(!this.isEditMode);\n  }\n\n  _spellsKnownString(spellPrepType) {\n    return 'Spells ' + util_capitalize(spellPrepType) + ':'\n  }\n\n  _isRitualSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell && spell.meta && spell.meta.ritual;\n  }\n\n  _isConcentrationSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.duration.some((d) => d.concentration);\n  }\n\n  _isBonusActionSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.time.some((t) => t.unit === 'bonus');\n  }\n\n  _getSpellSchool(spellParent) {\n    const spell = spellParent.children[0];\n    return Parser.SP_SCHOOL_ABV_TO_FULL[spell.school];\n  }\n\n  _hidePrepareSpellsButton(isEditMode, spellsKnown) {\n    return isEditMode || !Object.values(spellsKnown).some((clas) => clas.current.length < clas.max - 1 || clas.currentCantrips.length < clas.maxCantrips - 1);\n  }\n\n  _hidePreparedCountLabel(className, spellsKnown) {\n    return this._currentSpellsKnownCount(className, spellsKnown) === 0\n  }\n\n  _spellLevel(item) {\n    if (item && item.children && item.children.length && item.children[0].level) {\n      return Parser.spLevelToFull(item.children[0].level);\n    }\n  }\n\n  _isSpellSlotChecked(currentSlots, index) {\n    return index < currentSlots;\n  }\n\n  _spellClassText(parentClass) {\n    return parentClass;//util_capitalizeAll(parentClass);\n  }\n\n  _isEmpty(a) {\n    return !a || !a.length;\n  }\n\n  _hideCheckboxes(spellSlots, isEditMode, type) {\n    return !spellSlots || spellSlots > 0 && this.isEditMode || type === 'known' || type === 'will'\n  }\n\n  _hideAtWill(type) {\n    return type !== 'will';\n  }\n  \n  _hideSlotsLabel(isEditMode, level, className) {\n    return !isEditMode || level === 0 || level === 'At Will' || level === 'Innate'|| className === 'Warlock';\n  }\n\n  _innateUsageString(spellUseType) {\n    if (spellUseType === 'daily') {\n      return '<span>Long Rest</span>'\n    } else if (spellUseType === 'rest') {\n      return '<span>Short Rest</span>'\n    } else if (spellUseType) {\n      return '<span>' + util_capitalizeAll(spellUseType) + '</span>'\n    }\n  }\n  \n  _wrapClassString(isEditMode) {\n    return isEditMode ? 'edit-mode' : 'not-edit-mode';\n  }\n\n  _equal(a, b) {\n    return a === b;\n  }\n\n  _hasTwo(a) {\n    return a && a.length && a.length > 1;\n  }\n\n  _join(a) {\n    return a.join(', ');\n  }\n\n  _abs(num) {\n    return num >= 0 ? `+${num}`: num;\n  }\n\n  static get template() {\n    return html`\n      <style include='my-styles'>\n        :host {}\n        :host {\n          display: block;\n          padding-top: 16px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        .heading {\n          width: calc(100% - 32px);\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--lumo-contrast-10pct);\n          margin: 0 16px;\n        }\n\n        h2 {\n          display: block;\n          font-size: 1.5em;\n          margin: 20px 0 20px 0;\n          font-weight: bold;\n        }\n\n        vaadin-grid {\n          margin-bottom: 200px;\n        }\n\n        vaadin-grid-tree-toggle { \n          width: 100%;\n          cursor: pointer;\n        }\n\n        .class-wrap {\n          width: 100%;\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          align-items: center;\n          padding-top: 4px;\n          /* padding-top: 34px;\n          padding-bottom: 8px; */\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n          left: -16px;\n          border-bottom: 3px solid var(--_lumo-grid-secondary-border-color);;\n          padding: 24px 16px 8px;\n          position: relative;\n        }\n        .class-wrap h3 {\n          font-size: 22px;\n          font-weight: bold;\n        }\n\n        .spells-prepared-text {\n          margin-right: 6px;\n          margin-left: auto;\n        }\n        .prepared-count {\n          color: var(--mdc-theme-primary);\n          font-weight: bold;\n        }\n        .prepared-count[edit-mode] {\n          color: var(--mdc-theme-secondary);\n        }\n        .cantrips-prepared {\n          margin-right: 0;\n        }\n\n        .level-outer-wrap {\n          border-bottom: 1px solid var(--_lumo-grid-secondary-border-color);\n          padding-bottom: 8px;\n          display: flex;\n          height: 32px;\n        }\n\n        .level-wrap {\n          width: 100%;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .level-wrap .label {\n          padding-left: 6px;\n          font-size: 12px;\n          color: var(--lumo-tint-70pct);\n        }\n\n        .slot-checkboxes {\n          cursor: pointer;\n          display: flex;\n          padding: 4px;\n        }\n\n        .slot-checkboxes span {\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n          display: flex;\n          align-items: center;\n        }\n\n        .slot-checkboxes .label {\n          padding-left: 8px;\n        }\n        .slot-checkboxes .label span {\n          font-size: 12px;\n          display: inline-block;\n          white-space: pre-wrap;\n          text-align: center;\n        }\n\n        vaadin-checkbox {\n          pointer-events: none;\n        }\n\n        .spell-outer-wrap {\n          display: flex;\n        }\n\n        .spell-wrap {\n          width: 100%;\n          margin-left: 24px;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .spell-inner-wrap {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .spell-level {\n          color: var(--mdc-theme-text-disabled-on-background);\n          margin-left: 8px;\n          margin-right: 4px;\n          font-size: 12px;\n        }\n\n        .ind {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          border-radius: 8px;\n          color: var(--mdc-theme-on-secondary);\n          background-color: var(--mdc-theme-secondary);\n          font-size: 12px;\n          position: relative;\n          bottom: 2px;\n          margin-left: 0;\n          padding: 0px 4px;\n          font-weight: 500;\n        }\n\n        .rit-ind::before {\n          content: 'R';\n        }\n        .conc-ind::before {\n          content: 'C';\n        }\n        .bonus-ind::before {\n          content: 'BA';\n        }\n        .school-ind {\n          font-size: 10px;\n          height: 16px;\n          bottom: 3px;\n        }\n\n        .spell-inner-wrap[not-edit-mode] .ind {\n          background-color: var(--mdc-theme-primary);\n        }\n\n        .spell-def-wrap {\n          font-size: 14px;\n          width: calc(100% - 20px);\n          margin: 0 auto;\n          background: var(--lumo-contrast-10pct);\n          border-radius: 4px;\n          white-space: pre-line;\n        }\n\n        .spell-def-wrap .margin-bottom_med {\n          margin-bottom: 0px !important;\n        }\n\n        .spell-def-wrap .text {\n          margin-top: 16px;\n        }\n\n        .spell-def-wrap p {\n          margin-bottom: 16px;\n        }\n\n        .stats-wrapper {\n          margin: -18px 14px 0;\n        }\n\n        .spell-button {\n          background-color: var(--mdc-theme-text-disabled-on-background);\n          color: var(--mdc-theme-on-secondary);\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 80px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n          margin-left: 8px;\n        }\n        .class-icon {\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 60px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n          width: 20px;\n        }\n        .class-icon[hide] {\n          display: none;\n        }\n        .spell-button.edit-mode {\n          cursor: pointer;\n        }\n        .spell-button.always-prepared {\n          background-color: var(--mdc-theme-secondary-lighter);\n          cursor: not-allowed;\n        }\n        .spell-button.spell-prepared {\n          background-color: var(--mdc-theme-secondary);\n        }\n        .spell-button.flash-error {\n          background-color: var(--mdc-theme-error);\n          transition: background-color 0.2s ease-out;\n        }\n        .spell-button.transition-bg {\n          transition: background-color 0.2s ease-in;\n        }\n\n        .mods {\n          display: flex;\n          flex-wrap: nowrap;\n          justify-content: space-around;\n          margin: 16px 0;\n        }\n        .mod-row {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          font-size: 12px;\n          text-align: center;\n          margin: 0 4px;\n          width: 130px;\n        }\n        .mod-val-wrap {\n          font-size: 16px;\n        }\n        .mod-val:not(:first-child)::before {\n          content: '|';\n          margin-right: 4px;\n          color: var(--lumo-contrast-30pct);\n        }\n        .mod-label {\n          font-weight: bold;\n          color: var(--mdc-theme-primary);\n          font-size: 15px;\n        }\n        .edit-mode .mod-label {\n          font-weight: bold;\n          color: var(--mdc-theme-secondary);\n        }\n        @media(min-width: 420px) {\n          .mods {\n            justify-content: center;\n          }\n          .mod-row {\n            font-size: 14px;\n          }\n          .mod-val-wrap {\n            font-size: 18px;\n          }\n        }\n\n        @media(min-width: 921px) {\n          .mods {\n            justify-content: flex-start;\n          }\n        }\n\n        .filter {\n          margin-left: 16px;\n\n        }\n\n        .tooltip {\n          position: absolute;\n          background: lightgray;\n          color: black;\n          padding: 2px 10px;\n          border-radius: 4px;\n          white-space: nowrap;\n          left: 8px;\n          opacity: 0;\n          transition: opacity 0.3s ease;\n          border-top-left-radius: 0px;\n        }\n        .tooltip--open {\n          opacity: 1;\n        }\n        .tooltip::after {\n          content: '';\n          height: 0;\n          width: 0;\n          position: absolute;\n          border-left: 5px solid transparent;\n          border-right: 5px solid transparent;\n          border-bottom: 5px solid lightgray;\n          top: -5px;\n          left: 0px;\n        }\n        [data-tooltip] {\n          position: relative;\n        }\n\n        .no-content-message {\n          font-size: 14px;\n          padding: 20px;\n          font-style: italic;\n        }\n      </style>\n\n      <div class$=\"[[_wrapClassString(isEditMode)]]\" hidden$=\"[[noContentMessage]]\">\n        <div class=\"heading\">\n          <h2>Spells</h2>\n          <dnd-button class=\"prepare-spells-button link\" hidden$=\"[[_hidePrepareSpellsButton(isEditMode, spellsKnown)]]\" edit-mode$=\"[[isEditMode]]\" not-edit-mode$=\"[[!isEditMode]]\" label=\"Prepare Your Spells!\" icon=\"edit\" on-click=\"_toggleEditMode\"></dnd-button>\n        </div>\n\n        <!-- Spell Mods -->\n        <div class=\"mods\" >\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">[[_abs(item.mod)]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">Modifier</span>\n          </div>\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">+[[item.spellAttackBonus]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">Attack +</span>\n          </div>\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">[[item.dc]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">DC</span>\n          </div>\n        </div>\n\n        <div class=\"filter\">\n          <vaadin-text-field clear-button-visible value=\"{{filterStr}}\" placeholder='Filter'></vaadin-text-field>\n        </div>\n      </div>\n\n      <div class=\"no-content-message\" hidden$=\"[[!noContentMessage]]\">Enter edit mode to add classes and levels.</div>\n\n      <vaadin-grid id=\"grid\" theme=\"no-border no-row-borders\" expanded-items=\"{{expandedItems}}\" height-by-rows hidden$=\"[[noContentMessage]]\">\n        <vaadin-grid-column flex-grow=\"1\">\n          <template>\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'class')]]\">\n                <div class=\"class-wrap\">\n                  <h3>[[item.className]]</h3>\n                  <div class='spells-prepared-text' hidden$=\"[[_hidePreparedCountLabel(item.className, spellsKnown)]]\">\n                    <span>[[_spellsKnownString(item.spellPrepType)]]</span>\n                    <span class='prepared-count' edit-mode$=[[isEditMode]]>[[_currentSpellsKnownCount(item.className, spellsKnown)]] / [[_maxSpellsKnownCount(item.className, spellsKnown)]]</span>\n                  </div>\n                </div>\n              </template>\n  \n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'level')]]\">\n                <div class=\"level-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\" on-click='_recordScrollHeight'>\n                    <h4 class=\"level-wrap\">[[_toLevel(item.level)]]<span hidden$=\"[[_hideSlotsLabel(isEditMode, item.level, item.parentClass)]]\" class=\"label\">([[item.spellSlots]] Slots)</span></h4>\n                    <div class=\"cantrips-prepared spells-prepared-text\" hidden$=\"[[!_equal(item.level, 0)]]\">\n                      <span>Cantrips Known:</span>\n                      <span class='prepared-count' edit-mode$=[[isEditMode]]>[[_currentCantripsKnownCount(item.parentClass, spellsKnown)]] / [[_maxCantripsKnownCount(item.parentClass, spellsKnown)]]</span>\n                    </div>\n                  </vaadin-grid-tree-toggle>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.warlockSpellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\" warlock-spell>\n                    <template is='dom-repeat' items='[[_countToArray(item.warlockSpellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentWarlockSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Pact</span>\n                  </div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.spellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\">\n                    <template is='dom-repeat' items='[[_countToArray(item.spellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Slots</span>\n                  </div>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spell')]]\">\n                <div class=\"spell-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\" class=\"spell-wrap\" on-click='_recordScrollHeight'>\n                    <div class=\"spell-inner-wrap\" not-edit-mode$=\"[[!isEditMode]]\">\n                      [[item.name]]\n                      <span class=\"spell-level\" hidden>[[_spellLevel(item)]]</span>\n                      <span class=\"ind rit-ind\" title=\"Ritual\" hidden$=\"[[!_isRitualSpell(item)]]\"></span>\n                      <span class=\"ind conc-ind\" title=\"Concentration\" hidden$=\"[[!_isConcentrationSpell(item)]]\"></span>\n                      <span class=\"ind bonus-ind\" title=\"Bonus Action\" hidden$=\"[[!_isBonusActionSpell(item)]]\"></span>\n                      <span class=\"ind school-ind\" title=\"[[_getSpellSchool(item)]]\">[[_getSpellSchool(item)]]</span>\n                    </div>\n                  </vaadin-grid-tree-toggle>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.spellSlots, isEditMode, item.spellUseType)]]\" on-click=\"_toggleSpellSlot\">\n                    <template is='dom-repeat' items='[[_countToArray(item.spellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\" inner-h-t-m-l=\"[[_innateUsageString(item.spellUseType)]]\"></span>\n                  </div>\n\n                  <span hidden$=\"[[_hideAtWill(item.spellUseType)]]\">At Will</span>\n        \n                  <button class$=\"[[_isPreparedClass(spellsKnown, item, isEditMode)]]\" hidden$=\"[[!isEditMode]]\" on-click=\"_toggleSpellPrepared\">[[_isPreparedText(spellsKnown, item)]]</button>\n                  <dnd-svg class=\"class-icon\" hidden$=\"[[isEditMode]]\" id='[[_spellClassText(item.parentClass)]]' default-color></dnd-svg>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spelldef')]]\">\n                <div class=\"spell-def-wrap\">\n                  <div class= \"stats-wrapper\" inner-h-t-m-l=\"[[_renderSpell(item)]]\"></div>\n                </div>\n              </template>\n          </template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-spells\",DndCharacterBuilderSpells);\n"],"sourceRoot":""}