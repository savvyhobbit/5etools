{"version":3,"sources":["webpack:///./node_modules/@vaadin/number-field/theme/lumo/vaadin-number-field-styles.js","webpack:///./node_modules/@vaadin/number-field/src/vaadin-number-field.js","webpack:///./node_modules/@vaadin/integer-field/src/vaadin-integer-field.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-integer-field.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-text-field.js","webpack:///./node_modules/@vaadin/text-area/theme/lumo/vaadin-text-area-styles.js","webpack:///./node_modules/@vaadin/field-base/src/text-area-controller.js","webpack:///./node_modules/@vaadin/text-area/src/vaadin-text-area.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-text-area.js"],"names":["numberField","moduleId","hasControls","type","Boolean","value","reflectToAttribute","stepButtonsVisible","min","Number","max","step","super","delegateProps","constraints","this","_setType","tag","localName","slotStyles","$","clearButton","ready","addController","input","_setInputElement","_setFocusElement","stateTarget","ariaTarget","inputElement","_labelController","_tooltipController","setPosition","checkValidity","invalid","e","preventDefault","_decreaseValue","_increaseValue","_incrementValue","incr","disabled","readonly","parseFloat","_getIncrement","newValue","_incrementIsInsideTheLimits","_setValue","String","dispatchEvent","CustomEvent","bubbles","currentValue","multiplier","Math","_getMultiplier","margin","round","number","s","i","indexOf","length","isNaN","_getDecimalCount","sign","newVal","oldVal","_valueChanged","event","key","_onKeyDown","target","composedPath","_hasInputValue","validity","badInput","customElements","define","is","allowedCharPattern","__isInteger","console","warn","__hasOnlyDigits","_stepChanged","test","textArea","host","callback","document","createElement","node","getAttribute","name","setAttribute","id","defaultId","maxlength","minlength","delegateAttrs","__scrollPositionUpdated","addEventListener","_onAnimationEnd","_inputField","shadowRoot","querySelector","scrollTopBefore","scrollTop","deltaY","_updateHeight","style","setProperty","animationName","inputField","valueLength","_oldValueLength","inputFieldHeight","getComputedStyle","height","inputWidth","width","display","maxWidth","inputHeight","scrollHeight","clientHeight","removeProperty","pattern","match","_"],"mappings":"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","file":"1.bundle.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport { fieldButton } from '@vaadin/vaadin-lumo-styles/mixins/field-button.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst numberField = css`\n  :host {\n    width: 8em;\n  }\n\n  :host([step-buttons-visible]:not([theme~='align-right'])) ::slotted(input),\n  :host([has-controls]:not([theme~='align-right'])) ::slotted(input) {\n    text-align: center;\n  }\n\n  [part$='button'][disabled] {\n    opacity: 0.2;\n  }\n\n  :host([step-buttons-visible]) [part='input-field'],\n  :host([has-controls]) [part='input-field'] {\n    padding: 0;\n  }\n\n  [part\\$='button'] {\n    cursor: pointer;\n    font-size: var(--lumo-icon-size-s);\n    width: 1.6em;\n    height: 1.6em;\n  }\n\n  [part\\$='button']::before {\n    margin-top: 0.3em;\n  }\n\n  [part='decrease-button']::before {\n    content: var(--lumo-icons-minus);\n  }\n\n  [part='increase-button']::before {\n    content: var(--lumo-icons-plus);\n  }\n\n  /* RTL specific styles */\n  :host([dir='rtl']:not([theme~='align-right'])) ::slotted(input) {\n    --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em);\n  }\n`;\n\nregisterStyles('vaadin-number-field', [inputFieldShared, fieldButton, numberField], {\n  moduleId: 'lumo-number-field',\n});\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport { html, PolymerElement } from '@polymer/polymer';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-number-field', inputFieldShared, { moduleId: 'vaadin-number-field-styles' });\n\n/**\n * `<vaadin-number-field>` is an input field web component that only accepts numeric input.\n *\n * ```html\n * <vaadin-number-field label=\"Balance\"></vaadin-number-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-number-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name         | Description\n * ------------------|-------------------------\n * `increase-button` | Increase (\"plus\") button\n * `decrease-button` | Decrease (\"minus\") button\n *\n * Note, the `input-prevented` state attribute is only supported when `allowedCharPattern` is set.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes InputFieldMixin\n * @mixes SlotStylesMixin\n * @mixes ElementMixin\n * @mixes ThemableMixin\n */\nexport class NumberField extends InputFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-number-field';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host([readonly]) [part$='button'] {\n          pointer-events: none;\n        }\n\n        [part='decrease-button']::before {\n          content: '−';\n        }\n\n        [part='increase-button']::before {\n          content: '+';\n        }\n\n        [part='decrease-button'],\n        [part='increase-button'] {\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n\n        :host([dir='rtl']) [part='input-field'] {\n          direction: ltr;\n        }\n      </style>\n\n      <div class=\"vaadin-field-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[_theme]]\"\n        >\n          <div\n            disabled$=\"[[!_allowed(-1, value, min, max, step)]]\"\n            part=\"decrease-button\"\n            on-click=\"_decreaseValue\"\n            on-touchend=\"_decreaseButtonTouchend\"\n            hidden$=\"[[!_isStepButtonVisible(hasControls, stepButtonsVisible)]]\"\n            aria-hidden=\"true\"\n            slot=\"prefix\"\n          ></div>\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"input\"></slot>\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n          <div\n            disabled$=\"[[!_allowed(1, value, min, max, step)]]\"\n            part=\"increase-button\"\n            on-click=\"_increaseValue\"\n            on-touchend=\"_increaseButtonTouchend\"\n            hidden$=\"[[!_isStepButtonVisible(hasControls, stepButtonsVisible)]]\"\n            aria-hidden=\"true\"\n            slot=\"suffix\"\n          ></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set to true to display value increase/decrease controls.\n       * @attr {boolean} has-controls\n       * @deprecated since 23.3.\n       * Use [`stepButtonsVisible`](#/elements/vaadin-number-field#property-stepButtonsVisible) instead\n       */\n      hasControls: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * Set to true to show increase/decrease buttons.\n       * @attr {boolean} step-buttons-visible\n       */\n      stepButtonsVisible: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * The minimum value of the field.\n       */\n      min: {\n        type: Number,\n      },\n\n      /**\n       * The maximum value of the field.\n       */\n      max: {\n        type: Number,\n      },\n\n      /**\n       * Specifies the allowed number intervals of the field.\n       * @type {number}\n       */\n      step: {\n        type: Number,\n      },\n    };\n  }\n\n  static get observers() {\n    return ['_stepChanged(step, inputElement)'];\n  }\n\n  static get delegateProps() {\n    return [...super.delegateProps, 'min', 'max'];\n  }\n\n  static get constraints() {\n    return [...super.constraints, 'min', 'max', 'step'];\n  }\n\n  constructor() {\n    super();\n    this._setType('number');\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      ...super.slotStyles,\n      `\n        ${tag} input[type=\"number\"]::-webkit-outer-spin-button,\n        ${tag} input[type=\"number\"]::-webkit-inner-spin-button {\n          -webkit-appearance: none;\n          margin: 0;\n        }\n\n        ${tag} input[type=\"number\"] {\n          -moz-appearance: textfield;\n        }\n\n        ${tag}[dir='rtl'] input[type=\"number\"]::placeholder {\n          direction: rtl;\n        }\n\n        ${tag}[dir='rtl']:not([step-buttons-visible]):not([has-controls]) input[type=\"number\"]::placeholder {\n          text-align: left;\n        }\n      `,\n    ];\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new InputController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      }),\n    );\n\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n\n    this._tooltipController = new TooltipController(this);\n    this.addController(this._tooltipController);\n    this._tooltipController.setPosition('top');\n  }\n\n  /**\n   * Override the method from `InputConstraintsMixin`\n   * to enforce HTML constraint validation even if\n   * the user didn't add any constraints explicitly:\n   * the field has to be regardless checked for bad input.\n   *\n   * @override\n   */\n  checkValidity() {\n    if (this.inputElement) {\n      return this.inputElement.checkValidity();\n    }\n\n    return !this.invalid;\n  }\n\n  /** @private */\n  _decreaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._decreaseValue();\n  }\n\n  /** @private */\n  _increaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._increaseValue();\n  }\n\n  /** @private */\n  _decreaseValue() {\n    this._incrementValue(-1);\n  }\n\n  /** @private */\n  _increaseValue() {\n    this._incrementValue(1);\n  }\n\n  /** @private */\n  _incrementValue(incr) {\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    const step = this.step || 1;\n    let value = parseFloat(this.value);\n\n    if (!this.value) {\n      if ((this.min === 0 && incr < 0) || (this.max === 0 && incr > 0) || (this.max === 0 && this.min === 0)) {\n        incr = 0;\n        value = 0;\n      } else if ((this.max == null || this.max >= 0) && (this.min == null || this.min <= 0)) {\n        value = 0;\n      } else if (this.min > 0) {\n        value = this.min;\n        if (this.max < 0 && incr < 0) {\n          value = this.max;\n        }\n        incr = 0;\n      } else if (this.max < 0) {\n        value = this.max;\n        if (incr < 0) {\n          incr = 0;\n        } else if (this._getIncrement(1, value - step) > this.max) {\n          value -= 2 * step;\n          // FIXME(yuriy): find a proper solution to make correct step back\n        } else {\n          value -= step;\n        }\n      }\n    } else if (value < this.min) {\n      incr = 0;\n      value = this.min;\n    } else if (value > this.max) {\n      incr = 0;\n      value = this.max;\n    }\n\n    const newValue = this._getIncrement(incr, value);\n    if (!this.value || incr === 0 || this._incrementIsInsideTheLimits(incr, value)) {\n      this._setValue(newValue);\n    }\n  }\n\n  /** @private */\n  _setValue(value) {\n    this.value = this.inputElement.value = String(parseFloat(value));\n    this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n  }\n\n  /** @private */\n  _getIncrement(incr, currentValue) {\n    let step = this.step || 1,\n      min = this.min || 0;\n\n    // To avoid problems with decimal math, multiplying to operate with integers.\n    const multiplier = Math.max(this._getMultiplier(currentValue), this._getMultiplier(step), this._getMultiplier(min));\n\n    step *= multiplier;\n    currentValue = Math.round(currentValue * multiplier);\n    min *= multiplier;\n\n    const margin = (currentValue - min) % step;\n\n    if (incr > 0) {\n      return (currentValue - margin + step) / multiplier;\n    } else if (incr < 0) {\n      return (currentValue - (margin || step)) / multiplier;\n    }\n    return currentValue / multiplier;\n  }\n\n  /** @private */\n  _getDecimalCount(number) {\n    const s = String(number);\n    const i = s.indexOf('.');\n    return i === -1 ? 1 : s.length - i - 1;\n  }\n\n  /** @private */\n  _getMultiplier(number) {\n    if (!isNaN(number)) {\n      return 10 ** this._getDecimalCount(number);\n    }\n  }\n\n  /** @private */\n  _incrementIsInsideTheLimits(incr, value) {\n    if (incr < 0) {\n      return this.min == null || this._getIncrement(incr, value) >= this.min;\n    } else if (incr > 0) {\n      return this.max == null || this._getIncrement(incr, value) <= this.max;\n    }\n    return this._getIncrement(incr, value) <= this.max && this._getIncrement(incr, value) >= this.min;\n  }\n\n  /** @private */\n  _allowed(sign) {\n    const incr = sign * (this.step || 1);\n    const value = parseFloat(this.value);\n    return !this.value || (!this.disabled && this._incrementIsInsideTheLimits(incr, value));\n  }\n\n  /**\n   * @param {number} step\n   * @param {HTMLElement | undefined} inputElement\n   * @protected\n   */\n  _stepChanged(step, inputElement) {\n    if (inputElement) {\n      inputElement.step = step || 'any';\n    }\n  }\n\n  /**\n   * @param {unknown} newVal\n   * @param {unknown} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    // Validate value to be numeric\n    if (newVal && isNaN(parseFloat(newVal))) {\n      this.value = '';\n    } else if (typeof this.value !== 'string') {\n      this.value = String(this.value);\n    }\n\n    super._valueChanged(this.value, oldVal);\n  }\n\n  /**\n   * Override an event listener from `InputControlMixin`\n   * to avoid adding a separate listener.\n   * @param {!KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      this._increaseValue();\n    } else if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      this._decreaseValue();\n    }\n\n    super._onKeyDown(event);\n  }\n\n  /**\n   * Determines whether to hide the increase / decrease buttons based on the\n   * deprecated `hasControls` property, and the replacement `stepButtonsVisible`\n   * property\n   * @private\n   */\n  _isStepButtonVisible(hasControls, stepButtonsVisible) {\n    return hasControls || stepButtonsVisible;\n  }\n\n  /**\n   * Native [type=number] inputs don't update their value\n   * when you are entering input that the browser is unable to parse\n   * e.g. \"--5\", hence we have to override this method from `InputMixin`\n   * so that, when value is empty, it would additionally check\n   * for bad input based on the native `validity.badInput` property.\n   *\n   * @param {InputEvent} event\n   * @protected\n   * @override\n   */\n  _setHasInputValue(event) {\n    const target = event.composedPath()[0];\n    this._hasInputValue = target.value.length > 0 || target.validity.badInput;\n  }\n}\n\ncustomElements.define(NumberField.is, NumberField);\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { NumberField } from '@vaadin/number-field/src/vaadin-number-field.js';\n\n/**\n * `<vaadin-integer-field>` is an input field web component that only accepts entering integer numbers.\n *\n * ```html\n * <vaadin-integer-field label=\"X\"></vaadin-integer-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-integer-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name         | Description\n * ------------------|-------------------------\n * `increase-button` | Increase (\"plus\") button\n * `decrease-button` | Decrease (\"minus\") button\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends NumberField\n */\nexport class IntegerField extends NumberField {\n  static get is() {\n    return 'vaadin-integer-field';\n  }\n\n  constructor() {\n    super();\n\n    this.allowedCharPattern = '[-+\\\\d]';\n  }\n\n  /**\n   * Override an observer from `InputMixin` to clear the value\n   * when trying to type invalid characters.\n   * @param {string | undefined} newVal\n   * @param {string | undefined} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    if (newVal !== '' && !this.__isInteger(newVal)) {\n      console.warn(`Trying to set non-integer value \"${newVal}\" to <vaadin-integer-field>. Clearing the value.`);\n      this.value = '';\n      return;\n    }\n    super._valueChanged(newVal, oldVal);\n  }\n\n  /**\n   * Override an observer from `NumberField` to reset the step\n   * property when an invalid step is set.\n   * @param {number} newVal\n   * @param {HTMLElement | undefined} inputElement\n   * @protected\n   * @override\n   */\n  _stepChanged(step, inputElement) {\n    if (step != null && !this.__hasOnlyDigits(step)) {\n      console.warn(\n        `<vaadin-integer-field> The \\`step\\` property must be a positive integer but \\`${step}\\` was provided, so the property was reset to \\`null\\`.`,\n      );\n      this.step = null;\n      return;\n    }\n\n    super._stepChanged(step, inputElement);\n  }\n\n  /** @private */\n  __isInteger(value) {\n    return /^(-\\d)?\\d*$/.test(String(value));\n  }\n\n  /** @private */\n  __hasOnlyDigits(value) {\n    return /^\\d+$/.test(String(value));\n  }\n}\n\ncustomElements.define(IntegerField.is, IntegerField);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { IntegerField } from '@vaadin/integer-field/src/vaadin-integer-field.js';\n\n/**\n * @deprecated Import `IntegerField` from `@vaadin/integer-field` instead.\n */\nexport const IntegerFieldElement = IntegerField;\n\nexport * from '@vaadin/integer-field/src/vaadin-integer-field.js';\n\nconsole.warn(\n  'WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/integer-field\" instead.',\n);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { TextField } from '@vaadin/text-field/src/vaadin-text-field.js';\n\n/**\n * @deprecated Import `TextField` from `@vaadin/text-field` instead.\n */\nexport const TextFieldElement = TextField;\n\nexport * from '@vaadin/text-field/src/vaadin-text-field.js';\n\nconsole.warn(\n  'WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/text-field\" instead.',\n);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst textArea = css`\n  [part='input-field'],\n  [part='input-field'] ::slotted(textarea) {\n    height: auto;\n    box-sizing: border-box;\n  }\n\n  [part='input-field'] {\n    /* Equal to the implicit padding in vaadin-text-field */\n    padding-top: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\n    padding-bottom: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\n    transition: background-color 0.1s;\n    line-height: var(--lumo-line-height-s);\n  }\n\n  :host(:not([readonly])) [part='input-field']::after {\n    display: none;\n  }\n\n  :host([readonly]) [part='input-field'] {\n    border: 1px dashed var(--lumo-contrast-30pct);\n  }\n\n  :host([readonly]) [part='input-field']::after {\n    border: none;\n  }\n\n  :host(:hover:not([readonly]):not([focused]):not([invalid])) [part='input-field'] {\n    background-color: var(--lumo-contrast-20pct);\n  }\n\n  @media (pointer: coarse) {\n    :host(:hover:not([readonly]):not([focused]):not([invalid])) [part='input-field'] {\n      background-color: var(--lumo-contrast-10pct);\n    }\n\n    :host(:active:not([readonly]):not([focused])) [part='input-field'] {\n      background-color: var(--lumo-contrast-20pct);\n    }\n  }\n\n  [part='input-field'] ::slotted(textarea) {\n    line-height: inherit;\n    --_lumo-text-field-overflow-mask-image: none;\n  }\n\n  /* Vertically align icon prefix/suffix with the first line of text */\n  [part='input-field'] ::slotted(iron-icon),\n  [part='input-field'] ::slotted(vaadin-icon) {\n    margin-top: calc((var(--lumo-icon-size-m) - 1em * var(--lumo-line-height-s)) / -2);\n  }\n`;\n\nregisterStyles('vaadin-text-area', [inputFieldShared, textArea], {\n  moduleId: 'lumo-text-area',\n});\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\n\n/**\n * A controller to create and initialize slotted `<textarea>` element.\n */\nexport class TextAreaController extends SlotController {\n  constructor(host, callback) {\n    super(\n      host,\n      'textarea',\n      () => document.createElement('textarea'),\n      (host, node) => {\n        const value = host.getAttribute('value');\n        if (value) {\n          node.value = value;\n        }\n\n        const name = host.getAttribute('name');\n        if (name) {\n          node.setAttribute('name', name);\n        }\n\n        node.id = this.defaultId;\n\n        if (typeof callback === 'function') {\n          callback(node);\n        }\n      },\n      true,\n    );\n  }\n}\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport { html, PolymerElement } from '@polymer/polymer';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { PatternMixin } from '@vaadin/field-base/src/pattern-mixin.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { TextAreaController } from '@vaadin/field-base/src/text-area-controller.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-text-area', inputFieldShared, { moduleId: 'vaadin-text-area-styles' });\n\n/**\n * `<vaadin-text-area>` is a web component for multi-line text input.\n *\n * ```html\n * <vaadin-text-area label=\"Comment\"></vaadin-text-area>\n * ```\n *\n * ### Prefixes and suffixes\n *\n * These are child elements of a `<vaadin-text-area>` that are displayed\n * inline with the input, before or after.\n * In order for an element to be considered as a prefix, it must have the slot\n * attribute set to `prefix` (and similarly for `suffix`).\n *\n * ```html\n * <vaadin-text-area label=\"Description\">\n *   <div slot=\"prefix\">Details:</div>\n *   <div slot=\"suffix\">The end!</div>\n * </vaadin-text-area>\n * ```\n *\n * ### Styling\n *\n * The following custom properties are available for styling:\n *\n * Custom property                | Description                | Default\n * -------------------------------|----------------------------|---------\n * `--vaadin-field-default-width` | Default width of the field | `12em`\n *\n * `<vaadin-text-area>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes InputFieldMixin\n * @mixes ElementMixin\n * @mixes PatternMixin\n * @mixes ThemableMixin\n * @mixes ResizeMixin\n */\nexport class TextArea extends ResizeMixin(PatternMixin(InputFieldMixin(ThemableMixin(ElementMixin(PolymerElement))))) {\n  static get is() {\n    return 'vaadin-text-area';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          animation: 1ms vaadin-text-area-appear;\n        }\n\n        .vaadin-text-area-container {\n          flex: auto;\n        }\n\n        /* The label, helper text and the error message should neither grow nor shrink. */\n        [part='label'],\n        [part='helper-text'],\n        [part='error-message'] {\n          flex: none;\n        }\n\n        [part='input-field'] {\n          flex: auto;\n          overflow: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        ::slotted(textarea) {\n          -webkit-appearance: none;\n          -moz-appearance: none;\n          flex: auto;\n          overflow: hidden;\n          width: 100%;\n          height: 100%;\n          outline: none;\n          resize: none;\n          margin: 0;\n          padding: 0 0.25em;\n          border: 0;\n          border-radius: 0;\n          min-width: 0;\n          font: inherit;\n          font-size: 1em;\n          line-height: normal;\n          color: inherit;\n          background-color: transparent;\n          /* Disable default invalid style in Firefox */\n          box-shadow: none;\n        }\n\n        /* Override styles from <vaadin-input-container> */\n        [part='input-field'] ::slotted(textarea) {\n          align-self: stretch;\n          white-space: pre-wrap;\n        }\n\n        [part='input-field'] ::slotted(:not(textarea)) {\n          align-self: flex-start;\n        }\n\n        /* Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=1739079 */\n        :host([disabled]) ::slotted(textarea) {\n          user-select: none;\n        }\n\n        @keyframes vaadin-text-area-appear {\n          to {\n            opacity: 1;\n          }\n        }\n      </style>\n\n      <div class=\"vaadin-text-area-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[_theme]]\"\n          on-scroll=\"__scrollPositionUpdated\"\n        >\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"textarea\"></slot>\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Maximum number of characters (in Unicode code points) that the user can enter.\n       */\n      maxlength: {\n        type: Number,\n      },\n\n      /**\n       * Minimum number of characters (in Unicode code points) that the user can enter.\n       */\n      minlength: {\n        type: Number,\n      },\n    };\n  }\n\n  static get delegateAttrs() {\n    return [...super.delegateAttrs, 'maxlength', 'minlength'];\n  }\n\n  static get constraints() {\n    return [...super.constraints, 'maxlength', 'minlength'];\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  _onResize() {\n    this.__scrollPositionUpdated();\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new TextAreaController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      }),\n    );\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n\n    this._tooltipController = new TooltipController(this);\n    this._tooltipController.setPosition('top');\n    this.addController(this._tooltipController);\n\n    this.addEventListener('animationend', this._onAnimationEnd);\n\n    this._inputField = this.shadowRoot.querySelector('[part=input-field]');\n\n    // Wheel scrolling results in async scroll events. Preventing the wheel\n    // event, scrolling manually and then synchronously updating the scroll position CSS variable\n    // allows us to avoid some jumpy behavior that would occur on wheel otherwise.\n    this._inputField.addEventListener('wheel', (e) => {\n      const scrollTopBefore = this._inputField.scrollTop;\n      this._inputField.scrollTop += e.deltaY;\n\n      if (scrollTopBefore !== this._inputField.scrollTop) {\n        e.preventDefault();\n        this.__scrollPositionUpdated();\n      }\n    });\n\n    this._updateHeight();\n    this.__scrollPositionUpdated();\n  }\n\n  /** @private */\n  __scrollPositionUpdated() {\n    this._inputField.style.setProperty('--_text-area-vertical-scroll-position', '0px');\n    this._inputField.style.setProperty('--_text-area-vertical-scroll-position', `${this._inputField.scrollTop}px`);\n  }\n\n  /** @private */\n  _onAnimationEnd(e) {\n    if (e.animationName.indexOf('vaadin-text-area-appear') === 0) {\n      this._updateHeight();\n    }\n  }\n\n  /**\n   * @param {unknown} newVal\n   * @param {unknown} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    super._valueChanged(newVal, oldVal);\n\n    this._updateHeight();\n  }\n\n  /** @private */\n  _updateHeight() {\n    const input = this.inputElement;\n    const inputField = this._inputField;\n\n    if (!input || !inputField) {\n      return;\n    }\n\n    const scrollTop = inputField.scrollTop;\n\n    // Only clear the height when the content shortens to minimize scrollbar flickering.\n    const valueLength = this.value ? this.value.length : 0;\n\n    if (this._oldValueLength >= valueLength) {\n      const inputFieldHeight = getComputedStyle(inputField).height;\n      const inputWidth = getComputedStyle(input).width;\n\n      // Temporarily fix the height of the wrapping input field container to prevent changing the browsers scroll\n      // position while resetting the textareas height. If the textarea had a large height, then removing its height\n      // will reset its height to the default of two rows. That might reduce the height of the page, and the\n      // browser might adjust the scroll position before we can restore the measured height of the textarea.\n      inputField.style.display = 'block';\n      inputField.style.height = inputFieldHeight;\n\n      // Fix the input element width so its scroll height isn't affected by host's disappearing scrollbars\n      input.style.maxWidth = inputWidth;\n\n      // Clear the height of the textarea to allow measuring a reduced scroll height\n      input.style.height = 'auto';\n    }\n    this._oldValueLength = valueLength;\n\n    const inputHeight = input.scrollHeight;\n    if (inputHeight > input.clientHeight) {\n      input.style.height = `${inputHeight}px`;\n    }\n\n    // Restore\n    input.style.removeProperty('max-width');\n    inputField.style.removeProperty('display');\n    inputField.style.removeProperty('height');\n    inputField.scrollTop = scrollTop;\n  }\n\n  /**\n   * Returns true if the current textarea value satisfies all constraints (if any).\n   * @return {boolean}\n   */\n  checkValidity() {\n    if (!super.checkValidity()) {\n      return false;\n    }\n\n    // Native <textarea> does not support pattern attribute, so we have a custom logic\n    // according to WHATWG spec for <input>, with tests inspired by web-platform-tests\n    // https://html.spec.whatwg.org/multipage/input.html#the-pattern-attribute\n\n    if (!this.pattern || !this.inputElement.value) {\n      // Mark as valid if there is no pattern, or the value is empty\n      return true;\n    }\n\n    try {\n      const match = this.inputElement.value.match(this.pattern);\n      return match ? match[0] === match.input : false;\n    } catch (_) {\n      // If the pattern can not be compiled, then report as valid\n      return true;\n    }\n  }\n}\n\ncustomElements.define(TextArea.is, TextArea);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { TextArea } from '@vaadin/text-area/src/vaadin-text-area.js';\n\n/**\n * @deprecated Import `TextArea` from `@vaadin/text-area` instead.\n */\nexport const TextAreaElement = TextArea;\n\nexport * from '@vaadin/text-area/src/vaadin-text-area.js';\n\nconsole.warn('WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/text-area\" instead.');\n"],"sourceRoot":""}