{"version":3,"sources":["webpack:///./node_modules/@vaadin/vaadin-checkbox/vaadin-checkbox.js","webpack:///./js/spells.js","webpack:///./node_modules/@vaadin/vaadin-text-field/vaadin-text-field.js","webpack:///./node_modules/@vaadin/vaadin-grid/theme/lumo/vaadin-grid-tree-toggle-styles.js","webpack:///./node_modules/@vaadin/vaadin-grid/src/vaadin-grid-tree-toggle.js","webpack:///./components/views/character/dnd-character-builder-spells.js"],"names":["renderer","renderSelection","spell","rootEl","querySelector","innerHTML","spellHtmlString","spellHtml","renderStack","push","source","sourceJsonToFull","sourceJsonToAbv","spLevelSchoolMetaToFull","level","school","meta","spTimeListToFull","time","spRangeToFull","range","spComponentsToFull","components","spDurationToFull","duration","recursiveEntryRender","type","entries","entriesHigherLevel","higherLevelsEntryList","spMainClassesToFull","classes","fromSubclass","currentAndLegacy","spSubclassesToCurrentAndLegacyFull","scrollNote","join","$_documentContainer","document","head","appendChild","content","createElement","Number","value","observer","leaf","Boolean","reflectToAttribute","expanded","notify","super","ready","this","addEventListener","e","_onClick","preventDefault","toString","style","_debouncerUpdateLevel","debounce","updateStyles","customElements","define","is","DndCharacterBuilderSpells","spellsKnown","Object","preparedSpells","noContentMessage","isEditMode","filterStr","String","length","oldExpanded","$","grid","expandedItems","expandAll","clearCache","setTimeout","undefined","connectedCallback","characterChangeHandler","character","detail","updateFromCharacter","refresh","editModeHandler","disconnectedCallback","removeEventListener","multiclassSlotsDef","fullCasterSlotsDef","halfCasterSlotsDef","thirdCasterSlotsDef","dataProvider","params","callback","startIndex","page","pageSize","children","parentItem","spellDisplay","filter","child","hasDecendentWithFilter","toLowerCase","slice","bind","node","name","indexOf","findExpandables","array","id","classRefs","classLevels","newSpellMods","overalLevel","reduce","total","className","profBonus","classRef","casterProgression","alreadyAdded","find","spellMod","spellcastingAbility","attributeModifier","spellAttackBonus","dc","mod","spellMods","spellsKnownObj","updateSpellStats","casterSourceRef","isSubclass","tableGroups","classTableGroups","casterName","subclassLevel","subclasses","subclassDef","i","shortName","subclassTableGroups","spellsKnownOrPrepared","cantripsKnown","warlockSpellLevel","warlockSpellSlots","spellsKnowPreparedType","forEach","tableGroup","colLabels","spellsColIndex","findIndex","label","rows","cantripsColIndex","warlockSpellLevelColIndex","warlockSpellLevelMatches","match","parseInt","warlockSpellSlotsColIndex","levelMultiplier","Math","floor","subclassName","classSpellList","key","subclassSpellList","divineAffinityChoice","map","isSubclassSpell","Set","concat","divineSoulSpellList","spellTable","title","spellSlotEntries","spellSlots","hasCantrips","oldSpellsPrepared","JSON","parse","stringify","oldCantripsPrepared","preparedCantrips","index","spellList","sort","a","b","isCantrip","isPrepared","hasChildren","parentClass","parentLevel","isWarlock","levelObj","currentSlots","some","item","slots","current","keys","max","maxCantrips","currentCantrips","classObj","spellPrepType","multiclassingLevels","newSpellDisplay","multiclassLevel","isMulticlass","spellClass","spellLevel","adjIndex","multiclassSlotsArray","currentWarlockSlots","dispatchEvent","CustomEvent","bubbles","composed","stopPropagation","model","_toggleCantripPrepared","_isPreparedSpell","currentPreparedCount","_currentSpellsKnownCount","maxPreparedCount","_maxSpellsKnownCount","spellsKnownCopy","splice","_flashPreparedButton","_isPreparedCantrip","_currentCantripsKnownCount","_maxCantripsKnownCount","buttonEl","classList","add","remove","isInput","maxSlots","checked","_setSpellSlotsChecked","count","el","checkboxes","querySelectorAll","spellName","prepareType","data","spLevelToFull","tooltipStr","target","dataset","tooltip","hasTooltip","Array","from","childEl","matches","window","tooltipCloseListener","tooltips","tooltipEl","spellParent","ritual","d","concentration"],"mappings":"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","file":"7.bundle.js","sourcesContent":["import './theme/lumo/vaadin-checkbox.js';\nexport * from './src/vaadin-checkbox.js';\n","import EntryRenderer from \"../util/entryrender.js\";\r\nimport Parser from \"../util/Parser.js\";\r\n\r\nconst renderer = new EntryRenderer();\r\nconst stats_wrapper = `\r\n\t<div class=\"stats-wrapper margin-bottom_large\">\r\n\t</div>`;\r\n\r\nfunction renderSelection(spell, rootEl) {\r\n\trootEl.querySelector(\".selection-wrapper\").innerHTML = stats_wrapper;\r\n\r\n\tconst spellHtmlString = spellHtml(spell);\r\n\r\n\trootEl.querySelector(\".stats-wrapper\").innerHTML = spellHtmlString;\r\n}\r\n\r\nfunction spellHtml(spell) {\r\n\tconst renderStack = [];\r\n\trenderStack.push(`<div class=\"margin-bottom_med\"><span class=\"stats-source source${spell.source}\" title=\"${Parser.sourceJsonToFull(spell.source)}\">${Parser.sourceJsonToAbv(spell.source)}</div>`);\r\n\trenderStack.push(`<div class=\"margin-bottom_med\"><span>${Parser.spLevelSchoolMetaToFull(spell.level, spell.school, spell.meta)}</span></div>`);\r\n\trenderStack.push(`<div class=\"margin-bottom_med\"><span class=\"stat-name\">Casting Time: </span>${Parser.spTimeListToFull(spell.time)}</div>`);\r\n\trenderStack.push(`<div class=\"margin-bottom_med\"><span class=\"stat-name\">Range: </span>${Parser.spRangeToFull(spell.range)}</div>`);\r\n\trenderStack.push(`<div class=\"margin-bottom_med\"><span class=\"stat-name\">Components: </span>${Parser.spComponentsToFull(spell.components)}</div>`);\r\n\trenderStack.push(`<div class=\"margin-bottom_med\"><span class=\"stat-name\">Duration: </span>${Parser.spDurationToFull(spell.duration)}</div>`);\r\n\trenderStack.push(`<div class='text'>`);\r\n\r\n\trenderer.recursiveEntryRender({type: \"entries\", entries: spell.entries}, renderStack, 1);\r\n\r\n\tif (spell.entriesHigherLevel) {\r\n\t\tconst higherLevelsEntryList = {type: \"entries\", entries: spell.entriesHigherLevel};\r\n\t\trenderer.recursiveEntryRender(higherLevelsEntryList, renderStack, 2);\r\n\t}\r\n\r\n\trenderStack.push(`</div>`);\r\n\trenderStack.push(`<div class=\"margin-bottom_med\"><span class=\"stat-name\">Classes: </span>${Parser.spMainClassesToFull(spell.classes)}</div>`);\r\n\r\n\tif (spell.classes.fromSubclass) {\r\n\t\tconst currentAndLegacy = Parser.spSubclassesToCurrentAndLegacyFull(spell.classes);\r\n\t\trenderStack.push(`<div class=\"margin-bottom_med\"><span class=\"stat-name\">Subclasses: </span>${currentAndLegacy[0]}</div>`);\r\n\t\tif (currentAndLegacy[1]) {\r\n\t\t\trenderStack.push(`<div class=\"mdc-theme--text-disabled-on-background margin-bottom_med\"><span class=\"stat-name\">Subclasses (legacy): </span>${currentAndLegacy[1]}</div>`);\r\n\t\t}\r\n\t}\r\n\r\n\tif (spell.scrollNote) {\r\n\t\trenderStack.push(`<div class=\"mdc-theme--text-disabled-on-background\">`);\r\n\t\trenderer.recursiveEntryRender(\r\n\t\t\t`{@italic Note: Both the {@class ${\"Fighter\"} (${\"Eldritch Knight\"})} and the {@class ${\"Rogue\"} (${\"Arcane Trickster\"})} spell lists include all {@class ${\"Wizard\"}} spells. Spells of 5th level or higher may be cast with the aid of a spell scroll or similar.}`\r\n\t\t\t, renderStack, 2);\r\n\t\trenderStack.push(`</div>`);\r\n\t}\r\n\r\n\treturn renderStack.join('');\r\n}\r\n\r\nexport { renderSelection, spellHtml };","import './theme/lumo/vaadin-text-field.js';\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\nconst $_documentContainer = html`<dom-module id=\"lumo-grid-tree-toggle\" theme-for=\"vaadin-grid-tree-toggle\">\n  <template>\n    <style>\n      :host {\n        --vaadin-grid-tree-toggle-level-offset: 2em;\n        align-items: center;\n        vertical-align: middle;\n        margin-left: calc(var(--lumo-space-s) * -1);\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      :host(:not([leaf])) {\n        cursor: default;\n      }\n\n      [part=\"toggle\"] {\n        display: inline-block;\n        font-size: 1.5em;\n        line-height: 1;\n        width: 1em;\n        height: 1em;\n        text-align: center;\n        color: var(--lumo-contrast-50pct);\n        /* Increase touch target area */\n        padding: calc(1em / 3);\n        margin: calc(1em / -3);\n      }\n\n      :host(:not([dir=\"rtl\"])) [part=\"toggle\"] {\n        margin-right: 0;\n      }\n\n      @media (hover: hover) {\n        :host(:hover) [part=\"toggle\"] {\n          color: var(--lumo-contrast-80pct);\n        }\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"lumo-icons\";\n        display: inline-block;\n        height: 100%;\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-right);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-right);\n        transform: rotate(90deg);\n      }\n\n      /* Experimental support for hierarchy connectors, using an unsupported selector */\n      :host([theme~=\"connectors\"]) #level-spacer {\n        position: relative;\n        z-index: -1;\n        font-size: 1em;\n        height: 1.5em;\n      }\n\n      :host([theme~=\"connectors\"]) #level-spacer::before {\n        display: block;\n        content: \"\";\n        margin-top: calc(var(--lumo-space-m) * -1);\n        height: calc(var(--lumo-space-m) + 3em);\n        background-image: linear-gradient(to right, transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px), var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px));\n        background-size: var(--vaadin-grid-tree-toggle-level-offset) var(--vaadin-grid-tree-toggle-level-offset);\n        background-position: calc(var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px) 0;\n      }\n\n      /* RTL specific styles */\n\n      :host([dir=\"rtl\"]) {\n        margin-left: 0;\n        margin-right: calc(var(--lumo-space-s) * -1);\n      }\n\n      :host([dir=\"rtl\"]) [part=\"toggle\"] {\n        margin-left: 0;\n      }\n\n      :host([dir=\"rtl\"][expanded]) [part=\"toggle\"]::before {\n        transform: rotate(-90deg);\n      }\n\n      :host([dir=\"rtl\"][theme~=\"connectors\"]) #level-spacer::before {\n        background-image: linear-gradient(to left, transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px), var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px));\n        background-position: calc(100% - (var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px)) 0;\n      }\n\n      :host([dir=\"rtl\"]:not([expanded])) [part=\"toggle\"]::before,\n      :host([dir=\"rtl\"][expanded]) [part=\"toggle\"]::before {\n        content: var(--lumo-icons-angle-left);\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport '@polymer/polymer/lib/elements/custom-style.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { DirMixin } from '@vaadin/vaadin-element-mixin/vaadin-dir-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { microTask } from '@polymer/polymer/lib/utils/async.js';\nconst $_documentContainer = document.createElement('template');\n\n$_documentContainer.innerHTML = `<custom-style>\n  <style>\n    @font-face {\n      font-family: \"vaadin-grid-tree-icons\";\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAQkAA0AAAAABrwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAECAAAABoAAAAcgHwa6EdERUYAAAPsAAAAHAAAAB4AJwAOT1MvMgAAAZQAAAA/AAAAYA8TBIJjbWFwAAAB8AAAAFUAAAFeGJvXWmdhc3AAAAPkAAAACAAAAAgAAAAQZ2x5ZgAAAlwAAABLAAAAhIrPOhFoZWFkAAABMAAAACsAAAA2DsJI02hoZWEAAAFcAAAAHQAAACQHAgPHaG10eAAAAdQAAAAZAAAAHAxVAgBsb2NhAAACSAAAABIAAAASAIAAVG1heHAAAAF8AAAAGAAAACAACgAFbmFtZQAAAqgAAAECAAACTwflzbdwb3N0AAADrAAAADYAAABZQ7Ajh3icY2BkYGAA4twv3Vfi+W2+MnCzMIDANSOmbGSa2YEZRHEwMIEoAAoiB6sAeJxjYGRgYD7w/wADAwsDCDA7MDAyoAI2AFEEAtIAAAB4nGNgZGBg4GBgZgDRDAxMDGgAAAGbABB4nGNgZp7JOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDA+38d84P8BBgdmIAapQZJVYGAEAGc/C54AeJxjYYAAxlAIzQTELAwMBxgZGB0ACy0BYwAAAHicY2BgYGaAYBkGRgYQiADyGMF8FgYbIM3FwMHABISMDArP9/3/+/8/WJXC8z0Q9v8nEp5gHVwMMMAIMo+RDYiZoQJMQIKJARUA7WBhGN4AACFKDtoAAAAAAAAAAAgACAAQABgAJgA0AEIAAHichYvBEYBADAKBVHBjBT4swl9KS2k05o0XHd/yW1hAfBFwCv9sIlJu3nZaNS3PXAaXXHI8Lge7DlzF7C1RgXc7xkK6+gvcD2URmQB4nK2RQWoCMRiFX3RUqtCli65yADModOMBLLgQSqHddRFnQghIAnEUvEA3vUUP0LP0Fj1G+yb8R5iEhO9/ef/7FwFwj28o9EthiVp4hBlehcfUP4Ur8o/wBAv8CU+xVFvhOR7UB7tUdUdlVRJ6HnHWTnhM/V24In8JT5j/KzzFSi2E53hUz7jCcrcIiDDwyKSW1JEct2HdIPH1DFytbUM0PofWdNk5E5oUqb/Q6HHBiVGZpfOXkyUMEj5IyBuNmYZQjBobfsuassvnkKLe1OuBBj0VQ8cRni2xjLWsHaM0jrjx3peYA0/vrdmUYqe9iy7bzrX6eNP7Jh1SijX+AaUVbB8AAHicY2BiwA84GBgYmRiYGJkZmBlZGFkZ2djScyoLMgzZS/MyDQwMwLSruZMzlHaB0q4A76kLlwAAAAEAAf//AA94nGNgZGBg4AFiMSBmYmAEQnYgZgHzGAAD6wA2eJxjYGBgZACCKxJigiD6mhFTNowGACmcA/8AAA==) format('woff');\n      font-weight: normal;\n      font-style: normal;\n    }\n  </style>\n</custom-style>`;\n\ndocument.head.appendChild($_documentContainer.content);\n/**\n * `<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\n * that provides toggle and level display functionality for the item tree.\n *\n * #### Example:\n * ```html\n * <vaadin-grid-column>\n *   <template class=\"header\">Package name</template>\n *   <template>\n *     <vaadin-grid-tree-toggle\n *         leaf=\"[[!item.hasChildren]]\"\n *         expanded=\"{{expanded}}\"\n *         level=\"[[level]]\">\n *       [[item.name]]\n *     </vaadin-grid-tree-toggle>\n *   </template>\n * </vaadin-grid-column>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ---|---\n * `toggle` | The tree toggle icon\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * ---|---|---\n * `expanded` | When present, the toggle is expanded | :host\n * `leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n *\n * The following custom CSS properties are available on\n * the `<vaadin-grid-tree-toggle>` element:\n *\n * Custom CSS property | Description | Default\n * ---|---|---\n * `--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`\n *\n * @extends PolymerElement\n * @mixes ThemableMixin\n */\nclass GridTreeToggleElement extends ThemableMixin(DirMixin(PolymerElement)) {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: inline-flex;\n        align-items: baseline;\n\n        /* CSS API for :host */\n        --vaadin-grid-tree-toggle-level-offset: 1em;\n\n        /*\n          ShadyCSS seems to polyfill :dir(rtl) only for :host, thus using\n          a host custom CSS property for ltr/rtl toggle icon choice.\n         */\n        ---collapsed-icon: \"\\\\e7be\\\\00a0\";\n      }\n\n      :host(:dir(rtl)) {\n        ---collapsed-icon: \"\\\\e7bd\\\\00a0\";\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:not([leaf])) {\n        cursor: pointer;\n      }\n\n      #level-spacer,\n      [part=\"toggle\"] {\n        flex: none;\n      }\n\n      #level-spacer {\n        display: inline-block;\n        width: calc(var(---level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\n      }\n\n      [part=\"toggle\"]::before {\n        font-family: \"vaadin-grid-tree-icons\";\n        line-height: 1em; /* make icon font metrics not affect baseline */\n      }\n\n      :host(:not([expanded])) [part=\"toggle\"]::before {\n        content: var(---collapsed-icon);\n      }\n\n      :host([expanded]) [part=\"toggle\"]::before {\n        content: \"\\\\e7bc\\\\00a0\"; /* icon glyph + single non-breaking space */\n      }\n\n      :host([leaf]) [part=\"toggle\"] {\n        visibility: hidden;\n      }\n    </style>\n\n    <span id=\"level-spacer\"></span>\n    <span part=\"toggle\"></span>\n    <slot></slot>\n`;\n  }\n\n  static get is() {\n    return 'vaadin-grid-tree-toggle';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Current level of the tree represented with a horizontal offset\n       * of the toggle button.\n       */\n      level: {\n        type: Number,\n        value: 0,\n        observer: '_levelChanged'\n      },\n\n      /**\n       * Hides the toggle icon and disables toggling a tree sublevel.\n       */\n      leaf: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * Sublevel toggle state.\n       */\n      expanded: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n\n    this.addEventListener('click', e => this._onClick(e));\n  }\n\n  _onClick(e) {\n    if (this.leaf) {\n      return;\n    }\n\n    e.preventDefault();\n    this.expanded = !this.expanded;\n  }\n\n  _levelChanged(level) {\n    const value = Number(level).toString();\n    this.style['---level'] = value;\n    // Async is to make DOM updates applied before evaluating the style\n    // update, required for polyfilled RTL support in MSIE and Edge.\n    this._debouncerUpdateLevel = Debouncer.debounce(\n      this._debouncerUpdateLevel,\n      microTask,\n      () => this.updateStyles({'---level': value})\n    );\n  }\n}\n\ncustomElements.define(GridTreeToggleElement.is, GridTreeToggleElement);\n\nexport { GridTreeToggleElement };\n","import { PolymerElement,html } from \"@polymer/polymer\";\nimport \"@vaadin/vaadin-grid\";\nimport \"@vaadin/vaadin-grid/vaadin-grid-tree-toggle\";\nimport { getCharacterChannel, getSelectedCharacter, getClassReferences, getClassLevelGroups, toggleSpellPrepared, saveCharacter, getAttributeModifier, isSpellPreparedFromObj, setSpellSlots, getSpellSlots, toggleCantripPrepared, getSubclassChoiceLevel, getSubclassChoice } from \"../../../util/charBuilder\";\nimport { filterModel } from \"../../../util/data\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { spellHtml } from \"../../../js/spells\";\nimport { findInPath, util_capitalize, util_capitalizeAll, getProfBonus } from \"../../../js/utils\";\nimport Parser from \"../../../util/Parser\";\nimport \"@vaadin/vaadin-checkbox\";\nimport \"@vaadin/vaadin-text-field\";\n\n// todo:\n// compute spell slots for multiclassing, warlock ++\n\nclass DndCharacterBuilderSpells extends PolymerElement {\n  \n  static get properties() {\n    return {\n      spellsKnown: {\n        type: Object,\n        value: {}\n      },\n      preparedSpells: {\n        type: Object,\n        value: {}\n      },\n      noContentMessage: {\n        type: Boolean,\n        value: false\n      },\n      isEditMode: {\n        type: Boolean,\n        value: false\n      },\n      filterStr: {\n        type: String,\n        value: '',\n        observer: '_filterChange'\n      }\n    };\n  }\n\n  _filterChange() {\n    if (this.filterStr.length) {\n      if (!this.oldExpanded) {\n        this.oldExpanded = this.$.grid.expandedItems;\n      }\n      this.expandAll();\n      this.$.grid.clearCache();\n      setTimeout(() => {\n        this.expandAll();\n      }, 10);\n    } else {\n      if (this.oldExpanded) {\n        this.$.grid.expandedItems = this.oldExpanded;\n        this.oldExpanded = undefined;\n      }\n      this.$.grid.clearCache();\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    this.refresh = true;\n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\",this.characterChangeHandler);\n\n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n      this.refresh = true;\n      this.updateFromCharacter(getSelectedCharacter());\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    getCharacterChannel().removeEventListener(\"character-selected\",this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  ready() {\n    super.ready();\n\n    this.multiclassSlotsDef = [\n      [2],\n      [3],\n      [4,2],\n      [4,3],\n      [4,3,2],\n      [4,3,3],\n      [4,3,3,1],\n      [4,3,3,2],\n      [4,3,3,3,1],\n      [4,3,3,3,2],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1,1],\n      [4,3,3,3,3,1,1,1,1],\n      [4,3,3,3,3,2,1,1,1],\n      [4,3,3,3,3,2,2,1,1]\n    ];\n\n    this.fullCasterSlotsDef = [];\n\n    this.halfCasterSlotsDef = [];\n    \n    this.thirdCasterSlotsDef = [];\n\n    setTimeout(() => {\n      const grid = this.$.grid;\n\n      grid.dataProvider = ((params, callback) => {\n        const startIndex = params.page * params.pageSize;\n        let children = params.parentItem ? params.parentItem.children : this.spellDisplay;\n        if (this.filterStr.length) {\n          children = children.filter((child) => {\n            return this.hasDecendentWithFilter(child, this.filterStr.toLowerCase()) \n          });\n        }\n        if (children && children.length) {\n          const page = children.slice(startIndex, startIndex + params.pageSize);\n          callback(page, children.length);\n        }\n      }).bind(this);\n    }, 0);\n  }\n\n  hasDecendentWithFilter(node, filterStr) {\n    if (!node.name || node.name.toLowerCase().indexOf(filterStr) > -1) {\n      return true;\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        return this.hasDecendentWithFilter(child, filterStr);\n      }\n    }\n    return false;\n  }\n\n  clearFilterStr() {\n    this.filterStr = '';\n  }\n\n  expandAll() {\n    this.$.grid.expandedItems = this.findExpandables(this.spellDisplay);\n  }\n\n  findExpandables(node, array = []) {\n    if (node.id === 'level' || node.id === 'class') {\n      array.push(node);\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        this.findExpandables(child, array);\n      }\n    }\n    return array;\n  }\n\n  async updateSpellStats(classRefs, classLevels) {\n    if (classLevels && classRefs) {\n      // DCs and Spell Modifier\n      const newSpellMods = [];\n      const overalLevel = Object.entries(classLevels).reduce((total, [className, level]) => total + level, 0);\n      const profBonus = getProfBonus(overalLevel);\n\n      for (const [className, level] of Object.entries(classLevels)) {\n        const classRef = classRefs[className];\n        if (classRef.casterProgression) {\n          const alreadyAdded = newSpellMods.find(spellMod => classRef.spellcastingAbility === spellMod.spellcastingAbility);\n          if (alreadyAdded) {\n            alreadyAdded.classes.push(className);\n          } else {\n            const attributeModifier = await getAttributeModifier(classRef.spellcastingAbility);\n            const spellAttackBonus = attributeModifier + profBonus\n            const dc = 8 + spellAttackBonus;\n            newSpellMods.push({ classes: [className], mod: attributeModifier, spellAttackBonus, dc, spellcastingAbility: classRef.spellcastingAbility});\n          }\n        }\n      }\n\n      this.spellMods = newSpellMods;\n    } else {\n      this.spellMods = [];\n    }\n  }\n\n  async updateFromCharacter(character) {\n    if (character && this.refresh) {\n      this.noContentMessage = true;\n      const classRefs = await getClassReferences(character),\n        classLevels = getClassLevelGroups(character),\n        expandedItems = [],\n        spellsKnownObj = {};\n      let spellDisplay = [];\n\n      this.updateSpellStats(classRefs, classLevels);\n\n      for (const [ className, level ] of Object.entries(classLevels)) {\n        const classRef = classRefs[className];\n        let casterSourceRef = classRef;\n        let isSubclass = false;\n        let tableGroups = classRef.classTableGroups;\n        let casterName = className;\n\n        // Checking the class first for a caster progression, then checking subclass\n        if (!casterSourceRef.casterProgression) {\n          const subclassLevel = getSubclassChoiceLevel(classRef);\n          if (level >= subclassLevel && character.subclasses && character.subclasses[className] && classRef.subclasses && classRef.subclasses.length) {\n            const subclassDef = classRef.subclasses.find(i => character.subclasses[className].name === i.name);\n            if (subclassDef && subclassDef.casterProgression) {\n              // replacing caster parsing references with that from subclass \n              casterSourceRef = subclassDef;\n              casterName = subclassDef.shortName;\n              tableGroups = subclassDef.subclassTableGroups;\n              isSubclass = true;\n            }\n          }\n        }\n\n        if (casterSourceRef.casterProgression) {\n          this.noContentMessage = false;\n          let spellsKnownOrPrepared;\n          let spellsKnowPreparedType = 'known';\n          let cantripsKnown;\n          let warlockSpellLevel;\n          let warlockSpellSlots;\n\n          // Getting spells + cantrips known info from table, also getting warlock info from table\n          tableGroups.forEach((tableGroup) => {\n            if (tableGroup.colLabels && tableGroup.colLabels.length) {\n              const spellsColIndex = tableGroup.colLabels.findIndex((label) => label.toLowerCase().indexOf(\"spells known\") > -1);\n              if (spellsColIndex > -1 && tableGroup.rows && tableGroup.rows.length > level - 1) {\n                spellsKnownOrPrepared = tableGroup.rows[level - 1][spellsColIndex];\n              }\n              const cantripsColIndex = tableGroup.colLabels.findIndex((label) => label.toLowerCase().indexOf(\"cantrips known\") > -1);\n              if (cantripsColIndex > -1 && tableGroup.rows && tableGroup.rows.length > level - 1) {\n                cantripsKnown = tableGroup.rows[level - 1][cantripsColIndex];\n              }\n              const warlockSpellLevelColIndex = tableGroup.colLabels.findIndex((label) => label.toLowerCase().indexOf(\"slot level\") > -1);\n              if (warlockSpellLevelColIndex > -1 && tableGroup.rows && tableGroup.rows.length > level - 1) {\n                const warlockSpellLevelString = tableGroup.rows[level - 1][warlockSpellLevelColIndex];\n                const warlockSpellLevelMatches = warlockSpellLevelString.match(/(\\d+)/g);\n                if (warlockSpellLevelMatches && warlockSpellLevelMatches.length) {\n                  warlockSpellLevel = parseInt(warlockSpellLevelMatches[0]);\n                }\n              }\n              const warlockSpellSlotsColIndex = tableGroup.colLabels.findIndex((label) => label.toLowerCase().indexOf(\"spell slots\") > -1);\n              if (warlockSpellSlotsColIndex > -1 && tableGroup.rows && tableGroup.rows.length > level - 1) {\n                warlockSpellSlots = tableGroup.rows[level - 1][warlockSpellSlotsColIndex];\n              }\n            }\n          });\n\n          // otherwise compute spells prepared\n          if (spellsKnownOrPrepared === undefined) {\n            spellsKnowPreparedType = 'prepared';\n            // todo, check 1/3 caster progression\n            const levelMultiplier = casterSourceRef.casterProgression === 'full' ? 1 : casterSourceRef.casterProgression === '1/3' ? 0.33 : 0.5;\n            const attributeModifier = await getAttributeModifier(casterSourceRef.spellcastingAbility);\n            spellsKnownOrPrepared = Math.floor(level * levelMultiplier) + attributeModifier;\n            spellsKnownOrPrepared = spellsKnownOrPrepared < 1 ? 1 : spellsKnownOrPrepared;\n          }\n\n          /* SPELL LISTS */\n          // Getting class spell list\n          let classSpellList = [];\n          let subclassName;\n          \n          if (isSubclass) {\n            subclassName = casterSourceRef.shortName;\n          } else {\n            classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: casterSourceRef.name, source: casterSourceRef.source } } );\n\n            const subclassLevel = getSubclassChoiceLevel(classRef);\n            if (level >= subclassLevel) {\n              subclassName = character.subclasses && character.subclasses[className] ? character.subclasses[className].shortName : '';\n            }\n          }\n\n          // Getting subclass spell list (always prepared)\n          if (subclassName) {\n            if (subclassName === 'Eldritch Knight') {\n              classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'wizard', source: 'phb' } } );\n            }\n            let subclassSpellList = await filterModel('spells', { key: 'classes.fromSubclass', value: { 'subclass.name': subclassName, 'class.name': className, 'class.source': classRef.source } } );\n            if (subclassName === 'Divine Soul') {\n              let divineAffinityChoice = getSubclassChoice(className.toLowerCase(), subclassName.toLowerCase(), level, 'Divine Magic Affinity', character);\n              if (divineAffinityChoice) {\n                subclassSpellList = subclassSpellList.filter(spell => divineAffinityChoice.indexOf(spell.name) > -1);\n              } else {\n                subclassSpellList = [];\n              }\n            }\n            subclassSpellList = subclassSpellList.map(spell => ({ ...spell, isSubclassSpell: true }));\n            classSpellList = [...new Set(classSpellList.concat(subclassSpellList))];\n          }\n          if (subclassName === 'Divine Soul') {\n            let divineSoulSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'cleric', source: 'phb' } } );\n            classSpellList = [...new Set(classSpellList.concat(divineSoulSpellList))];\n          }\n\n          // Getting spell slots per level array\n          const spellTable = tableGroups.find((tableGroup) => tableGroup.title === \"Spell Slots per Spell Level\");\n          let spellSlotEntries;\n          if (spellTable) {\n            spellSlotEntries = spellTable.rows[level - 1].filter((spellSlots) => spellSlots !== 0);\n          } else {\n            // If no spell slots per level, then we're a warlock, get spell entries for\n            // warlocks with zero spell slots at each level (pact slots will be added later)\n            spellSlotEntries = [];\n            for (let i = 0; i < warlockSpellLevel; i++) {\n              spellSlotEntries.push(0);\n            }\n          }\n\n          // Adding cantrips entry\n          const hasCantrips = cantripsKnown ? 0 : 1;\n          if (cantripsKnown) {\n            spellSlotEntries = [0].concat(spellSlotEntries);\n          }\n\n          // Clearing prepared spells to filter out those that can no longer be prepared\n          let oldSpellsPrepared = JSON.parse(JSON.stringify(character.preparedSpells));\n          let oldCantripsPrepared = JSON.parse(JSON.stringify(character.preparedCantrips));\n          character.preparedSpells[casterName] = {};\n          character.preparedCantrips[casterName] = {};\n\n          // Generating hierarchical structure of classes > levels > spells > spellDef\n          const spellSlots = spellSlotEntries.map((spellSlots, index) => {\n            if (spellSlots !== -1) {\n              let spellList = classSpellList\n                .filter((spell) => {\n                  return spell.level === index + hasCantrips;\n                })\n                .sort((a, b) => {\n                  if (a.name < b.name) { return -1; }\n                  if (a.name > b.name) { return 1; }\n                  return 0;\n                })\n                .map(spell => {\n                  const isCantrip = index + hasCantrips === 0;\n                  const isPrepared = isCantrip ? isSpellPreparedFromObj(casterName, spell, oldCantripsPrepared) : isSpellPreparedFromObj(casterName, spell, oldSpellsPrepared);\n                  if (isPrepared) {\n                    if (isCantrip) {\n                      character.preparedCantrips[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    } else {\n                      character.preparedSpells[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    }\n                  }\n                  if (this.isEditMode || isPrepared || spell.isSubclassSpell) {\n                    return {\n                      id: 'spell',\n                      name: spell.name, \n                      children: [{...spell, hasChildren: false, id: 'spelldef', parentClass: casterName, parentLevel: index + hasCantrips} ],\n                      hasChildren: true,\n                      parentClass: casterName,\n                      parentLevel: index + hasCantrips,\n                      isCantrip,\n                      isSubclassSpell: spell.isSubclassSpell,\n                      isWarlock: !!warlockSpellLevel\n                    };\n                  } else {\n                    return undefined;\n                  }\n                })\n                .filter((spell) => spell !== undefined);\n              const levelObj = {\n                id: 'level',\n                level: index + hasCantrips,\n                spellSlots,\n                currentSlots: getSpellSlots(index + hasCantrips),\n                children: spellList,\n                hasChildren: spellList.length > 0,\n                parentClass: casterName,\n                isWarlock: !!warlockSpellLevel\n              };\n              const isExpanded = this.$.grid.expandedItems.some(item => item.id === 'level' && item.level === levelObj.level && item.parentClass === levelObj.parentClass);\n              if (isExpanded) {\n                expandedItems.push(levelObj);\n              }\n              return levelObj;\n            } else {\n              return null\n            }\n          }).filter(slots => slots !== null);\n\n          spellsKnownObj[casterName] = {\n            current: character.preparedSpells && character.preparedSpells[casterName] ? Object.keys(character.preparedSpells[casterName]) : [],\n            max: spellsKnownOrPrepared,\n            type: spellsKnowPreparedType,\n            maxCantrips: cantripsKnown,\n            currentCantrips: character.preparedCantrips && character.preparedCantrips[casterName] ? Object.keys(character.preparedCantrips[casterName]) : []\n          };\n\n          if (spellSlots.length) {\n            const classObj = {\n              id: 'class',\n              className: casterName,\n              level,\n              hasCantrips,\n              children: spellSlots,\n              spellsKnown: spellsKnownOrPrepared,\n              hasChildren: spellSlots.length > 0,\n              spellPrepType: spellsKnowPreparedType,\n              multiclassingLevels: isSubclass ? 0 : Math.floor((classRef.casterProgression === 'full' ? 1 : 0.5) * level),\n              isWarlock: !!warlockSpellLevel,\n              warlockSpellLevel,\n              warlockSpellSlots\n            };\n            expandedItems.push(classObj);\n            spellDisplay.push(classObj);\n          }\n        }\n      }\n\n      // sorting most levels first\n      spellDisplay.sort((a, b) => a.children.length - b.children.length);\n\n      // Changing structure for non-edit mode & multiclassing\n      if (!this.isEditMode) {\n        let newSpellDisplay = [];\n        if (spellDisplay.length) {\n          let multiclassLevel = 0,\n            isMulticlass = -1,\n            warlockSpellLevel,\n            warlockSpellSlots;\n\n          // Combine all class spell levels into single references\n          for (let spellClass of spellDisplay) {\n            if (!spellClass.isWarlock) {\n              multiclassLevel += spellClass.multiclassingLevels;\n              isMulticlass ++;\n            } else {\n              warlockSpellLevel = spellClass.warlockSpellLevel;\n              warlockSpellSlots = spellClass.warlockSpellSlots;\n            }\n\n            spellClass.children.forEach((spellLevel, index) => {\n              const adjIndex = index + spellClass.hasCantrips;\n              if (!newSpellDisplay[adjIndex]) {\n                newSpellDisplay[adjIndex] = spellLevel;\n              } else if (spellLevel.children[index]) {\n                newSpellDisplay[adjIndex].children = newSpellDisplay[adjIndex].children.concat(spellLevel.children);\n              }\n            });\n          }\n\n          // remove index 0 if no cantrips\n          newSpellDisplay = newSpellDisplay.filter(i => i !== undefined);\n\n          // Changing spell slots for multiclass rules\n          const hasCantrips = newSpellDisplay[0].level === 0;\n          if (isMulticlass > 0) {\n            const multiclassSlotsArray = this.multiclassSlotsDef[multiclassLevel + 1];\n\n            for (let i = (hasCantrips ? 1 : 0); i < multiclassSlotsArray.length; i++) {\n              const spellSlots =  multiclassSlotsArray[i - (hasCantrips ? 1 : 0)];\n              if (newSpellDisplay[i]) {\n                newSpellDisplay[i].spellSlots = spellSlots;\n              } else {\n                newSpellDisplay.push({\n                  children: [],\n                  currentSlots: getSpellSlots(i + 1 - (hasCantrips ? 1 : 0)),\n                  hasChildren: false,\n                  id: \"level\",\n                  isWarlock: false,\n                  level: i,\n                  spellSlots\n                });\n              }\n            }\n          }\n\n          // Adding warlock slots\n          if (warlockSpellLevel) {\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].warlockSpellSlots = warlockSpellSlots;\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].currentWarlockSlots = character.warlockSpellSlots || 0;\n          }\n        }\n        spellDisplay = newSpellDisplay;\n      }\n\n      this.refresh = false;\n      saveCharacter(character);\n      this.spellsKnown = spellsKnownObj;\n      this.spellDisplay = spellDisplay;\n      this.expandedItems = expandedItems;\n      this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n      this.$.grid.clearCache();\n    }\n  }\n\n  _renderSpell(spell) {\n    return spellHtml(spell);\n  }\n\n  _toggleSpellPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isSubclassSpell = e.model.item.isSubclassSpell;\n    if (!isSubclassSpell && this.isEditMode) {\n      const isCantrip = e.model.item.isCantrip;\n      if (isCantrip) {\n        this._toggleCantripPrepared(e);\n      } else {\n        const className = e.model.item.parentClass;\n        const spell = e.model.item.children[0];\n        const isPrepared = this._isPreparedSpell(this.spellsKnown, className, spell.name);\n        const currentPreparedCount = this._currentSpellsKnownCount(className, this.spellsKnown);\n        const maxPreparedCount = this._maxSpellsKnownCount(className, this.spellsKnown);\n\n        if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n          let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n          if (isPrepared) {\n            const index = spellsKnownCopy[className].current.indexOf(spell.name);\n            spellsKnownCopy[className].current.splice(index, 1);\n          } else {\n            spellsKnownCopy[className].current.push(spell.name);\n          }\n          this.spellsKnown = spellsKnownCopy;\n          toggleSpellPrepared(className, spell);\n        } else if (currentPreparedCount >= maxPreparedCount) {\n          this._flashPreparedButton(findInPath('button', e));\n        }\n      }\n    }\n  }\n\n  _toggleCantripPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const className = e.model.item.parentClass;\n    const spell = e.model.item.children[0];\n    const isPrepared = this._isPreparedCantrip(this.spellsKnown, className, spell.name);\n    const currentPreparedCount = this._currentCantripsKnownCount(className, this.spellsKnown);\n    const maxPreparedCount = this._maxCantripsKnownCount(className, this.spellsKnown);\n\n    if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n      let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n      if (isPrepared) {\n        const index = spellsKnownCopy[className].currentCantrips.indexOf(spell.name);\n        spellsKnownCopy[className].currentCantrips.splice(index, 1);\n      } else {\n        spellsKnownCopy[className].currentCantrips.push(spell.name);\n      }\n      this.spellsKnown = spellsKnownCopy;\n      toggleCantripPrepared(className, spell);\n    } else if (currentPreparedCount >= maxPreparedCount) {\n      this._flashPreparedButton(findInPath('button', e));\n    }\n  }\n\n  _flashPreparedButton(buttonEl) {\n    if (buttonEl) {\n      buttonEl.classList.add('transition-bg');\n      buttonEl.classList.add('flash-error');\n      setTimeout(() => {\n        buttonEl.classList.remove('flash-error');\n        setTimeout(() => {\n          buttonEl.classList.remove('transition-bg');\n        }, 200);\n      }, 200);\n    }\n  }\n\n  _toggleSpellSlot(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isInput = findInPath('.checkbox-wrap', e);\n    const isWarlock = !!findInPath('[warlock-spell]', e);\n    const currentSlots = isWarlock ? e.model.item.currentWarlockSlots : e.model.item.currentSlots;\n    const maxSlots = isWarlock ? e.model.item.warlockSpellSlots : e.model.item.spellSlots;\n    const level = e.model.item.level;\n\n    if (isInput) {\n      const isChecked = isInput.children[0].checked;\n      if (!isChecked && currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n  \n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    } else {\n      if (currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1;\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n\n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    }\n    \n    if (isWarlock) {\n      this._setSpellSlotsChecked(e.model.item.currentWarlockSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentWarlockSlots, undefined, true);\n    } else {\n      this._setSpellSlotsChecked(e.model.item.currentSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentSlots);\n    }\n  }\n\n  _setSpellSlotsChecked(count, el) {\n    const checkboxes = el.querySelectorAll('vaadin-checkbox');\n    for (let i = 0; i < checkboxes.length; i++) {\n      if (i < count) {\n        checkboxes[i].checked = true;\n      } else {\n        checkboxes[i].checked = false\n      }\n    }\n  }\n\n  _isPreparedClass(spellsKnown, item, isEditMode) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isSubclassSpell = item.isSubclassSpell;\n    if (isSubclassSpell) {\n      return isEditMode ? 'spell-button always-prepared edit-mode' : 'spell-button always-prepared';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isSubclassSpell);\n    if (isPrepared) {\n      return isEditMode ? 'spell-prepared spell-button edit-mode' : 'spell-prepared spell-button';\n    }\n    return isEditMode ? 'spell-button edit-mode' : 'spell-button';\n  }\n\n  _isPreparedSpell(spellsKnown, className, spellName, isSubclassSpell){\n    return isSubclassSpell || spellsKnown[className] && spellsKnown[className].current && spellsKnown[className].current.length && spellsKnown[className].current.indexOf(spellName) > -1;\n  }\n\n  _isPreparedCantrip(spellsKnown, className, spellName){\n    return spellsKnown[className] && spellsKnown[className].currentCantrips && spellsKnown[className].currentCantrips.length && spellsKnown[className].currentCantrips.indexOf(spellName) > -1;\n  }\n\n  _isPreparedText(spellsKnown, item) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isSubclassSpell = item.isSubclassSpell;\n    const prepareType = spellsKnown[className].type;\n    if (isSubclassSpell) {\n      return prepareType === 'known' ? 'Always' : 'Always';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isSubclassSpell);\n    \n    if (isPrepared) {\n      return prepareType === 'known' ? 'Learned' : 'Prepared';\n    } else {\n      return prepareType === 'known' ? 'Learn' : 'Prepare';\n    }\n  }\n\n  _countToArray(count) {\n    const data = [];\n    for (var i = 0; i < count; i++) {\n      data.push(null);\n    }\n    return data;\n  }\n\n  _toLevel(level) {\n    if (level === 0) {\n      return Parser.spLevelToFull(level) + 's';\n    } else {\n      return Parser.spLevelToFull(level) + ' Level';\n    }\n  }\n  \n  _currentSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].current.length;\n    }\n    return 0;\n  }\n\n  _maxSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].max;\n    }\n    return 0;\n  }\n  \n  _currentCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].currentCantrips.length;\n    }\n    return 0;\n  }\n\n  _maxCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].maxCantrips;\n    }\n    return 0;\n  }\n\n  _toggleTooltip(e) {\n    const tooltipStr = e.target.dataset.tooltip;\n    const hasTooltip = Array.from(e.target.children).find((childEl) => childEl.matches('.tooltip'));\n\n    if (!window.tooltipCloseListener) {\n      window.tooltipCloseListener = true;\n      window.tooltips = [];\n      document.addEventListener('click', () => {\n        window.tooltips.forEach((tooltip) => {\n          tooltip.classList.remove('tooltip--open');\n          setTimeout(() => {\n            tooltip.remove();\n          }, 300);\n        });\n        window.tooltips = [];\n      });\n    }\n\n    if (hasTooltip) {\n      hasTooltip.classList.remove('tooltip--open');\n      setTimeout(() => {\n        hasTooltip.remove();\n      }, 300);\n    } else if (tooltipStr) {\n      const tooltipEl = document.createElement('div');\n      tooltipEl.innerHTML = tooltipStr;\n      tooltipEl.classList.add('tooltip');\n      e.target.appendChild(tooltipEl);\n      setTimeout(() => {\n        tooltipEl.classList.add('tooltip--open');\n        window.tooltips.push(tooltipEl);\n      }, 0);\n    }\n  }\n\n  _spellsKnownString(spellPrepType) {\n    return 'Spells ' + util_capitalize(spellPrepType) + ':'\n  }\n\n  _isRitualSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell && spell.meta && spell.meta.ritual;\n  }\n\n  _isConcentrationSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.duration.some((d) => d.concentration);\n  }\n\n  _spellLevel(item) {\n    if (item && item.children && item.children.length && item.children[0].level) {\n      return Parser.spLevelToFull(item.children[0].level);\n    }\n  }\n\n  _isSpellSlotChecked(currentSlots, index) {\n    return index < currentSlots;\n  }\n\n  _spellClassText(parentClass) {\n    return parentClass;//util_capitalizeAll(parentClass);\n  }\n\n  _isEmpty(a) {\n    return !a || !a.length;\n  }\n\n  _hideCheckboxes(spellSlots) {\n    return !spellSlots || spellSlots > 0 && this.isEditMode;\n  }\n\n  _equal(a, b) {\n    return a === b;\n  }\n\n  _hasTwo(a) {\n    return a && a.length && a.length > 1;\n  }\n\n  _join(a) {\n    return a.join(', ');\n  }\n\n  static get template() {\n    return html`\n      <style include='my-styles'>\n        :host {}\n        :host {\n          display: block;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        h2 {\n          font-size: 24px;\n          font-weight: bold;\n          margin: 34px 14px 24px;\n        }\n\n        vaadin-grid-tree-toggle { \n          width: 100%;\n          cursor: pointer;\n        }\n\n        .class-wrap {\n          width: 100%;\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          align-items: center;\n          padding-top: 4px;\n          /* padding-top: 34px;\n          padding-bottom: 8px; */\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n        .class-wrap h3 {\n          font-size: 22px;\n          font-weight: bold;\n        }\n\n        .spells-prepared-text {\n          margin-right: 6px;\n          margin-left: auto;\n        }\n        .prepared-count {\n          color: var(--mdc-theme-secondary);\n          font-weight: bold;\n        }\n        .cantrips-prepared {\n          margin-right: 0;\n        }\n\n        .level-outer-wrap {\n          border-bottom: 1px solid var(--_lumo-grid-secondary-border-color);\n          padding-bottom: 8px;\n          display: flex;\n          height: 32px;\n        }\n\n        .level-wrap {\n          width: 100%;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .slot-checkboxes {\n          cursor: pointer;\n          display: flex;\n          padding: 4px;\n        }\n\n        .slot-checkboxes span {\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .slot-checkboxes .label {\n          padding-left: 8px;\n        }\n\n        vaadin-checkbox {\n          pointer-events: none;\n        }\n\n        .spell-outer-wrap {\n          display: flex;\n        }\n\n        .spell-wrap {\n          width: calc(100% - 100px);\n          margin-left: 24px;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .spell-inner-wrap {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .spell-level {\n          color: var(--mdc-theme-text-disabled-on-background);\n          margin-left: 8px;\n          margin-right: 4px;\n          font-size: 12px;\n        }\n\n        .rit-ind,\n        .conc-ind {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          width: 13px;\n          height: 13px;\n          border-radius: 50%;\n          color: var(--mdc-theme-on-secondary);\n          background-color: var(--mdc-theme-secondary);\n          font-size: 10px;\n          position: relative;\n          bottom: 1px;\n          margin-left: 4px;\n        }\n\n        .rit-ind::before {\n          content: 'R';\n        }\n\n        .conc-ind::before {\n          content: 'C';\n        }\n\n        .spell-def-wrap {\n          font-size: 14px;\n          width: calc(100% - 20px);\n          margin: 0 auto;\n          background: var(--lumo-contrast-10pct);\n          border-radius: 4px;\n          white-space: pre-line;\n        }\n\n        .spell-def-wrap .margin-bottom_med {\n          margin-bottom: 0px !important;\n        }\n\n        .spell-def-wrap .text {\n          margin-top: 16px;\n        }\n\n        .spell-def-wrap p {\n          margin-bottom: 16px;\n        }\n\n        .stats-wrapper {\n          margin: 0 14px;\n        }\n\n        .spell-button {\n          background-color: var(--mdc-theme-text-disabled-on-background);\n          color: var(--mdc-theme-on-secondary);\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 60px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n        }\n        .class-icon {\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 60px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n        }\n        .spell-button.edit-mode {\n          cursor: pointer;\n        }\n        .spell-button.always-prepared {\n          background-color: var(--mdc-theme-secondary-lighter);\n          cursor: not-allowed;\n        }\n        .spell-button.spell-prepared {\n          background-color: var(--mdc-theme-secondary);\n        }\n        .spell-button.flash-error {\n          background-color: var(--mdc-theme-error);\n          transition: background-color 0.2s ease-out;\n        }\n        .spell-button.transition-bg {\n          transition: background-color 0.2s ease-in;\n        }\n        .class-icon {\n          width: auto;\n        }\n\n        .mods {\n          display: flex;\n          flex-wrap: nowrap;\n          justify-content: space-around;\n          margin: 16px 0 8px;\n        }\n        .mod-row {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          font-size: 12px;\n          text-align: center;\n          margin: 0 4px;\n          width: 130px;\n        }\n        .mod-val-wrap {\n          font-size: 16px;\n        }\n        .mod-val:not(:first-child)::before {\n          content: '|';\n          margin-right: 4px;\n        }\n        .mod-label {\n          font-weight: bold;\n        }\n        @media(min-width: 420px) {\n          .mods {\n            justify-content: flex-start;\n          }\n          .mod-row {\n            font-size: 14px;\n          }\n          .mod-val-wrap {\n            font-size: 18px;\n          }\n        }\n\n        .filter {\n          margin-left: 16px;\n\n        }\n\n        .tooltip {\n          position: absolute;\n          background: lightgray;\n          color: black;\n          padding: 2px 10px;\n          border-radius: 4px;\n          white-space: nowrap;\n          left: 8px;\n          opacity: 0;\n          transition: opacity 0.3s ease;\n          border-top-left-radius: 0px;\n        }\n        .tooltip--open {\n          opacity: 1;\n        }\n        .tooltip::after {\n          content: '';\n          height: 0;\n          width: 0;\n          position: absolute;\n          border-left: 5px solid transparent;\n          border-right: 5px solid transparent;\n          border-bottom: 5px solid lightgray;\n          top: -5px;\n          left: 0px;\n        }\n        [data-tooltip] {\n          position: relative;\n        }\n\n        .no-content-message {\n          font-size: 14px;\n          padding: 20px;\n          font-style: italic;\n        }\n      </style>\n\n      <div class=\"header-wrap\" hidden$=\"[[noContentMessage]]\">\n\n        <!-- Spell Mods -->\n        <div class=\"mods\" >\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">+[[item.mod]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">Spell Mod</span>\n          </div>\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">+[[item.spellAttackBonus]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">Spell Atk +</span>\n          </div>\n          <div class=\"mod-row\">\n            <span class=\"mod-val-wrap\">\n              <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                <span class=\"mod-val\" data-tooltip$=\"[[_join(item.classes)]]\" on-mouseover=\"_toggleTooltip\" on-mouseout=\"_toggleTooltip\">[[item.dc]]</span>\n              </template>\n            </span>\n            <span class=\"mod-label\">Spell DC</span>\n          </div>\n        </div>\n\n        <div class=\"filter\">\n          <vaadin-text-field clear-button-visible value=\"{{filterStr}}\" placeholder='Filter'></vaadin-text-field>\n        </div>\n      </div>\n\n      <div class=\"no-content-message\" hidden$=\"[[!noContentMessage]]\">Enter edit mode to add classes and levels.</div>\n\n      <vaadin-grid id=\"grid\" theme=\"no-border no-row-borders\" expanded-items=\"[[expandedItems]]\" height-by-rows hidden$=\"[[noContentMessage]]\">\n        <vaadin-grid-column flex-grow=\"1\">\n          <template>\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'class')]]\">\n                <div class=\"class-wrap\">\n                  <h3>[[item.className]]</h3>\n                  <div class='spells-prepared-text'>\n                    <span>[[_spellsKnownString(item.spellPrepType)]]</span>\n                    <span class='prepared-count'>[[_currentSpellsKnownCount(item.className, spellsKnown)]] / [[_maxSpellsKnownCount(item.className, spellsKnown)]]</span>\n                  </div>\n                </div>\n              </template>\n  \n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'level')]]\">\n                <div class=\"level-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\">\n                    <h4 class=\"level-wrap\">[[_toLevel(item.level)]]</h4>\n                    <div class=\"cantrips-prepared spells-prepared-text\" hidden$=\"[[!_equal(item.level, 0)]]\">\n                      <span>Cantrips Known:</span>\n                      <span class='prepared-count'>[[_currentCantripsKnownCount(item.parentClass, spellsKnown)]] / [[_maxCantripsKnownCount(item.parentClass, spellsKnown)]]</span>\n                    </div>\n                  </vaadin-grid-tree-toggle>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.warlockSpellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\" warlock-spell>\n                    <template is='dom-repeat' items='[[_countToArray(item.warlockSpellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentWarlockSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Pact</span>\n                  </div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.spellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\">\n                    <template is='dom-repeat' items='[[_countToArray(item.spellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Slots</span>\n                  </div>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spell')]]\">\n                <div class=\"spell-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\" class=\"spell-wrap\">\n                    <span class=\"spell-inner-wrap\">[[item.name]]<span class=\"spell-level\" hidden>[[_spellLevel(item)]]</span><span class=\"rit-ind\" title=\"Ritual\" hidden$=\"[[!_isRitualSpell(item)]]\"></span><span class=\"conc-ind\" title=\"Concentration\" hidden$=\"[[!_isConcentrationSpell(item)]]\"></span></span>\n                  </vaadin-grid-tree-toggle>\n                  <button class$=\"[[_isPreparedClass(spellsKnown, item, isEditMode)]]\" hidden$=\"[[!isEditMode]]\" on-click=\"_toggleSpellPrepared\">[[_isPreparedText(spellsKnown, item)]]</button>\n                  <dnd-svg class=\"class-icon\" hidden$=\"[[isEditMode]]\" id='[[_spellClassText(item.parentClass)]]' default-color></dnd-svg>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spelldef')]]\">\n                <div class=\"spell-def-wrap\">\n                  <div class= \"stats-wrapper\" inner-h-t-m-l=\"[[_renderSpell(item)]]\"></div>\n                </div>\n              </template>\n          </template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-spells\",DndCharacterBuilderSpells);\n"],"sourceRoot":""}