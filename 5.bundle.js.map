{"version":3,"sources":["webpack:///./node_modules/@vaadin/number-field/theme/lumo/vaadin-number-field-styles.js","webpack:///./node_modules/@vaadin/number-field/src/vaadin-number-field.js","webpack:///./node_modules/@vaadin/integer-field/src/vaadin-integer-field.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-integer-field.js","webpack:///./node_modules/@vaadin/vaadin-checkbox/src/vaadin-checkbox.js","webpack:///./node_modules/@vaadin/vaadin-text-field/src/vaadin-text-field.js","webpack:///./node_modules/@vaadin/grid/theme/lumo/vaadin-grid-tree-toggle-styles.js","webpack:///./node_modules/@vaadin/grid/src/vaadin-grid-tree-toggle.js"],"names":["numberField","moduleId","hasControls","type","Boolean","value","reflectToAttribute","stepButtonsVisible","min","Number","max","step","super","delegateProps","constraints","this","_setType","tag","localName","slotStyles","$","clearButton","ready","addController","input","_setInputElement","_setFocusElement","stateTarget","ariaTarget","inputElement","_labelController","_tooltipController","setPosition","checkValidity","invalid","e","preventDefault","_decreaseValue","_increaseValue","_incrementValue","incr","disabled","readonly","parseFloat","_getIncrement","newValue","_incrementIsInsideTheLimits","_setValue","String","dispatchEvent","CustomEvent","bubbles","currentValue","multiplier","Math","_getMultiplier","margin","round","number","s","i","indexOf","length","isNaN","_getDecimalCount","sign","newVal","oldVal","_valueChanged","event","key","_onKeyDown","target","composedPath","_hasInputValue","validity","badInput","customElements","define","is","allowedCharPattern","__isInteger","console","warn","__hasOnlyDigits","_stepChanged","test","template","document","createElement","innerHTML","head","appendChild","content","level","observer","leaf","expanded","notify","addEventListener","_onClick","HTMLLabelElement","toString","style","setProperty"],"mappings":"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","file":"5.bundle.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport { fieldButton } from '@vaadin/vaadin-lumo-styles/mixins/field-button.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst numberField = css`\n  :host {\n    width: 8em;\n  }\n\n  :host([step-buttons-visible]:not([theme~='align-right'])) ::slotted(input),\n  :host([has-controls]:not([theme~='align-right'])) ::slotted(input) {\n    text-align: center;\n  }\n\n  [part$='button'][disabled] {\n    opacity: 0.2;\n  }\n\n  :host([step-buttons-visible]) [part='input-field'],\n  :host([has-controls]) [part='input-field'] {\n    padding: 0;\n  }\n\n  [part\\$='button'] {\n    cursor: pointer;\n    font-size: var(--lumo-icon-size-s);\n    width: 1.6em;\n    height: 1.6em;\n  }\n\n  [part\\$='button']::before {\n    margin-top: 0.3em;\n  }\n\n  [part='decrease-button']::before {\n    content: var(--lumo-icons-minus);\n  }\n\n  [part='increase-button']::before {\n    content: var(--lumo-icons-plus);\n  }\n\n  /* RTL specific styles */\n  :host([dir='rtl']:not([theme~='align-right'])) ::slotted(input) {\n    --_lumo-text-field-overflow-mask-image: linear-gradient(to left, transparent, #000 1.25em);\n  }\n`;\n\nregisterStyles('vaadin-number-field', [inputFieldShared, fieldButton, numberField], {\n  moduleId: 'lumo-number-field',\n});\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport { html, PolymerElement } from '@polymer/polymer';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { InputController } from '@vaadin/field-base/src/input-controller.js';\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-number-field', inputFieldShared, { moduleId: 'vaadin-number-field-styles' });\n\n/**\n * `<vaadin-number-field>` is an input field web component that only accepts numeric input.\n *\n * ```html\n * <vaadin-number-field label=\"Balance\"></vaadin-number-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-number-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name         | Description\n * ------------------|-------------------------\n * `increase-button` | Increase (\"plus\") button\n * `decrease-button` | Decrease (\"minus\") button\n *\n * Note, the `input-prevented` state attribute is only supported when `allowedCharPattern` is set.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes InputFieldMixin\n * @mixes SlotStylesMixin\n * @mixes ElementMixin\n * @mixes ThemableMixin\n */\nexport class NumberField extends InputFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-number-field';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host([readonly]) [part$='button'] {\n          pointer-events: none;\n        }\n\n        [part='decrease-button']::before {\n          content: '−';\n        }\n\n        [part='increase-button']::before {\n          content: '+';\n        }\n\n        [part='decrease-button'],\n        [part='increase-button'] {\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n\n        :host([dir='rtl']) [part='input-field'] {\n          direction: ltr;\n        }\n      </style>\n\n      <div class=\"vaadin-field-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\" on-click=\"focus\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[_theme]]\"\n        >\n          <div\n            disabled$=\"[[!_allowed(-1, value, min, max, step)]]\"\n            part=\"decrease-button\"\n            on-click=\"_decreaseValue\"\n            on-touchend=\"_decreaseButtonTouchend\"\n            hidden$=\"[[!_isStepButtonVisible(hasControls, stepButtonsVisible)]]\"\n            aria-hidden=\"true\"\n            slot=\"prefix\"\n          ></div>\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"input\"></slot>\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n          <div\n            disabled$=\"[[!_allowed(1, value, min, max, step)]]\"\n            part=\"increase-button\"\n            on-click=\"_increaseValue\"\n            on-touchend=\"_increaseButtonTouchend\"\n            hidden$=\"[[!_isStepButtonVisible(hasControls, stepButtonsVisible)]]\"\n            aria-hidden=\"true\"\n            slot=\"suffix\"\n          ></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set to true to display value increase/decrease controls.\n       * @attr {boolean} has-controls\n       * @deprecated since 23.3.\n       * Use [`stepButtonsVisible`](#/elements/vaadin-number-field#property-stepButtonsVisible) instead\n       */\n      hasControls: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * Set to true to show increase/decrease buttons.\n       * @attr {boolean} step-buttons-visible\n       */\n      stepButtonsVisible: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * The minimum value of the field.\n       */\n      min: {\n        type: Number,\n      },\n\n      /**\n       * The maximum value of the field.\n       */\n      max: {\n        type: Number,\n      },\n\n      /**\n       * Specifies the allowed number intervals of the field.\n       * @type {number}\n       */\n      step: {\n        type: Number,\n      },\n    };\n  }\n\n  static get observers() {\n    return ['_stepChanged(step, inputElement)'];\n  }\n\n  static get delegateProps() {\n    return [...super.delegateProps, 'min', 'max'];\n  }\n\n  static get constraints() {\n    return [...super.constraints, 'min', 'max', 'step'];\n  }\n\n  constructor() {\n    super();\n    this._setType('number');\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      ...super.slotStyles,\n      `\n        ${tag} input[type=\"number\"]::-webkit-outer-spin-button,\n        ${tag} input[type=\"number\"]::-webkit-inner-spin-button {\n          -webkit-appearance: none;\n          margin: 0;\n        }\n\n        ${tag} input[type=\"number\"] {\n          -moz-appearance: textfield;\n        }\n\n        ${tag}[dir='rtl'] input[type=\"number\"]::placeholder {\n          direction: rtl;\n        }\n\n        ${tag}[dir='rtl']:not([step-buttons-visible]):not([has-controls]) input[type=\"number\"]::placeholder {\n          text-align: left;\n        }\n      `,\n    ];\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new InputController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      }),\n    );\n\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n\n    this._tooltipController = new TooltipController(this);\n    this.addController(this._tooltipController);\n    this._tooltipController.setPosition('top');\n  }\n\n  /**\n   * Override the method from `InputConstraintsMixin`\n   * to enforce HTML constraint validation even if\n   * the user didn't add any constraints explicitly:\n   * the field has to be regardless checked for bad input.\n   *\n   * @override\n   */\n  checkValidity() {\n    if (this.inputElement) {\n      return this.inputElement.checkValidity();\n    }\n\n    return !this.invalid;\n  }\n\n  /** @private */\n  _decreaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._decreaseValue();\n  }\n\n  /** @private */\n  _increaseButtonTouchend(e) {\n    // Cancel the following click and focus events\n    e.preventDefault();\n    this._increaseValue();\n  }\n\n  /** @private */\n  _decreaseValue() {\n    this._incrementValue(-1);\n  }\n\n  /** @private */\n  _increaseValue() {\n    this._incrementValue(1);\n  }\n\n  /** @private */\n  _incrementValue(incr) {\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    const step = this.step || 1;\n    let value = parseFloat(this.value);\n\n    if (!this.value) {\n      if ((this.min === 0 && incr < 0) || (this.max === 0 && incr > 0) || (this.max === 0 && this.min === 0)) {\n        incr = 0;\n        value = 0;\n      } else if ((this.max == null || this.max >= 0) && (this.min == null || this.min <= 0)) {\n        value = 0;\n      } else if (this.min > 0) {\n        value = this.min;\n        if (this.max < 0 && incr < 0) {\n          value = this.max;\n        }\n        incr = 0;\n      } else if (this.max < 0) {\n        value = this.max;\n        if (incr < 0) {\n          incr = 0;\n        } else if (this._getIncrement(1, value - step) > this.max) {\n          value -= 2 * step;\n          // FIXME(yuriy): find a proper solution to make correct step back\n        } else {\n          value -= step;\n        }\n      }\n    } else if (value < this.min) {\n      incr = 0;\n      value = this.min;\n    } else if (value > this.max) {\n      incr = 0;\n      value = this.max;\n    }\n\n    const newValue = this._getIncrement(incr, value);\n    if (!this.value || incr === 0 || this._incrementIsInsideTheLimits(incr, value)) {\n      this._setValue(newValue);\n    }\n  }\n\n  /** @private */\n  _setValue(value) {\n    this.value = this.inputElement.value = String(parseFloat(value));\n    this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n  }\n\n  /** @private */\n  _getIncrement(incr, currentValue) {\n    let step = this.step || 1,\n      min = this.min || 0;\n\n    // To avoid problems with decimal math, multiplying to operate with integers.\n    const multiplier = Math.max(this._getMultiplier(currentValue), this._getMultiplier(step), this._getMultiplier(min));\n\n    step *= multiplier;\n    currentValue = Math.round(currentValue * multiplier);\n    min *= multiplier;\n\n    const margin = (currentValue - min) % step;\n\n    if (incr > 0) {\n      return (currentValue - margin + step) / multiplier;\n    } else if (incr < 0) {\n      return (currentValue - (margin || step)) / multiplier;\n    }\n    return currentValue / multiplier;\n  }\n\n  /** @private */\n  _getDecimalCount(number) {\n    const s = String(number);\n    const i = s.indexOf('.');\n    return i === -1 ? 1 : s.length - i - 1;\n  }\n\n  /** @private */\n  _getMultiplier(number) {\n    if (!isNaN(number)) {\n      return 10 ** this._getDecimalCount(number);\n    }\n  }\n\n  /** @private */\n  _incrementIsInsideTheLimits(incr, value) {\n    if (incr < 0) {\n      return this.min == null || this._getIncrement(incr, value) >= this.min;\n    } else if (incr > 0) {\n      return this.max == null || this._getIncrement(incr, value) <= this.max;\n    }\n    return this._getIncrement(incr, value) <= this.max && this._getIncrement(incr, value) >= this.min;\n  }\n\n  /** @private */\n  _allowed(sign) {\n    const incr = sign * (this.step || 1);\n    const value = parseFloat(this.value);\n    return !this.value || (!this.disabled && this._incrementIsInsideTheLimits(incr, value));\n  }\n\n  /**\n   * @param {number} step\n   * @param {HTMLElement | undefined} inputElement\n   * @protected\n   */\n  _stepChanged(step, inputElement) {\n    if (inputElement) {\n      inputElement.step = step || 'any';\n    }\n  }\n\n  /**\n   * @param {unknown} newVal\n   * @param {unknown} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    // Validate value to be numeric\n    if (newVal && isNaN(parseFloat(newVal))) {\n      this.value = '';\n    } else if (typeof this.value !== 'string') {\n      this.value = String(this.value);\n    }\n\n    super._valueChanged(this.value, oldVal);\n  }\n\n  /**\n   * Override an event listener from `InputControlMixin`\n   * to avoid adding a separate listener.\n   * @param {!KeyboardEvent} event\n   * @protected\n   * @override\n   */\n  _onKeyDown(event) {\n    if (event.key === 'ArrowUp') {\n      event.preventDefault();\n      this._increaseValue();\n    } else if (event.key === 'ArrowDown') {\n      event.preventDefault();\n      this._decreaseValue();\n    }\n\n    super._onKeyDown(event);\n  }\n\n  /**\n   * Determines whether to hide the increase / decrease buttons based on the\n   * deprecated `hasControls` property, and the replacement `stepButtonsVisible`\n   * property\n   * @private\n   */\n  _isStepButtonVisible(hasControls, stepButtonsVisible) {\n    return hasControls || stepButtonsVisible;\n  }\n\n  /**\n   * Native [type=number] inputs don't update their value\n   * when you are entering input that the browser is unable to parse\n   * e.g. \"--5\", hence we have to override this method from `InputMixin`\n   * so that, when value is empty, it would additionally check\n   * for bad input based on the native `validity.badInput` property.\n   *\n   * @param {InputEvent} event\n   * @protected\n   * @override\n   */\n  _setHasInputValue(event) {\n    const target = event.composedPath()[0];\n    this._hasInputValue = target.value.length > 0 || target.validity.badInput;\n  }\n}\n\ncustomElements.define(NumberField.is, NumberField);\n","/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { NumberField } from '@vaadin/number-field/src/vaadin-number-field.js';\n\n/**\n * `<vaadin-integer-field>` is an input field web component that only accepts entering integer numbers.\n *\n * ```html\n * <vaadin-integer-field label=\"X\"></vaadin-integer-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-integer-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name         | Description\n * ------------------|-------------------------\n * `increase-button` | Increase (\"plus\") button\n * `decrease-button` | Decrease (\"minus\") button\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends NumberField\n */\nexport class IntegerField extends NumberField {\n  static get is() {\n    return 'vaadin-integer-field';\n  }\n\n  constructor() {\n    super();\n\n    this.allowedCharPattern = '[-+\\\\d]';\n  }\n\n  /**\n   * Override an observer from `InputMixin` to clear the value\n   * when trying to type invalid characters.\n   * @param {string | undefined} newVal\n   * @param {string | undefined} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    if (newVal !== '' && !this.__isInteger(newVal)) {\n      console.warn(`Trying to set non-integer value \"${newVal}\" to <vaadin-integer-field>. Clearing the value.`);\n      this.value = '';\n      return;\n    }\n    super._valueChanged(newVal, oldVal);\n  }\n\n  /**\n   * Override an observer from `NumberField` to reset the step\n   * property when an invalid step is set.\n   * @param {number} newVal\n   * @param {HTMLElement | undefined} inputElement\n   * @protected\n   * @override\n   */\n  _stepChanged(step, inputElement) {\n    if (step != null && !this.__hasOnlyDigits(step)) {\n      console.warn(\n        `<vaadin-integer-field> The \\`step\\` property must be a positive integer but \\`${step}\\` was provided, so the property was reset to \\`null\\`.`,\n      );\n      this.step = null;\n      return;\n    }\n\n    super._stepChanged(step, inputElement);\n  }\n\n  /** @private */\n  __isInteger(value) {\n    return /^(-\\d)?\\d*$/.test(String(value));\n  }\n\n  /** @private */\n  __hasOnlyDigits(value) {\n    return /^\\d+$/.test(String(value));\n  }\n}\n\ncustomElements.define(IntegerField.is, IntegerField);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { IntegerField } from '@vaadin/integer-field/src/vaadin-integer-field.js';\n\n/**\n * @deprecated Import `IntegerField` from `@vaadin/integer-field` instead.\n */\nexport const IntegerFieldElement = IntegerField;\n\nexport * from '@vaadin/integer-field/src/vaadin-integer-field.js';\n\nconsole.warn(\n  'WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/integer-field\" instead.',\n);\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Checkbox } from '@vaadin/checkbox/src/vaadin-checkbox.js';\n\n/**\n * @deprecated Import `Checkbox` from `@vaadin/checkbox` instead.\n */\nexport const CheckboxElement = Checkbox;\n\nexport * from '@vaadin/checkbox/src/vaadin-checkbox.js';\n\nconsole.warn('WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-checkbox\" is deprecated. Use \"@vaadin/checkbox\" instead.');\n","/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { TextField } from '@vaadin/text-field/src/vaadin-text-field.js';\n\n/**\n * @deprecated Import `TextField` from `@vaadin/text-field` instead.\n */\nexport const TextFieldElement = TextField;\n\nexport * from '@vaadin/text-field/src/vaadin-text-field.js';\n\nconsole.warn(\n  'WARNING: Since Vaadin 23.2, \"@vaadin/vaadin-text-field\" is deprecated. Use \"@vaadin/text-field\" instead.',\n);\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-grid-tree-toggle',\n  css`\n    :host {\n      --vaadin-grid-tree-toggle-level-offset: 2em;\n      align-items: center;\n      vertical-align: middle;\n      transform: translateX(calc(var(--lumo-space-s) * -1));\n      -webkit-tap-highlight-color: transparent;\n    }\n\n    :host(:not([leaf])) {\n      cursor: default;\n    }\n\n    [part='toggle'] {\n      display: inline-block;\n      font-size: 1.5em;\n      line-height: 1;\n      width: 1em;\n      height: 1em;\n      text-align: center;\n      color: var(--lumo-contrast-50pct);\n      cursor: var(--lumo-clickable-cursor);\n      /* Increase touch target area */\n      padding: calc(1em / 3);\n      margin: calc(1em / -3);\n    }\n\n    :host(:not([dir='rtl'])) [part='toggle'] {\n      margin-right: 0;\n    }\n\n    @media (hover: hover) {\n      :host(:hover) [part='toggle'] {\n        color: var(--lumo-contrast-80pct);\n      }\n    }\n\n    [part='toggle']::before {\n      font-family: 'lumo-icons';\n      display: inline-block;\n      height: 100%;\n    }\n\n    :host(:not([expanded])) [part='toggle']::before {\n      content: var(--lumo-icons-angle-right);\n    }\n\n    :host([expanded]) [part='toggle']::before {\n      content: var(--lumo-icons-angle-right);\n      transform: rotate(90deg);\n    }\n\n    /* Experimental support for hierarchy connectors, using an unsupported selector */\n    :host([theme~='connectors']) #level-spacer {\n      position: relative;\n      z-index: -1;\n      font-size: 1em;\n      height: 1.5em;\n    }\n\n    :host([theme~='connectors']) #level-spacer::before {\n      display: block;\n      content: '';\n      margin-top: calc(var(--lumo-space-m) * -1);\n      height: calc(var(--lumo-space-m) + 3em);\n      background-image: linear-gradient(\n        to right,\n        transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px),\n        var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px)\n      );\n      background-size: var(--vaadin-grid-tree-toggle-level-offset) var(--vaadin-grid-tree-toggle-level-offset);\n      background-position: calc(var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px) 0;\n    }\n\n    /* RTL specific styles */\n\n    :host([dir='rtl']) {\n      margin-left: 0;\n      margin-right: calc(var(--lumo-space-s) * -1);\n    }\n\n    :host([dir='rtl']) [part='toggle'] {\n      margin-left: 0;\n    }\n\n    :host([dir='rtl'][expanded]) [part='toggle']::before {\n      transform: rotate(-90deg);\n    }\n\n    :host([dir='rtl'][theme~='connectors']) #level-spacer::before {\n      background-image: linear-gradient(\n        to left,\n        transparent calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px),\n        var(--lumo-contrast-10pct) calc(var(--vaadin-grid-tree-toggle-level-offset) - 1px)\n      );\n      background-position: calc(100% - (var(--vaadin-grid-tree-toggle-level-offset) / 2 - 2px)) 0;\n    }\n\n    :host([dir='rtl']:not([expanded])) [part='toggle']::before,\n    :host([dir='rtl'][expanded]) [part='toggle']::before {\n      content: var(--lumo-icons-angle-left);\n    }\n  `,\n  { moduleId: 'lumo-grid-tree-toggle' },\n);\n","/**\n * @license\n * Copyright (c) 2016 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { isFocusable } from './vaadin-grid-active-item-mixin.js';\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = `\n  <style>\n    @font-face {\n      font-family: \"vaadin-grid-tree-icons\";\n      src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAQkAA0AAAAABrwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAAECAAAABoAAAAcgHwa6EdERUYAAAPsAAAAHAAAAB4AJwAOT1MvMgAAAZQAAAA/AAAAYA8TBIJjbWFwAAAB8AAAAFUAAAFeGJvXWmdhc3AAAAPkAAAACAAAAAgAAAAQZ2x5ZgAAAlwAAABLAAAAhIrPOhFoZWFkAAABMAAAACsAAAA2DsJI02hoZWEAAAFcAAAAHQAAACQHAgPHaG10eAAAAdQAAAAZAAAAHAxVAgBsb2NhAAACSAAAABIAAAASAIAAVG1heHAAAAF8AAAAGAAAACAACgAFbmFtZQAAAqgAAAECAAACTwflzbdwb3N0AAADrAAAADYAAABZQ7Ajh3icY2BkYGAA4twv3Vfi+W2+MnCzMIDANSOmbGSa2YEZRHEwMIEoAAoiB6sAeJxjYGRgYD7w/wADAwsDCDA7MDAyoAI2AFEEAtIAAAB4nGNgZGBg4GBgZgDRDAxMDGgAAAGbABB4nGNgZp7JOIGBlYGBaSbTGQYGhn4IzfiawZiRkwEVMAqgCTA4MDA+38d84P8BBgdmIAapQZJVYGAEAGc/C54AeJxjYYAAxlAIzQTELAwMBxgZGB0ACy0BYwAAAHicY2BgYGaAYBkGRgYQiADyGMF8FgYbIM3FwMHABISMDArP9/3/+/8/WJXC8z0Q9v8nEp5gHVwMMMAIMo+RDYiZoQJMQIKJARUA7WBhGN4AACFKDtoAAAAAAAAAAAgACAAQABgAJgA0AEIAAHichYvBEYBADAKBVHBjBT4swl9KS2k05o0XHd/yW1hAfBFwCv9sIlJu3nZaNS3PXAaXXHI8Lge7DlzF7C1RgXc7xkK6+gvcD2URmQB4nK2RQWoCMRiFX3RUqtCli65yADModOMBLLgQSqHddRFnQghIAnEUvEA3vUUP0LP0Fj1G+yb8R5iEhO9/ef/7FwFwj28o9EthiVp4hBlehcfUP4Ur8o/wBAv8CU+xVFvhOR7UB7tUdUdlVRJ6HnHWTnhM/V24In8JT5j/KzzFSi2E53hUz7jCcrcIiDDwyKSW1JEct2HdIPH1DFytbUM0PofWdNk5E5oUqb/Q6HHBiVGZpfOXkyUMEj5IyBuNmYZQjBobfsuassvnkKLe1OuBBj0VQ8cRni2xjLWsHaM0jrjx3peYA0/vrdmUYqe9iy7bzrX6eNP7Jh1SijX+AaUVbB8AAHicY2BiwA84GBgYmRiYGJkZmBlZGFkZ2djScyoLMgzZS/MyDQwMwLSruZMzlHaB0q4A76kLlwAAAAEAAf//AA94nGNgZGBg4AFiMSBmYmAEQnYgZgHzGAAD6wA2eJxjYGBgZACCKxJigiD6mhFTNowGACmcA/8AAA==) format('woff');\n      font-weight: normal;\n      font-style: normal;\n    }\n  </style>\n`;\n\ndocument.head.appendChild(template.content);\n\n/**\n * `<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\n * that provides toggle and level display functionality for the item tree.\n *\n * #### Example:\n * ```html\n * <vaadin-grid-column id=\"column\"></vaadin-grid-column>\n * ```\n * ```js\n * const column = document.querySelector('#column');\n * column.renderer = (root, column, model) => {\n *   let treeToggle = root.firstElementChild;\n *   if (!treeToggle) {\n *     treeToggle = document.createElement('vaadin-grid-tree-toggle');\n *     treeToggle.addEventListener('expanded-changed', () => { ... });\n *     root.appendChild(treeToggle);\n *   }\n *   treeToggle.leaf = !model.item.hasChildren;\n *   treeToggle.level = level;\n *   treeToggle.expanded = expanded;\n *   treeToggle.textContent = model.item.name;\n * };\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description\n * ---|---\n * `toggle` | The tree toggle icon\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * ---|---|---\n * `expanded` | When present, the toggle is expanded | :host\n * `leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n *\n * The following custom CSS properties are available on\n * the `<vaadin-grid-tree-toggle>` element:\n *\n * Custom CSS property | Description | Default\n * ---|---|---\n * `--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`\n *\n * @fires {CustomEvent} expanded-changed - Fired when the `expanded` property changes.\n *\n * @extends HTMLElement\n * @mixes ThemableMixin\n */\nclass GridTreeToggle extends ThemableMixin(DirMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: baseline;\n          max-width: 100%;\n\n          /* CSS API for :host */\n          --vaadin-grid-tree-toggle-level-offset: 1em;\n          --_collapsed-icon: '\\\\e7be\\\\00a0';\n        }\n\n        :host([dir='rtl']) {\n          --_collapsed-icon: '\\\\e7bd\\\\00a0';\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        :host(:not([leaf])) {\n          cursor: pointer;\n        }\n\n        #level-spacer,\n        [part='toggle'] {\n          flex: none;\n        }\n\n        #level-spacer {\n          display: inline-block;\n          width: calc(var(---level, '0') * var(--vaadin-grid-tree-toggle-level-offset));\n        }\n\n        [part='toggle']::before {\n          font-family: 'vaadin-grid-tree-icons';\n          line-height: 1em; /* make icon font metrics not affect baseline */\n        }\n\n        :host(:not([expanded])) [part='toggle']::before {\n          content: var(--_collapsed-icon);\n        }\n\n        :host([expanded]) [part='toggle']::before {\n          content: '\\\\e7bc\\\\00a0'; /* icon glyph + single non-breaking space */\n        }\n\n        :host([leaf]) [part='toggle'] {\n          visibility: hidden;\n        }\n\n        slot {\n          display: block;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n      </style>\n\n      <span id=\"level-spacer\"></span>\n      <span part=\"toggle\"></span>\n      <slot></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-grid-tree-toggle';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Current level of the tree represented with a horizontal offset\n       * of the toggle button.\n       * @type {number}\n       */\n      level: {\n        type: Number,\n        value: 0,\n        observer: '_levelChanged',\n      },\n\n      /**\n       * Hides the toggle icon and disables toggling a tree sublevel.\n       * @type {boolean}\n       */\n      leaf: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * Sublevel toggle state.\n       * @type {boolean}\n       */\n      expanded: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        notify: true,\n      },\n    };\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addEventListener('click', (e) => this._onClick(e));\n  }\n\n  /** @private */\n  _onClick(e) {\n    if (this.leaf) {\n      return;\n    }\n    if (isFocusable(e.target) || e.target instanceof HTMLLabelElement) {\n      return;\n    }\n\n    e.preventDefault();\n    this.expanded = !this.expanded;\n  }\n\n  /** @private */\n  _levelChanged(level) {\n    const value = Number(level).toString();\n    this.style.setProperty('---level', value);\n  }\n}\n\ncustomElements.define(GridTreeToggle.is, GridTreeToggle);\n\nexport { GridTreeToggle };\n"],"sourceRoot":""}