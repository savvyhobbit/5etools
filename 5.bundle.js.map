{"version":3,"sources":["webpack:///./components/dnd-select-add.js","webpack:///./components/views/character/dnd-character-builder-suboptions.js","webpack:///./components/views/character/dnd-character-builder-background-race.js"],"names":["DndSelectAdd","test","type","Boolean","reflectToAttribute","value","options","Array","observer","model","String","addCallback","Function","choices","Number","paren","label","placeholder","multiValue","disabled","this","listBox","remove","$","select","render","isArray","choiceArray","map","v","indexOf","findIndex","o","name","source","filter","selectedValues","i","join","super","ready","setTimeout","async","renderer","root","document","createElement","setAttribute","addEventListener","e","opened","wasPreviouslySelected","srcElement","getAttribute","length","splice","selectedOptions","option","item","optionName","innerHTML","appendChild","_assignMenuElement","valueUpdated","connectedCallback","selectChangeHandler","val","selected","undefined","disconnectedCallback","removeEventListener","a","result","customElements","define","DndCharacterBuilderSuboptions","storageKey","selectedItem","Object","skillProfOptions","skillProfChoices","selectedSkillProfs","defaultSkillProfs","toolProfOptions","defaultToolProfs","langProfOptions","defaultLangProfs","attributeOptions","attributeChoices","attributeMod","selectedAttributes","defaultAttributes","featOptions","featChoices","selectedFeat","isEditMode","dontCreateIfMissing","characterChangeHandler","character","detail","set","updateOptions","editModeHandler","storageKeys","split","storedItem","dispatchEvent","CustomEvent","bubbles","composed","isNaN","parseInt","ability","choose","from","toUpperCase","count","amount","entries","attribute","toLowerCase","mod","skillProficiencies","skillProficiency","any","concat","keys","toolProficiencies","selectedToolProfs","toolProficiency","forEach","toolKey","toolVal","newToolProfOption","key","toolListsMapped","flat","toolProfChoices","push","isInteger","languageProficiencies","selectedLangProfs","langProficiency","langKey","langVal","newLangProfOption","langProfChoices","includes","substring","trim","console","error","feats","skills","bind","attr","feat","arg","arguments","constructor","num","str","overrideLabel","newStr","DndCharacterBuilderBackgroundRace","selectedBackground","selectedBackgroundRef","selectedRace","selectedRaceRef","backgroundName","raceName","additionalOptionAddOptions","updateFromCharacter","maxAdditionalOptionsIndex","additionalOptions","index","background","race","linkData","dataLink","bg","isBackground","target","classList","contains","viewId","optionChoice","optionAdd","optionKey","__data"],"mappings":"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","file":"5.bundle.js","sourcesContent":["import { PolymerElement, html } from '@polymer/polymer';\nimport { mergeFeature } from '../util/charBuilder';\nimport { jqEmpty, util_capitalizeAll } from \"../js/utils\";\nimport \"@vaadin/vaadin-select\";\nimport {loadModel} from \"../util/data\";\n\nclass DndSelectAdd extends PolymerElement {\n  static get properties() {\n    return {\n      test: {\n        type: Boolean,\n        reflectToAttribute: true,\n        value: false\n      },\n      options: {\n        type: Array,\n        observer: \"optionsUpdated\"\n      },\n      model: {\n        type: String\n      },\n      addCallback: {\n        type: Function\n      },\n      value: {\n        type: String,\n        value: \"\",\n        observer: \"valueUpdated\"\n      },\n      choices: {\n        type: Number,\n        observer: \"choicesUpdated\"\n      },\n      paren: {\n        type: String,\n      },\n      label: {\n        type: String\n      },\n      placeholder: {\n        type: String,\n      },\n      multiValue: {\n        type: String,\n        value: \"\"\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      }\n    }\n  }\n\n  choicesUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  optionsUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  valueUpdated() {\n    if (this.choices) {\n      if (Array.isArray(this.value) && this.options) {\n        const choiceArray = this.value\n          .map(v => {\n            if (this.options.indexOf(v) !== -1) {\n              return this.options.indexOf(v);\n            } else {\n              return this.options.findIndex((o) => {\n                return o.name === v.name && o.source === v.source;\n              });\n            }\n          })\n          .filter(v => { return v !== -1 });\n\n        if (this.listBox) {\n          this.listBox.selectedValues = choiceArray;\n        }\n        this.multiValue = choiceArray.map(i => {\n          let value = this.options[i];\n          return value.name ? value.name : util_capitalizeAll(value) \n        }).join(\", \");\n      } else {\n        if (this.listBox) {\n          this.listBox.selectedValues = [];\n        }\n        this.multiValue = \"\";\n      }\n    } else {\n      if (this.value && this.options) {\n        if (this.value.source) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name && i.source === this.value.source || i === this.value.name }) + \"\";\n        } else if (this.value.name) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name || i === this.value.name }) + \"\";\n        } else {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value || i === this.value }) + \"\";\n        }\n      } else {\n        this.$.select.value = \"\";\n      }\n    }\n  }\n\n  ready() {\n    super.ready();\n\n    setTimeout(async () => {\n      if (this.model) {\n        this.options = await loadModel(this.model);\n      }\n\n      this.$.select.renderer = (root, select) => {\n        if (!this.listBox) {\n          this.listBox = document.createElement('vaadin-list-box');\n\n          // setting up for multi-select\n          if (this.choices) {\n            this.listBox.setAttribute(\"multiple\", true);\n\n            this.listBox.addEventListener(\"click\", (e) => {\n              select.opened = true;\n              let wasPreviouslySelected = e.srcElement.getAttribute(\"selected\") !== null\n              setTimeout(() => {\n                if (this.listBox.selectedValues.length > this.choices\n                    && !wasPreviouslySelected) {\n                  this.listBox.selectedValues.splice(this.listBox.selectedValues.length - 2, 1)\n                }\n                let selectedOptions = this.listBox.selectedValues.map(v => { return this.options[v] });\n                this.multiValue = selectedOptions.map(o => { return o.name ? o.name : util_capitalizeAll(o) }).join(', ');\n                if (this.addCallback) {\n                  this.addCallback(selectedOptions);\n                }\n              }, 0);\n            });\n\n          }\n\n          // Adding options\n          if (this.options && this.options.length) {\n            for (let i = 0; i < this.options.length; i ++) {\n              const option = this.options[i],\n                item = document.createElement('vaadin-item');\n              const optionName = option.name || util_capitalizeAll(option);\n              item.innerHTML = `<span>${optionName}</span> ${option.name ? `<span style='font-size: 14px;color: var(--lumo-primary-color-50pct);'>${option.source}</span>` : ''}`\n              item.setAttribute(\"value\", i);\n              this.listBox.appendChild(item);\n            }\n          }\n          root.appendChild(this.listBox);\n          this.$.select._assignMenuElement();\n\n          this.valueUpdated();\n        }\n      };\n    }, 0);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.selectChangeHandler = () => {\n      const val = this.$.select.value;\n      if (val) {\n        if (!this.choices) {\n          const selected = this.options[val];\n          if (this.addCallback) {\n            this.addCallback(selected, this.model);\n          } else {\n            mergeFeature(undefined, selected, this.model);\n          }\n          if (!this.value) {\n            this.$.select.value = \"\";\n          }\n        }\n      }\n    };\n\n    this.$.select.addEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.$.select.removeEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  _label(label, choices, paren) {\n    let result = '';\n    if (label) {\n      result = label;\n      if (choices && choices !== 1 && choices !== 100) {\n        result += ` (pick ${choices})`;\n      }\n      if (paren) {\n        result += ` (${paren})`;\n      }\n    }\n    return result;\n  }\n  \n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n        [slot=\"prefix\"] {\n          width: calc(100% - 46px);\n          padding: 12px;\n          line-height: 1.4;\n        }\n        vaadin-select {\n          width: 100%;\n        }\n        .prefix {\n          white-space: normal;\n          color: var(--lumo-body-text-color);\n        }\n      </style>\n      <vaadin-select test$=\"[[test]]\" theme=\"dark\" add id=\"select\" label=\"[[_label(label, choices, paren)]]\" placeholder=\"[[placeholder]]\" disabled$=\"[[disabled]]\">\n        <div hidden$=\"[[!_exists(multiValue)]]\" slot=\"prefix\">\n          <span class=\"prefix\">[[multiValue]]</span>\n        </div>\n      </vaadin-select>\n      \n    `;\n  }\n}\ncustomElements.define('dnd-select-add', DndSelectAdd);","import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n    getCharacterChannel,\n    getSelectedCharacter,\n    saveCharacter,\n} from \"../../../util/charBuilder\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { util_capitalizeAll, absInt, cloneDeep } from \"../../../js/utils\"; \nimport { loadModel } from \"../../../util/data\";\nimport '../../dnd-select-add';\nimport { SKILL_TO_ATB_ABV } from \"../../../js/bestiary\";\nimport { } from '@polymer/polymer/lib/elements/dom-if.js';\nimport { } from '@polymer/polymer/lib/elements/dom-repeat.js';\nimport { LANGUAGES_ALL, toolsListFromCategory, TOOLS_ALL, TOOLS_ARTISAN, TOOLS_GAMING_SET, TOOLS_INSTRUMENT } from \"../../../util/consts\";\n\nclass DndCharacterBuilderSuboptions extends PolymerElement {\n    static get properties() {\n        return {\n            storageKey: {\n                type: String\n            },\n            // This selectedItem provided is used to populate the sub option fields using the option data structure setup in data\n            selectedItem: {\n                type: Object\n            },\n\n            skillProfOptions: {\n                type: Array,\n                value: []\n            },\n            skillProfChoices: {\n                type: Number,\n            },\n            selectedSkillProfs: {\n                type: Array,\n            },\n            defaultSkillProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            toolProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultToolProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            langProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultLangProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            attributeOptions: {\n                type: Array,\n                value: []\n            },\n            attributeChoices: {\n                type: Number,\n            },\n            attributeMod: {\n                type: Number,\n            },\n            selectedAttributes: {\n                type: Array,\n            },\n            defaultAttributes: {\n                type: String,\n                value: \"\"\n            },\n\n            featOptions: {\n                type: Array,\n                value: []\n            },\n            featChoices: {\n                type: Number\n            },\n            selectedFeat: {\n                type: Array,\n            },\n\n            isEditMode: {\n                type: Boolean,\n                value: false\n            },\n            \n            dontCreateIfMissing: {\n                type: Boolean,\n                value: false,\n                reflectToAttribute: true\n            }\n        };\n    }\n\n    static get observers() {\n        return ['updateOptions(selectedItem, storageKey, character)']\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.characterChangeHandler = (e) => {\n            // let character = cloneDeep(e.detail.character);\n            let character = e.detail.character;\n            this.set('character', character);\n            this.updateOptions();\n        };\n        \n        this.set('character', getSelectedCharacter());\n        getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n        this.editModeHandler = (e) => {\n            this.isEditMode = e.detail.isEditMode;\n        }\n        getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n        this.isEditMode = isEditMode();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n        getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n    }\n\n    async updateOptions() {\n        if (this.character && this.storageKey && this.selectedItem) {\n            // Finding the storedItem from the character's choices at storageKey \n            const storageKeys = this.storageKey.split('.');\n            if (!this.character.choices) {\n                this.character.choices = {};\n            }\n            let storedItem = this.character.choices;\n\n            for (let i = 0; i < storageKeys.length; i++) {\n                const storageKey = storageKeys[i];\n                if (!storedItem[storageKey]) {\n                    if (!this.dontCreateIfMissing) {\n                        if (storageKeys.length < i + 1 && !isNaN(parseInt(storageKeys[i + 1], 10))) {\n                            storedItem[storageKey] = new Array(20);\n                        } else {\n                            storedItem[storageKey] = {};\n                        }\n                    } else {\n                        this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n                        return;\n                    }\n                }\n                storedItem = storedItem[storageKey];\n            }\n            this.storedItem = storedItem;\n\n\n            // todo languageProficiencies\n\n            // Retrieving the selected choices for attribute, feat, or proficiency off of the storedItem\n\n            // Populating Attribute choice field\n            this.attributeOptions = [];\n            this.attributeChoices = null;\n            this.attributeMod = 1;\n            this.selectedAttributes = null;\n            this.defaultAttributes = null;\n            if (this.selectedItem.ability && this.selectedItem.ability.length) {\n                const ability = this.selectedItem.ability[0];\n                if (ability.choose) {\n                    this.attributeOptions = ability.choose.from.map(i => { return i.toUpperCase() });\n                    this.attributeChoices = ability.choose.count || 1;\n                    this.attributeMod = ability.choose.amount || 1;\n                    this.selectedAttributes = this.storedItem.selectedAttributes ? this.storedItem.selectedAttributes.split(',') : null;\n                }\n                this.defaultAttributes = Object.entries(ability).map(e => {\n                    if (e[0] !== 'choose' && e[0] !== 'any') {\n                        let attribute = e[0].toLowerCase(),\n                            mod = e[1];\n                        return attribute.toUpperCase() + ' ' + absInt(mod);\n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultAttributes = this.defaultAttributes;\n                this.storedItem.attributeMod = this.attributeMod;\n            }\n\n            // Populating Skill Proficiency choice field\n            this.skillProfOptions = [];\n            this.skillProfChoices = null;\n            this.selectedSkillProfs = null;\n            this.defaultSkillProfs = null;\n            if (this.selectedItem.skillProficiencies && this.selectedItem.skillProficiencies.length) {\n                const skillProficiency = this.selectedItem.skillProficiencies[0];\n                if (skillProficiency.choose) {\n                    this.skillProfOptions = skillProficiency.choose.from;\n                    this.skillProfChoices = skillProficiency.choose.count || 1;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                if (skillProficiency.any) {\n                    if (this.selectedItem.name === \"Custom Lineage\") {\n                        this.skillProfOptions = [\"Darkvision (60ft)\"].concat(Object.keys(SKILL_TO_ATB_ABV));\n                    } else {\n                        this.skillProfOptions = Object.keys(SKILL_TO_ATB_ABV);\n                    }\n                    this.skillProfChoices = skillProficiency.any;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                this.defaultSkillProfs = Object.keys(skillProficiency).map(e => {\n                    if (e !== 'choose' && e !== 'any') {\n                        return util_capitalizeAll(e) \n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultSkillProfs = this.defaultSkillProfs;\n            }\n\n            // toolProficiencies (Dragon Casualty)\n                // tool list special keys - artisan's tools, musical instruments, gaming set, any, choose.from\n                // values usually === true or 2\n            const toolProfOptions = []\n            let defaultToolProfs = [];\n            if (this.selectedItem.toolProficiencies && this.selectedItem.toolProficiencies.length) {\n                if (this.selectedItem.toolProficiencies.length > 1) {\n                    // TODO: generated a dropdown for choosing index and add additional suboption components for each choice.\n                    // path of nested suboptions should use an indexed key\n                    // test with Dragon Causualty\n                } else {\n                    if (!this.storedItem.selectedToolProfs || typeof this.storedItem.selectedToolProfs === 'string') {\n                        this.storedItem.selectedToolProfs = {};\n                    }\n                    const toolProficiency = this.selectedItem.toolProficiencies[0];\n\n                    Object.entries(toolProficiency).forEach(([toolKey, toolVal]) => {\n                        const newToolProfOption = {\n                            key: toolKey,\n                            toolProfOptions: toolsListFromCategory(toolKey),\n                            selectedToolProfs: this.storedItem.selectedToolProfs[toolKey] ? this.storedItem.selectedToolProfs[toolKey].split(',') : null\n                        };\n                        switch (toolKey) {\n                            case 'choose':\n                                const toolListsMapped = toolProficiency.choose.from.map(toolsListFromCategory);\n                                newToolProfOption.toolProfOptions = toolListsMapped.flat();\n                                newToolProfOption.toolProfChoices = toolProficiency.choose.count || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case 'any':\n                                newToolProfOption.toolProfChoices = toolProficiency.any || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case \"artisan's tools\":\n                            case 'musical instrument':\n                            case 'gaming set':\n                                newToolProfOption.label = `Selected ${util_capitalizeAll(toolKey)}`;\n                                newToolProfOption.toolProfChoices = Number.isInteger(toolVal) ? toolVal : 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n                        \n                            default:\n                                defaultToolProfs.push(util_capitalizeAll(toolKey))\n                                break;\n                        }\n\n                    })\n                    defaultToolProfs = defaultToolProfs.filter(e => !!e).join(', ');\n                    // store defaults on character to avoid future look-ups\n                    this.defaultToolProfs = defaultToolProfs;\n                    this.storedItem.defaultToolProfs = defaultToolProfs;\n                }\n            }\n            this.toolProfOptions = toolProfOptions;\n\n\n            // todo \"languageProficiencies\" \n            //      any: #, anyStandard: #, dwarvish, choose:from, other (this usually? indicates race's own language)\n            // test with  Vedalken\n            const langProfOptions = []\n            let defaultLangProfs = [];\n            if (this.selectedItem.languageProficiencies && this.selectedItem.languageProficiencies.length) {\n                if (!this.storedItem.selectedLangProfs || typeof this.storedItem.selectedLangProfs === 'string') {\n                    this.storedItem.selectedLangProfs = {};\n                }\n                this.selectedItem.languageProficiencies.forEach(langProficiency => {\n                    Object.entries(langProficiency).forEach(([langKey, langVal]) => {\n                        const newLangProfOption = {\n                            key: langKey,\n                            langProfOptions: toolsListFromCategory(langKey),\n                            selectedLangProfs: this.storedItem.selectedLangProfs[langKey] ? this.storedItem.selectedLangProfs[langKey].split(',') : null\n                        };\n                        switch (langKey) {\n                            case 'choose':\n                                newLangProfOption.langProfOptions = langProfOptions.choose.from;\n                                newLangProfOption.langProfChoices = langProficiency.choose.count || 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case 'any':\n                            case 'anyStandard':\n                                newLangProfOption.langProfOptions = LANGUAGES_ALL;\n                                newLangProfOption.langProfChoices = Number.isInteger(langVal) ? langVal : 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case \"other\":\n                                let name = this.selectedItem.name;\n                                if (name.includes(\"(\")) {\n                                    name = name.substring(0, name.indexOf('(')).trim();\n                                }\n                                defaultLangProfs.push(name);\n                                break;\n                        \n                            default:\n                                defaultLangProfs.push(util_capitalizeAll(langKey))\n                                break;\n                        }\n                    });\n                });\n                defaultLangProfs = defaultLangProfs.filter(e => !!e).join(', ');\n                console.error('defaultLangProfs', this.selectedItem.name, defaultLangProfs);\n                // store defaults on character to avoid future look-ups\n                this.defaultLangProfs = defaultLangProfs;\n                this.storedItem.defaultLangProfs = defaultLangProfs;\n            }\n            this.langProfOptions = langProfOptions;\n            console.error('langProfOptions', this.selectedItem.name, langProfOptions);\n\n\n            // todo: \"resist\"\n\n            // Populating Feat choice field\n            this.featOptions = [];\n            this.featChoices = null;\n            this.selectedFeat = null;\n            if (this.selectedItem.feats) {\n                this.featOptions = await loadModel('feats');\n                this.featChoices = this.selectedItem.feats;\n                this.selectedFeat = this.storedItem.selectedFeat;\n            }\n            \n            this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n        }\n    }\n\n    _skillProficiencyAddCallback() {\n        return ((skills) => {\n            this.storedItem.selectedSkillProfs = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _toolProficiencyAddCallback(key) {\n        return ((skills) => {\n            this.storedItem.selectedToolProfs[key] = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _langProficiencyAddCallback(key) {\n        return ((skills) => {\n            this.storedItem.selectedLangProfs[key] = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _attributeAddCallback() {\n        return ((attr) => {\n            this.storedItem.selectedAttributes = attr.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _featAddCallback() {\n        return ((feat) => {\n            this.storedItem.selectedFeat = feat;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _suboptionStorageKey(storageKey) {\n        return `${storageKey}.suboptions`\n    }\n\n    _showEmpty(isEditMode, value) {\n        return !isEditMode && !value;\n    }\n\n    _exists() {\n        for (let arg of arguments) {\n            if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _plusPrefix(num) {\n        console.error(num)\n        return `+${num}`\n    }\n\n    _plural(str, num, overrideLabel) {\n        const newStr = overrideLabel || str;\n        if (num > 1) {\n            return newStr + 's'\n        }\n        return newStr;\n    }\n\n    static get template() {\n        return html`\n            <style include=\"material-styles\">\n                [hidden] {\n                    display: none !important;\n                }\n                dnd-select-add {\n                    width: 100%;\n                }\n                @media(min-width: 420px) {\n                    dnd-select-add {\n                        \n                    }\n                }\n\n                @media(min-width: 921px) {\n                }\n            </style>\n\n            <div class=\"col-wrap\">\n                <div hidden$=\"[[!_exists(defaultAttributes)]]\" class=\"default-selection\">Default Attributes: <span>[[defaultAttributes]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultSkillProfs)]]\" class=\"default-selection\">Default Skills: <span>[[defaultSkillProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultToolProfs)]]\" class=\"default-selection\">Default Tools: <span>[[defaultToolProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultLangProfs)]]\" class=\"default-selection\">Default Languages: <span>[[defaultLangProfs]]</span></div>\n\n                <template is=\"dom-if\" if=\"[[_exists(attributeOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\" \n                        placeholder=\"<Select Attribute>\" label='[[_plural(\"Selected Attribute\", attributeChoices)]]'\n                        choices=\"[[attributeChoices]]\" paren=\"[[_plusPrefix(attributeMod)]]\" options=\"[[attributeOptions]]\"\n                        value=\"[[selectedAttributes]]\" add-callback=\"[[_attributeAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(skillProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill>\" label='[[_plural(\"Selected Skill\", skillProfChoices)]]'\n                        choices=\"[[skillProfChoices]]\" options=\"[[skillProfOptions]]\"\n                        value=\"[[selectedSkillProfs]]\" add-callback=\"[[_skillProficiencyAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[toolProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Tool>\" label='[[_plural(\"Selected Tool\", item.toolProfChoices, item.label)]]'\n                        choices=\"[[item.toolProfChoices]]\" options=\"[[item.toolProfOptions]]\"\n                        value=\"[[item.selectedToolProfs]]\" add-callback=\"[[_toolProficiencyAddCallback(item.key)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[langProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Language>\" label='[[_plural(\"Selected Language\", item.langProfChoices, item.label)]]'\n                        choices=\"[[item.langProfChoices]]\" options=\"[[item.langProfOptions]]\"\n                        value=\"[[item.selectedLangProfs]]\" add-callback=\"[[_langProficiencyAddCallback(item.key)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <!-- Todo: add language and tool proficiencies -->\n\n                <template is=\"dom-if\" if=\"[[_exists(featOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Feat>\" label=\"Selected Feat\"\n                        options=\"[[featOptions]]\" value=\"[[selectedFeat]]\"\n                        add-callback=\"[[_featAddCallback()]]\">\n                    </dnd-select-add>\n                    \n                    <template is=\"dom-if\" if=\"[[_exists(selectedFeat)]]\"></template>\n                        <dnd-character-builder-suboptions storage-key=\"[[_suboptionStorageKey(storageKey)]]\" selected-item=\"[[selectedFeat]]\"></dnd-character-builder-suboptions>\n                    </template>\n                </template>\n            </div>\n        `;\n    }\n}\n\ncustomElements.define(\"dnd-character-builder-suboptions\", DndCharacterBuilderSuboptions);\n","import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n  addAdditionalChoice,\n  deleteAdditionalChoice,\n  getBackgroundReference,\n  getCharacterChannel,\n  getRaceReference,\n  getSelectedCharacter,\n} from \"../../../util/charBuilder\";\nimport './dnd-character-builder-suboptions';\nimport \"@vaadin/vaadin-select\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { util_capitalizeAll, absInt, initCollapseToggles, encodeForHash } from \"../../../js/utils\"; \n\nclass DndCharacterBuilderBackgroundRace extends PolymerElement {\n  \n  static get properties() {\n    return {\n      selectedBackground: {\n        type: String,\n        value: \"\"\n      },\n      selectedBackgroundRef: {\n        type: Object,\n      },\n      selectedRace: {\n        type: String,\n        value: \"\"\n      },\n      selectedRaceRef: {\n        type: Object,\n      },\n      isEditMode: {\n        type: Boolean,\n        value: false\n      },\n      backgroundName: {\n        type: String,\n        value: ''\n      },\n      raceName: {\n        type: String,\n        value: ''\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    \n    this.additionalOptionAddOptions = [\"Feat\", \"Attribute +1\", \"Attribute +2\", \"Skill\", \"Language\", \"Tool\"];\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    \n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  async updateFromCharacter(character) {\n    let maxAdditionalOptionsIndex = 0;\n    let additionalOptions = Object.entries(character.choices)\n      .filter(([key, value]) => {\n        if (key.includes(\"additionalChoice\")) {\n          const index = parseInt(key.substring(key.indexOf('_') + 1));\n          if (index > maxAdditionalOptionsIndex) {\n            maxAdditionalOptionsIndex = index;\n          }\n          if (value) {\n            value.index = index;\n          } else {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      })\n      .map(([key, value]) => {\n        value.key = key;\n        return value;\n      });\n    this.maxAdditionalOptionsIndex = maxAdditionalOptionsIndex;\n    this.set('additionalOptions', additionalOptions);\n    console.error('additionalOptions', additionalOptions);\n\n    this.selectedBackground = character.background;\n    this.selectedBackgroundRef = await getBackgroundReference();\n    this.backgroundName = this.selectedBackground.name;\n    this.selectedRace = character.race;\n    this.selectedRaceRef = await getRaceReference();\n    this.raceName = this.selectedRace.name;\n    \n    this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n  }\n\n  _getRaceLink(race) {\n    let linkData = [race.name];\n    if (race.source) {\n      linkData.push(race.source);\n    }\n    let dataLink = encodeForHash(linkData);\n    return race ? `#/races/${dataLink}` : '#/races'\n  }\n\n  _getBackgroundLink(bg) {\n    let linkData = [bg.name];\n    if (bg.source) {\n      linkData.push(bg.source);\n    }\n    let dataLink = encodeForHash(linkData);\n    return bg ? `#/backgrounds/${dataLink}` : '#/backgrounds'\n  }\n\n  _linkClick(e) {\n    const isBackground = e.target.classList.contains('background');\n    this.dispatchEvent(new CustomEvent(\"open-drawer\", {\n      bubbles: true,\n      composed: true,\n      detail: {\n        selectedItem: isBackground ? this.selectedBackground : this.selectedRace,\n        viewId: isBackground ? 'backgrounds' : 'races'\n      }\n    }));\n  }\n\n  _addAdditionalOption(e) {\n    const optionChoice = this.$.optionAdd.value;\n    addAdditionalChoice(optionChoice, this.maxAdditionalOptionsIndex + 1);\n    this.$.optionAdd.value = \"\";\n  }\n\n  _deleteAdditionalOption(e) {\n    const optionKey = e.model.__data.item.key;\n    deleteAdditionalChoice(optionKey);\n  }\n\n  _showEmpty(isEditMode, value) {\n    return !isEditMode && !value;\n  }\n\n  _exists() {\n    for (let arg of arguments) {\n      if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static get template() {\n    return html`\n      <style include=\"material-styles my-styles\">\n        body {}\n        :host {\n          display: block;\n          padding: 14px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        .col-wrap {\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          margin-bottom: 200px;\n        }\n\n        .row-wrap {\n          width: 100%;\n        }\n        .row-wrap:first-child {\n          margin-bottom: 24px;\n        }\n\n        .row-wrap > *:not(h2):not(:last-child) {\n          margin-bottom: 10px;\n        }\n\n        .heading {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--lumo-contrast-10pct);\n        }\n        .reference-link:hover {\n          color: var(--mdc-theme-secondary);\n        }\n\n        .default-selection {\n          font-size: 14px;\n          margin-bottom: 0 !important;\n        }\n\n        .default-selection span {\n          color: var(--mdc-theme-secondary)\n        }\n\n        .missing-text {\n          font-style: italic;\n          font-size: 14px;\n        }\n\n        @media(min-width: 420px) {\n          .heading {\n            justify-content: flex-start;\n          }\n          .reference-link {\n            margin-left: 8px;\n          }\n        }\n\n        @media(min-width: 921px) {\n          .row-wrap {\n            width: calc(50% - 10px);\n          }\n          .row-wrap:first-child {\n            margin-bottom: 0;\n          }\n        }\n\n        h2 {\n          display: block;\n          font-size: 1.5em;\n          margin-block-start: 0.83em;\n          margin-block-end: 0.83em;\n          margin-inline-start: 0px;\n          margin-inline-end: 0px;\n          font-weight: bold;\n        }\n\n        h3 {\n          font-size: 24px;\n          font-weight: bold;\n          margin-bottom: 8px;\n        }\n        .details-container  {\n          background: var(--lumo-contrast-10pct);\n          padding: 14px;\n          border-radius: 4px;\n          font-size: 14px;\n        }\n        .stats-wrapper.margin-bottom_large {\n          margin-bottom: 0px !important;\n        }\n        dnd-select-add {\n          --lumo-font-size-m: 20px;\n          width: 100%;\n        }\n\n        dnd-character-builder-suboptions {\n          display: block;\n          margin-left: 30px;\n        }\n      </style>\n\n      <div class=\"col-wrap\">\n        <div class=\"row-wrap\">\n          <div class=\"heading\">\n            <h2>Race</h2>\n            <button class=\"mdc-icon-button material-icons\" on-click=\"_linkClick\">logout</button>\n          </div>\n          <dnd-select-add model=\"races\" value=\"[[selectedRace]]\" placeholder=\"<Choose Race>\" disabled$=\"[[!isEditMode]]\" hidden$=\"[[_showEmpty(isEditMode, selectedRace)]]\"></dnd-select-add>\n          <div class=\"missing-text\" hidden$=\"[[_exists(selectedRace)]]\">Select Race to add Attribute Bonuses</div>\n          <dnd-character-builder-suboptions storage-key=\"race\" selected-item=\"[[selectedRaceRef]]\"></dnd-character-builder-suboptions>\n        </div>\n\n        <div class=\"row-wrap\">\n          <div class=\"heading\">\n            <h2>Background</h2>\n            <button class=\"mdc-icon-button material-icons background\" on-click=\"_linkClick\">logout</button>\n          </div>\n          <dnd-select-add model=\"backgrounds\" value=\"[[selectedBackground]]\" placeholder=\"<Choose Background>\" disabled$=\"[[!isEditMode]]\" hidden$=\"[[_showEmpty(isEditMode, selectedBackground)]]\"></dnd-select-add>\n          <div class=\"missing-text\" hidden$=\"[[_exists(selectedBackground)]]\">Select Background to add Skill Proficiencies</div>\n          <dnd-character-builder-suboptions storage-key=\"background\" selected-item=\"[[selectedBackgroundRef]]\"></dnd-character-builder-suboptions>\n        </div>\n\n        <div class=\"row-wrap\">\n          <div class=\"heading\">\n              <h2>Additional Options</h2>\n          </div>\n          <vaadin-select id=\"optionAdd\" class=\"label--secondary\" label=\"Add Additional Option\" on-change=\"_addAdditionalOption\" placeholder=\"<Add Additional Feature>\" disabled$=\"[[!isEditMode]]\" hidden$=\"[[!isEditMode]]\">\n            <template>\n              <vaadin-list-box>\n                <template is=\"dom-repeat\" items=\"[[additionalOptionAddOptions]]\">\n                  <vaadin-item>[[item]]</vaadin-item>\n                </template>\n              </vaadin-list-box>\n            </template>\n          </vaadin-select>\n\n          <div class=\"added-options\">\n            <template is=\"dom-repeat\" items=\"[[additionalOptions]]\">\n              <div>\n                Extra [[item.choiceKey]]\n                <button class=\"mdc-icon-button material-icons\" on-click=\"_deleteAdditionalOption\">delete</button>\n                <dnd-character-builder-suboptions dont-create-if-missing storage-key=\"[[item.key]]\" selected-item=\"[[item]]\"></dnd-character-builder-suboptions>\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-background-race\", DndCharacterBuilderBackgroundRace);"],"sourceRoot":""}