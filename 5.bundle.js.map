{"version":3,"sources":["webpack:///./node_modules/@vaadin/vaadin-checkbox/src/vaadin-checkbox.js","webpack:///./node_modules/@vaadin/vaadin-checkbox/theme/lumo/vaadin-checkbox-styles.js","webpack:///./node_modules/@vaadin/vaadin-checkbox/vaadin-checkbox.js","webpack:///./components/views/character/dnd-character-builder-rolls.js"],"names":["CheckboxElement","checked","type","Boolean","value","notify","observer","reflectToAttribute","indeterminate","String","_nativeCheckbox","Object","super","this","name","_storedName","ready","setAttribute","shadowRoot","querySelector","addEventListener","_handleClick","bind","_addActiveListeners","attrName","getAttribute","_updateLabelAttribute","label","assignedNodes","firstElementChild","_isAssignedNodesEmpty","removeAttribute","nodes","length","nodeType","Node","TEXT_NODE","textContent","trim","_addEventListenerToNode","e","__interactionsAllowed","keyCode","preventDefault","_toggleChecked","disabled","target","localName","composedPath","dispatchEvent","CustomEvent","composed","bubbles","customElements","define","is","$_documentContainer","document","head","appendChild","content","DndCharacterBuilderRolls","isEditMode","customRolls","Array","connectedCallback","damageTypes","characterChangeHandler","character","detail","updateFromCharacter","editModeHandler","disconnectedCallback","removeEventListener","arg","arguments","constructor","entries","isArray","num","rollModel","model","__data","item","noHitRoll","toHit","$","advMod","disadvMod","damages","forEach","damage","index","setTimeout","roll","rollIndexAttr","rollIndex","parseInt","curRoll","push","rollDamageIndexAttr","rollDamageIndex","a","b","currentTarget","id"],"mappings":"0FAAA;;;;;;AAmDA,MAAMA,UACJ,YACE,YACE,YACE,YAAsB,SAC5B,sBACE,OAAO,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmDb,gBACE,MAAO,kBAGT,qBACE,MAAO,QAGT,wBACE,MAAO,CAKLC,QAAS,CACPC,KAAMC,QACNC,OAAO,EACPC,QAAQ,EACRC,SAAU,kBACVC,oBAAoB,GAQtBC,cAAe,CACbN,KAAMC,QACNE,QAAQ,EACRC,SAAU,wBACVC,oBAAoB,EACpBH,OAAO,GAMTA,MAAO,CACLF,KAAMO,OACNL,MAAO,MAITM,gBAAiB,CACfR,KAAMS,SAKZ,cACEC,QAKAC,KAAKC,KAGP,WACE,OAAOD,KAAKZ,QAAUY,KAAKE,YAAc,GAG3C,SAASD,GACPD,KAAKE,YAAcD,EAGrB,QACEF,MAAMI,QAENH,KAAKI,aAAa,OAAQ,YAE1BJ,KAAKH,gBAAkBG,KAAKK,WAAWC,cAAc,0BAErDN,KAAKO,iBAAiB,QAASP,KAAKQ,aAAaC,KAAKT,OAEtDA,KAAKU,sBAEL,MAAMC,EAAWX,KAAKY,aAAa,QAC/BD,IACFX,KAAKC,KAAOU,GAGdX,KAAKK,WAAWC,cAAc,mBAAmBA,cAAc,QAC5DC,iBAAiB,aAAcP,KAAKa,sBAAsBJ,KAAKT,OAElEA,KAAKa,wBAIP,wBACE,MAAMC,EAAQd,KAAKK,WAAWC,cAAc,mBACtCS,EAAgBD,EAAME,kBAAkBD,gBAC1Cf,KAAKiB,sBAAsBF,GAC7BD,EAAMV,aAAa,QAAS,IAE5BU,EAAMI,gBAAgB,SAK1B,sBAAsBC,GAEpB,OAAwB,IAAjBA,EAAMC,QACU,GAAhBD,EAAMC,QACJD,EAAM,GAAGE,UAAYC,KAAKC,WACM,KAAhCJ,EAAM,GAAGK,YAAYC,OAIhC,gBAAgBrC,GACVY,KAAKL,cACPK,KAAKI,aAAa,eAAgB,SAElCJ,KAAKI,aAAa,eAAgBd,QAAQF,IAK9C,sBAAsBO,GAChBA,EACFK,KAAKI,aAAa,eAAgB,SAElCJ,KAAKI,aAAa,eAAgBJ,KAAKZ,SAK3C,sBAEEY,KAAK0B,wBAAwB1B,KAAM,OAAS2B,IACtC3B,KAAK4B,sBAAsBD,IAC7B3B,KAAKI,aAAa,SAAU,MAKhCJ,KAAK0B,wBAAwB1B,KAAM,KAAM,IAAMA,KAAKkB,gBAAgB,WAGpElB,KAAKO,iBAAiB,UAAWoB,IAC3B3B,KAAK4B,sBAAsBD,IAAoB,KAAdA,EAAEE,UACrCF,EAAEG,iBACF9B,KAAKI,aAAa,SAAU,OAKhCJ,KAAKO,iBAAiB,QAASoB,IACzB3B,KAAK4B,sBAAsBD,IAAoB,KAAdA,EAAEE,UACrCF,EAAEG,iBACF9B,KAAK+B,iBACL/B,KAAKkB,gBAAgB,UAEjBlB,KAAKL,gBACPK,KAAKL,eAAgB,MAU7B,mBACE,OAAOK,KAAKK,WAAWC,cAAc,SAOvC,sBAAsBqB,GACpB,OAAI3B,KAAKgC,UAKkB,MAAvBL,EAAEM,OAAOC,UAQf,aAAaP,GACP3B,KAAK4B,sBAAsBD,KACxB3B,KAAKL,eAURK,KAAKL,eAAgB,EACrBgC,EAAEG,iBACF9B,KAAK+B,kBAXDJ,EAAEQ,eAAe,KAAOnC,KAAKH,kBAC/B8B,EAAEG,iBACF9B,KAAK+B,mBAeb,iBACE/B,KAAKZ,SAAWY,KAAKZ,QACrBY,KAAKoC,cAAc,IAAIC,YAAY,SAAU,CAACC,UAAU,EAAOC,SAAS,MAU5EC,eAAeC,OAAOtD,EAAgBuD,GAAIvD,I,6CCnU1C,MAAMwD,E,MAAsB,CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAiLhCC,SAASC,KAAKC,YAAYH,EAAoBI,S,yCCrL9C,e,iCCAA,wEAeA,MAAMC,UAAiC,IAErC,wBACE,MAAO,CACLC,WAAY,CACV5D,KAAMC,QACNC,OAAO,GAET2D,YAAa,CACX7D,KAAM8D,QAKZ,oBACEpD,MAAMqD,oBAENpD,KAAKqD,YAAc,IAEnBrD,KAAKsD,uBAA0B3B,IAC7B,IAAI4B,EAAY5B,EAAE6B,OAAOD,UACzBvD,KAAKyD,oBAAoBF,IAG3BvD,KAAKyD,oBAAoB,eACzB,cAAsBlD,iBAAiB,qBAAsBP,KAAKsD,wBAElEtD,KAAK0D,gBAAmB/B,IACtB3B,KAAKiD,WAAatB,EAAE6B,OAAOP,YAE7B,cAAqB1C,iBAAiB,iBAAkBP,KAAK0D,iBAC7D1D,KAAKiD,WAAa,cAGpB,uBACElD,MAAM4D,uBAEN,cAAsBC,oBAAoB,qBAAsB5D,KAAKsD,wBACrE,cAAqBM,oBAAoB,iBAAkB5D,KAAK0D,iBAGlE,0BAA0BH,GACxBvD,KAAKkD,YAAcK,EAAUL,YAAc,oBAAUK,EAAUL,aAAe,GAE9ElD,KAAKoC,cAAc,IAAIC,YAAY,gBAAiB,CAAEE,SAAS,EAAMD,UAAU,KAGjF,WACE,IAAK,IAAIuB,KAAOC,UACd,GAAMD,IAAQA,EAAIE,cAAgBjE,QAAUA,OAAOkE,QAAQH,GAAKzC,OAAS,MAAQ+B,MAAMc,QAAQJ,IAAQA,EAAIzC,OAAS,GAClH,OAAO,EAGX,OAAO,EAGT,MAAM8C,GACJ,OAAOA,GAAO,EAAI,IAAIA,EAAOA,EAG/B,UAAUvC,GACR,IAAK3B,KAAKiD,WAAY,CACpB,IAAIkB,EAAYxC,EAAEyC,MAAMC,OAAOC,KAC1BH,EAAUI,WACb,YAAWJ,EAAUlE,KAAb,YAA8BkE,EAAUK,MAAOxE,KAAKyE,EAAEC,OAAOtF,QAASY,KAAKyE,EAAEE,UAAUvF,SAEjG+E,EAAUS,QAAQC,QAAQ,CAACC,EAAQC,KACjCC,WAAW,KACT,YAAS,GAAGb,EAAUlE,SAAS6E,EAAOzF,eAAgByF,EAAOG,OAC9C,KAAbF,EAAQ,OAKlB,mBAAmBpD,GACjB,MACMuD,EADS,qBAAW,QAASvD,GACNf,aAAa,SACpCuE,EAAYC,SAASF,EAAe,IAC1C,aAAclF,KAAKkD,YAAYiC,GAAYA,GAG7C,WAEE,aADgB,CAAClF,KAAM,GAAIuE,MAAO,EAAGD,WAAW,EAAOK,QAAS,CAAE,CAACK,KAAM,GAAI5F,KAAM,MAC5DW,KAAKkD,YAAY9B,QAG1C,YAAYO,GACV,MACMuD,EADS,qBAAW,QAASvD,GACNf,aAAa,SACpCuE,EAAYC,SAASF,EAAe,IAC1C,YAAiBC,GAGnB,WAAWxD,GACT,MACMuD,EADS,qBAAW,QAASvD,GACNf,aAAa,SACpCuE,EAAYC,SAASF,EAAe,IACpCG,EAAUrF,KAAKkD,YAAYiC,GACjCE,EAAQT,QAAQU,KAAK,CAACL,KAAM,GAAI5F,KAAM,KACtC,aAAcgG,EAASF,GAGzB,cAAcxD,GACZ,MACMuD,EADS,qBAAW,QAASvD,GACNf,aAAa,SACpCuE,EAAYC,SAASF,EAAe,IAEpCK,EADe,qBAAW,gBAAiB5D,GACRf,aAAa,SAChD4E,EAAkBJ,SAASG,EAAqB,IACtD,YAAuBJ,EAAWK,GAGpC,IAAIC,EAAGC,GACL,OAAOD,GAAKC,EAGd,OAAOD,EAAGC,GACR,OAAOD,IAAMC,EAGf,UAAUD,GACR,QAASA,EAGX,WAAW9D,GACkB,WAAvBA,EAAEgE,cAAcC,GAClB5F,KAAKyE,EAAEE,UAAUvF,SAAU,EAE3BY,KAAKyE,EAAEC,OAAOtF,SAAU,EAI5B,sBACE,OAAO,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2LfoD,eAAeC,OAAO,8BAA+BO","file":"5.bundle.js","sourcesContent":["/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\n\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ControlStateMixin } from '@vaadin/vaadin-control-state-mixin/vaadin-control-state-mixin.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n/**\n * `<vaadin-checkbox>` is a Web Component for customized checkboxes.\n *\n * ```html\n * <vaadin-checkbox>\n *   Make my profile visible\n * </vaadin-checkbox>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name         | Description\n * ------------------|----------------\n * `checkbox`        | The wrapper element for the native <input type=\"checkbox\">\n * `label`           | The wrapper element in which the component's children, namely the label, is slotted\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * -------------|-------------|--------------\n * `active`     | Set when the checkbox is pressed down, either with mouse, touch or the keyboard. | `:host`\n * `disabled`   | Set when the checkbox is disabled. | `:host`\n * `focus-ring` | Set when the checkbox is focused using the keyboard. | `:host`\n * `focused`    | Set when the checkbox is focused. | `:host`\n * `indeterminate` | Set when the checkbox is in indeterminate mode. | `:host`\n * `checked` | Set when the checkbox is checked. | `:host`\n * `empty` | Set when there is no label provided. | `label`\n *\n * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)\n *\n * @extends PolymerElement\n * @mixes ElementMixin\n * @mixes ControlStateMixin\n * @mixes ThemableMixin\n * @mixes GestureEventListeners\n * @demo demo/index.html\n */\nclass CheckboxElement extends\n  ElementMixin(\n    ControlStateMixin(\n      ThemableMixin(\n        GestureEventListeners(PolymerElement)))) {\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        display: inline-flex;\n        align-items: baseline;\n        outline: none;\n      }\n\n      [part=\"checkbox\"] {\n        position: relative;\n        display: inline-block;\n        flex: none;\n      }\n\n      input[type=\"checkbox\"] {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        width: 100%;\n        height: 100%;\n        opacity: 0;\n        cursor: inherit;\n        margin: 0;\n      }\n\n      :host([disabled]) {\n        -webkit-tap-highlight-color: transparent;\n      }\n    </style>\n\n    <label>\n      <span part=\"checkbox\">\n        <input type=\"checkbox\" checked=\"{{checked::change}}\" disabled\\$=\"[[disabled]]\" indeterminate=\"{{indeterminate::change}}\" role=\"presentation\" tabindex=\"-1\">\n      </span>\n\n      <span part=\"label\">\n        <slot></slot>\n      </span>\n    </label>\n`;\n  }\n\n  static get is() {\n    return 'vaadin-checkbox';\n  }\n\n  static get version() {\n    return '2.5.0';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * True if the checkbox is checked.\n       * @type {boolean}\n       */\n      checked: {\n        type: Boolean,\n        value: false,\n        notify: true,\n        observer: '_checkedChanged',\n        reflectToAttribute: true\n      },\n\n      /**\n       * Indeterminate state of the checkbox when it's neither checked nor unchecked, but undetermined.\n       * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#Indeterminate_state_checkboxes\n       * @type {boolean}\n       */\n      indeterminate: {\n        type: Boolean,\n        notify: true,\n        observer: '_indeterminateChanged',\n        reflectToAttribute: true,\n        value: false\n      },\n\n      /**\n       * The value given to the data submitted with the checkbox's name to the server when the control is inside a form.\n       */\n      value: {\n        type: String,\n        value: 'on'\n      },\n\n      /** @private */\n      _nativeCheckbox: {\n        type: Object\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    /**\n     * @type {string}\n     * Name of the element.\n     */\n    this.name;\n  }\n\n  get name() {\n    return this.checked ? this._storedName : '';\n  }\n\n  set name(name) {\n    this._storedName = name;\n  }\n\n  ready() {\n    super.ready();\n\n    this.setAttribute('role', 'checkbox');\n\n    this._nativeCheckbox = this.shadowRoot.querySelector('input[type=\"checkbox\"]');\n\n    this.addEventListener('click', this._handleClick.bind(this));\n\n    this._addActiveListeners();\n\n    const attrName = this.getAttribute('name');\n    if (attrName) {\n      this.name = attrName;\n    }\n\n    this.shadowRoot.querySelector('[part~=\"label\"]').querySelector('slot')\n      .addEventListener('slotchange', this._updateLabelAttribute.bind(this));\n\n    this._updateLabelAttribute();\n  }\n\n  /** @private */\n  _updateLabelAttribute() {\n    const label = this.shadowRoot.querySelector('[part~=\"label\"]');\n    const assignedNodes = label.firstElementChild.assignedNodes();\n    if (this._isAssignedNodesEmpty(assignedNodes)) {\n      label.setAttribute('empty', '');\n    } else {\n      label.removeAttribute('empty');\n    }\n  }\n\n  /** @private */\n  _isAssignedNodesEmpty(nodes) {\n    // The assigned nodes considered to be empty if there is no slotted content or only one empty text node\n    return nodes.length === 0 ||\n          (nodes.length == 1\n          && nodes[0].nodeType == Node.TEXT_NODE\n          && nodes[0].textContent.trim() === '');\n  }\n\n  /** @private */\n  _checkedChanged(checked) {\n    if (this.indeterminate) {\n      this.setAttribute('aria-checked', 'mixed');\n    } else {\n      this.setAttribute('aria-checked', Boolean(checked));\n    }\n  }\n\n  /** @private */\n  _indeterminateChanged(indeterminate) {\n    if (indeterminate) {\n      this.setAttribute('aria-checked', 'mixed');\n    } else {\n      this.setAttribute('aria-checked', this.checked);\n    }\n  }\n\n  /** @private */\n  _addActiveListeners() {\n    // DOWN\n    this._addEventListenerToNode(this, 'down', (e) => {\n      if (this.__interactionsAllowed(e)) {\n        this.setAttribute('active', '');\n      }\n    });\n\n    // UP\n    this._addEventListenerToNode(this, 'up', () => this.removeAttribute('active'));\n\n    // KEYDOWN\n    this.addEventListener('keydown', e => {\n      if (this.__interactionsAllowed(e) && e.keyCode === 32) {\n        e.preventDefault();\n        this.setAttribute('active', '');\n      }\n    });\n\n    // KEYUP\n    this.addEventListener('keyup', e => {\n      if (this.__interactionsAllowed(e) && e.keyCode === 32) {\n        e.preventDefault();\n        this._toggleChecked();\n        this.removeAttribute('active');\n\n        if (this.indeterminate) {\n          this.indeterminate = false;\n        }\n      }\n    });\n  }\n\n  /**\n   * @return {!HTMLInputElement}\n   * @protected\n   */\n  get focusElement() {\n    return this.shadowRoot.querySelector('input');\n  }\n\n  /**\n   * True if users' interactions (mouse or keyboard)\n   * should toggle the checkbox\n   */\n  __interactionsAllowed(e) {\n    if (this.disabled) {\n      return false;\n    }\n\n    // https://github.com/vaadin/vaadin-checkbox/issues/63\n    if (e.target.localName === 'a') {\n      return false;\n    }\n\n    return true;\n  }\n\n  /** @private */\n  _handleClick(e) {\n    if (this.__interactionsAllowed(e)) {\n      if (!this.indeterminate) {\n        if (e.composedPath()[0] !== this._nativeCheckbox) {\n          e.preventDefault();\n          this._toggleChecked();\n        }\n      } else {\n        /*\n         * Required for IE 11 and Edge.\n         * See issue here: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7344418/\n         */\n        this.indeterminate = false;\n        e.preventDefault();\n        this._toggleChecked();\n      }\n    }\n  }\n\n  /** @protected */\n  _toggleChecked() {\n    this.checked = !this.checked;\n    this.dispatchEvent(new CustomEvent('change', {composed: false, bubbles: true}));\n  }\n\n  /**\n   * Fired when the user commits a value change.\n   *\n   * @event change\n   */\n}\n\ncustomElements.define(CheckboxElement.is, CheckboxElement);\n\nexport { CheckboxElement };\n","import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\nconst $_documentContainer = html`<dom-module id=\"lumo-checkbox\" theme-for=\"vaadin-checkbox\">\n  <template>\n    <style include=\"lumo-checkbox-style lumo-checkbox-effects\">\n      /* IE11 only */\n      ::-ms-backdrop,\n      [part=\"checkbox\"] {\n        line-height: 1;\n      }\n    </style>\n  </template>\n</dom-module><dom-module id=\"lumo-checkbox-style\">\n  <template>\n    <style>\n      :host {\n        -webkit-tap-highlight-color: transparent;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        cursor: default;\n        outline: none;\n      }\n\n      [part=\"label\"]:not([empty]) {\n        margin: 0.1875em 0.875em 0.1875em 0.375em;\n      }\n\n      [part=\"checkbox\"] {\n        width: calc(1em + 2px);\n        height: calc(1em + 2px);\n        margin: 0.1875em;\n        position: relative;\n        border-radius: var(--lumo-border-radius-s);\n        background-color: var(--lumo-contrast-20pct);\n        transition: transform 0.2s cubic-bezier(.12, .32, .54, 2), background-color 0.15s;\n        pointer-events: none;\n        line-height: 1.2;\n      }\n\n      :host([indeterminate]) [part=\"checkbox\"],\n      :host([checked]) [part=\"checkbox\"] {\n        background-color: var(--lumo-primary-color);\n      }\n\n      /* Needed to align the checkbox nicely on the baseline */\n      [part=\"checkbox\"]::before {\n        content: \"\\\\2003\";\n      }\n\n      /* Checkmark */\n      [part=\"checkbox\"]::after {\n        content: \"\";\n        display: inline-block;\n        width: 0;\n        height: 0;\n        border: 0 solid var(--lumo-primary-contrast-color);\n        border-width: 0.1875em 0 0 0.1875em;\n        box-sizing: border-box;\n        transform-origin: 0 0;\n        position: absolute;\n        top: 0.8125em;\n        left: 0.5em;\n        transform: scale(0.55) rotate(-135deg);\n        opacity: 0;\n      }\n\n      :host([checked]) [part=\"checkbox\"]::after {\n        opacity: 1;\n        width: 0.625em;\n        height: 1.0625em;\n      }\n\n      /* Indeterminate checkmark */\n\n      :host([indeterminate]) [part=\"checkbox\"]::after {\n        transform: none;\n        opacity: 1;\n        top: 45%;\n        height: 10%;\n        left: 22%;\n        right: 22%;\n        width: auto;\n        border: 0;\n        background-color: var(--lumo-primary-contrast-color);\n        transition: opacity 0.25s;\n      }\n\n      /* Focus ring */\n\n      :host([focus-ring]) [part=\"checkbox\"] {\n        box-shadow: 0 0 0 3px var(--lumo-primary-color-50pct);\n      }\n\n      /* Disabled */\n\n      :host([disabled]) {\n        pointer-events: none;\n        color: var(--lumo-disabled-text-color);\n      }\n\n      :host([disabled]) [part=\"label\"] ::slotted(*) {\n        color: inherit;\n      }\n\n      :host([disabled]) [part=\"checkbox\"] {\n        background-color: var(--lumo-contrast-10pct);\n      }\n\n      :host([disabled]) [part=\"checkbox\"]::after {\n        border-color: var(--lumo-contrast-30pct);\n      }\n\n      :host([indeterminate][disabled]) [part=\"checkbox\"]::after {\n        background-color: var(--lumo-contrast-30pct);\n      }\n\n      /* RTL specific styles */\n\n      :host([dir=\"rtl\"]) [part=\"label\"]:not([empty]) {\n        margin: 0.1875em 0.375em 0.1875em 0.875em;\n      }\n    </style>\n  </template>\n</dom-module><dom-module id=\"lumo-checkbox-effects\">\n  <template>\n    <style>\n      /* Transition the checkmark if activated with the mouse (disabled for grid select-all this way) */\n      :host(:hover) [part=\"checkbox\"]::after {\n        transition: width 0.1s, height 0.25s;\n      }\n\n      /* Used for activation \"halo\" */\n      [part=\"checkbox\"]::before {\n        color: transparent;\n        display: inline-block;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n        background-color: inherit;\n        transform: scale(1.4);\n        opacity: 0;\n        transition: transform 0.1s, opacity 0.8s;\n      }\n\n      /* Hover */\n\n      :host(:not([checked]):not([indeterminate]):not([disabled]):hover) [part=\"checkbox\"] {\n        background-color: var(--lumo-contrast-30pct);\n      }\n\n      /* Disable hover for touch devices */\n      @media (pointer: coarse) {\n        :host(:not([checked]):not([indeterminate]):not([disabled]):hover) [part=\"checkbox\"] {\n          background-color: var(--lumo-contrast-20pct);\n        }\n      }\n\n      /* Active */\n\n      :host([active]) [part=\"checkbox\"] {\n        transform: scale(0.9);\n        transition-duration: 0.05s;\n      }\n\n      :host([active][checked]) [part=\"checkbox\"] {\n        transform: scale(1.1);\n      }\n\n      :host([active]:not([checked])) [part=\"checkbox\"]::before {\n        transition-duration: 0.01s, 0.01s;\n        transform: scale(0);\n        opacity: 0.4;\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","import './theme/lumo/vaadin-checkbox.js';\nexport * from './src/vaadin-checkbox.js';\n","import { PolymerElement, html } from \"@polymer/polymer\";\nimport \"@polymer/polymer/lib/elements/dom-repeat.js\";\nimport \"@vaadin/vaadin-checkbox\";\nimport { cloneDeep, findInPath } from \"../../../js/utils\";\nimport {\n  getCharacterChannel,\n  getSelectedCharacter,\n  setCustomRoll,\n  removeCustomRoll,\n  removeCustomRollDamage\n} from \"../../../util/charBuilder\";\nimport { DAMAGE_TYPES } from \"../../../util/consts\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { rollDice, rollHit } from \"../../../util/roll\";\n\nclass DndCharacterBuilderRolls extends PolymerElement {\n  \n  static get properties() {\n    return {\n      isEditMode: {\n        type: Boolean,\n        value: false\n      },\n      customRolls: {\n        type: Array\n      }\n    };\n  }\n  \n  connectedCallback() {\n    super.connectedCallback();\n\n    this.damageTypes = DAMAGE_TYPES;\n    \n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    \n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n    \n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n  \n  disconnectedCallback() {\n    super.disconnectedCallback();\n    \n    getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n  \n  async updateFromCharacter(character) {\n    this.customRolls = character.customRolls ? cloneDeep(character.customRolls) : [];\n\n    this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n  }\n  \n  __exists() {\n    for (let arg of arguments) {\n      if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  __abs(num) {\n    return num >= 0 ? `+${num}`: num;\n  }\n  \n  _makeRoll(e) {\n    if (!this.isEditMode) {\n      let rollModel = e.model.__data.item;\n      if (!rollModel.noHitRoll) {\n        rollHit(`${rollModel.name} (to hit)`, rollModel.toHit, this.$.advMod.checked, this.$.disadvMod.checked);\n      }\n      rollModel.damages.forEach((damage, index) => {\n        setTimeout(() =>{\n          rollDice(`${rollModel.name} (${damage.type} damage)`, damage.roll);\n        }, (index + 1) * 300);\n      });\n    }\n  }\n\n  _rollChangeHandler(e) {\n    const rollEl = findInPath('.roll', e);\n    const rollIndexAttr = rollEl.getAttribute('index');\n    const rollIndex = parseInt(rollIndexAttr, 10);\n    setCustomRoll(this.customRolls[rollIndex], rollIndex);\n  }\n\n  _addRoll() {\n    const newRoll = {name: \"\", toHit: 0, noHitRoll: false, damages: [ {roll: '', type: ''} ]};\n    setCustomRoll(newRoll, this.customRolls.length);\n  }\n\n  _removeRoll(e) {\n    const rollEl = findInPath('.roll', e);\n    const rollIndexAttr = rollEl.getAttribute('index');\n    const rollIndex = parseInt(rollIndexAttr, 10);\n    removeCustomRoll(rollIndex);\n  }\n\n  _addDamage(e) {\n    const rollEl = findInPath('.roll', e);\n    const rollIndexAttr = rollEl.getAttribute('index');\n    const rollIndex = parseInt(rollIndexAttr, 10);\n    const curRoll = this.customRolls[rollIndex];\n    curRoll.damages.push({roll: '', type: ''});\n    setCustomRoll(curRoll, rollIndex);\n  }\n\n  _removeDamage(e) {\n    const rollEl = findInPath('.roll', e);\n    const rollIndexAttr = rollEl.getAttribute('index');\n    const rollIndex = parseInt(rollIndexAttr, 10);\n    const rollDamageEl = findInPath('.roll__damage', e);\n    const rollDamageIndexAttr = rollDamageEl.getAttribute('index');\n    const rollDamageIndex = parseInt(rollDamageIndexAttr, 10);\n    removeCustomRollDamage(rollIndex, rollDamageIndex);\n  }\n\n  _or(a, b) {\n    return a || b;\n  }\n\n  _orNot(a, b){\n    return a || !b;\n  }\n\n  _isTruthy(a) {\n    return !!a;\n  }\n\n  _modChange(e) {\n    if (e.currentTarget.id === 'advMod') {\n      this.$.disadvMod.checked = false;\n    } else {\n      this.$.advMod.checked = false;\n    }\n  }\n  \n  static get template() {\n    return html`\n    <style include=\"material-styles\">\n      body {}\n      :host {\n        display: block;\n        padding: 14px;\n      }\n      [hidden] {\n        display: none !important;\n      }\n      \n      .col-wrap {\n        display: flex; \n        justify-content: space-between;\n        flex-wrap: wrap;\n        margin-bottom: 56px;\n      }\n      .row-wrap {\n        width: 100%;\n      }\n\n      h2 {\n        margin-bottom: 24px;\n      }\n\n      .rolls__add-button {\n        margin-bottom: 16px;\n        display: inline-flex;\n      }\n\n      .roll {\n        display: flex;\n        flex-direction: column;\n        cursor: pointer;\n        border-radius: 4px;\n        padding: 8px;\n        margin-bottom: 16px;\n        background: var(--lumo-contrast-10pct);\n        height: min-content;\n      }\n\n      @media(min-width: 921px) {\n        :host {\n          padding-right: 0px;\n        }\n        .roll {\n          max-width: 380px;\n          margin-right: 16px;\n        }\n        .rolls {\n          display: flex;\n          flex-wrap: wrap;\n        }\n      }\n\n      .roll-header {\n        display: flex;\n        justify-content: space-between;\n      }\n      .roll-header dnd-button {\n        margin-top: 20px;\n      }\n      .roll-header vaadin-text-field {\n        padding-top: 0;\n      }\n      h3 {\n        margin: 4px 0;\n      }\n      .roll__to-hit {\n        display: flex;\n      }\n      .roll__to-hit dnd-switch {\n        margin: 0 auto;\n        padding: 26px 20px 27px;\n      }\n\n      .roll-footer {\n        display: flex;\n        flex-direction: column;\n      }\n      .roll__damages {\n        display: flex;\n        flex-direction: column;\n      }\n      .roll__damage {\n        display: flex;\n      }\n      .roll__damage vaadin-text-field,\n      .roll__damage vaadin-select {\n        max-width: 100%;\n      }\n      .roll__damage-roll--edit,\n      .roll__damage-type--edit {\n        width: calc(50% - 40px);\n      }\n      .roll__damage-roll--edit {\n        margin-right: 16px;\n      }\n      .roll__damage-remove {\n        margin: auto 16px 4px;\n      }\n\n      .rolls__toolbar {\n        display: flex;\n        flex-wrap: wrap;\n        align-items: center;\n        margin-bottom: 20px;\n      }\n      .rolls__toolbar h4 {\n        width: 100%;\n        margin: 0;\n      }\n      .rolls__toolbar-reset-mods {\n        display: inline-flex;\n      }\n      .roll__add-damage {\n        width: min-content;\n        margin: 8px auto 0;\n      }\n    </style>\n    \n    <div class=\"col-wrap\">\n      <div class=\"row-wrap\">\n        <h2>Rolls</h2>\n\n\n        <dnd-button hidden$=\"[[!isEditMode]]\" on-click=\"_addRoll\" label=\"Add Roll\" icon=\"add\" class=\"rolls__add-button\"></dnd-button>\n        <div hidden$=\"[[isEditMode]]\" class=\"rolls__toolbar\">\n          <h4>Roll Modifiers:</h4>\n          <div>\n            <vaadin-checkbox id='advMod' on-change=\"_modChange\">Advantage</vaadin-checkbox>\n            <vaadin-checkbox id='disadvMod' on-change=\"_modChange\">Disadvantage</vaadin-checkbox>\n          </div>\n        </div>\n\n        <div class=\"rolls rolls--custom\">\n\n          <template is=\"dom-repeat\" items=\"[[customRolls]]\">\n            <div class=\"roll\" on-click=\"_makeRoll\" index$=\"[[index]]\">\n              <div class=\"roll-header\">\n                <h3 hidden$=\"[[isEditMode]]\">[[item.name]]<span hidden$=\"[[_isTruthy(item.name)]]\">&lt;No Name&gt;</span></h3>\n                <vaadin-text-field hidden$=\"[[!isEditMode]]\" value=\"{{item.name}}\" on-change=\"_rollChangeHandler\" label=\"Name\"></vaadin-text-field>\n                <dnd-button hidden$=\"[[!isEditMode]]\" label=\"Remove\" icon=\"remove\" on-click=\"_removeRoll\"></dnd-button>\n              </div>\n\n              <div class=\"roll-footer\">\n                <div class=\"roll__to-hit\">\n                  <span hidden$=\"[[_or(item.noHitRoll, isEditMode)]]\"><span>[[__abs(item.toHit)]]</span> to hit</span>\n                  <vaadin-integer-field hidden$=\"[[_orNot(item.noHitRoll, isEditMode)]]\" value=\"{{item.toHit}}\" on-change=\"_rollChangeHandler\" min=\"-20\" max=\"20\" has-controls label=\"To Hit\"></vaadin-integer-field>\n                  <dnd-switch hidden$=\"[[!isEditMode]]\" label='Attack Roll' secondary-label='Damage Only' initial-value=\"[[item.noHitRoll]]\" checked={{item.noHitRoll}} on-switch-change=\"_rollChangeHandler\" ></dnd-switch>\n                </div>\n\n                <div class=\"roll__damages\">\n                  <template is=\"dom-repeat\" items=\"[[item.damages]]\" as=\"damage\">\n                    <div class=\"roll__damage\" index$=\"[[index]]\">\n                      <dnd-button hidden$=\"[[!isEditMode]]\" on-click=\"_removeDamage\" icon=\"remove\" class='roll__damage-remove icon-only'></dnd-button>\n                      <span class=\"roll__damage-roll\" hidden$=\"[[isEditMode]]\" >[[damage.roll]]</span>\n                      <div class=\"roll__damage-roll--edit\" hidden$=\"[[!isEditMode]]\">\n                        <vaadin-text-field value=\"{{damage.roll}}\" on-change=\"_rollChangeHandler\" label=\"Damage Roll\"></vaadin-text-field>\n                      </div>\n                      <span class=\"roll__damage-type\" hidden$=\"[[isEditMode]]\">&nbsp;[[damage.type]] damage</span>\n                      <div class=\"roll__damage-type--edit\" hidden$=\"[[!isEditMode]]\">\n                        <vaadin-select value=\"{{damage.type}}\" on-change=\"_rollChangeHandler\" label=\"Damage Type\" >\n                          <template>\n                            <vaadin-list-box>\n                              <template is=\"dom-repeat\" items=\"[[damageTypes]]\">\n                                <vaadin-item>[[item]]</vaadin-item>\n                              </template>\n                            </vaadin-list-box>\n                          </template>\n                        </vaadin-select>\n                      </div>\n                    </div>\n                  </template>\n                  <dnd-button hidden$=\"[[!isEditMode]]\" on-click=\"_addDamage\" label=\"Add Damage\" icon=\"add\" class=\"roll__add-damage\"></dnd-button>\n                </div>\n              </div>\n            </div>\n          </template>\n        </div>\n\n      </div>\n    </div>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-rolls\", DndCharacterBuilderRolls);"],"sourceRoot":""}