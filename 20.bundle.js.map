{"version":3,"sources":["webpack:///./components/dnd-rules.js","webpack:///./components/views/dnd-rules-view.js"],"names":["rules","type","Array","selectedRule","Object","value","observer","contentsOrder","id","title","this","htmlcontent","$","rulescontent","innerHTML","tables","querySelectorAll","table","hash","length","hashName","category","values","rule","name","set","window","scrollTo","undefined","super","then","data","rulesObject","parentlist","push","shadowRoot","currentSelection","connectedCallback","selectionChangeHandler","e","detail","selection","deselectionChangeHandler","addEventListener","disconnectedCallback","removeEventListener","el","target","closest","getAttribute","a","customElements","define"],"mappings":"wJAQA,MAAM,UAAiB,IAErB,wBACE,MAAO,CACLA,MAAO,CACLC,KAAMC,OAERC,aAAc,CACZF,KAAMG,OACNC,MAAO,GACPC,SAAU,uBAEZC,cAAe,CACbN,KAAMC,MACNG,MAAO,IACE,CACL,CAAEG,GAAI,oBAAqBC,MAAO,sBAClC,CAAED,GAAI,YAAaC,MAAO,aAC1B,CAAED,GAAI,iBAAkBC,MAAO,oBAC/B,CAAED,GAAI,iBAAkBC,MAAO,oBAC/B,CAAED,GAAI,UAAWC,MAAO,WACxB,CAAED,GAAI,kBAAmBC,MAAO,uBAO1C,uBACE,MAAO,CACL,kCAIJ,sBACE,GAAIC,KAAKP,cAAgBO,KAAKP,aAAaQ,YAAa,CACtDD,KAAKE,EAAEC,aAAaC,UAAYJ,KAAKP,aAAaQ,YAClD,IAAII,EAASL,KAAKE,EAAEC,aAAaG,iBAAiB,SAClD,IAAK,IAAIC,KAASF,EAChB,iBAAOE,EAAO,oCAKpB,oBACE,GAAIP,KAAKV,OAASU,KAAKQ,MAAQR,KAAKQ,KAAKC,OAAS,EAAG,CACnD,IACIhB,EADAiB,EAAW,wBAAcV,KAAKQ,MAAM,GAExC,IAAK,IAAIG,KAAYjB,OAAOkB,OAAOZ,KAAKV,OAAQ,CAC9C,IAAK,IAAIuB,KAAQF,EACf,GAAIE,EAAKC,OAASJ,EAAU,CAC1BjB,EAAeoB,EACf,MAGJ,GAAIpB,EACF,MAGAA,GACFO,KAAKe,IAAI,eAAgBtB,GACzBuB,OAAOC,SAAS,EAAE,IAElB,aAAoB,QAGtBjB,KAAKe,IAAI,oBAAgBG,GAI7B,cACEC,QACA,YAAU,SAASC,KAAMC,IACvB,MAAMC,EAAc,GACdhC,EAAQ+B,EACd,IAAK,IAAIR,KAAQvB,EACXgC,EAAYT,EAAKU,YACnBD,EAAYT,EAAKU,YAAYC,KAAKX,GAElCS,EAAYT,EAAKU,YAAc,CAACV,GAGpCb,KAAKe,IAAI,QAASO,GAClB,8BAAoBtB,KAAKyB,YACzB,IAAIC,EAAmB,cACnBA,IACF1B,KAAKQ,KAAOkB,KAKlB,oBACEP,MAAMQ,oBAEN3B,KAAK4B,uBAA0BC,IACzBA,EAAEC,QAAUD,EAAEC,OAAOC,YACvB/B,KAAKQ,KAAOqB,EAAEC,OAAOC,YAGzB/B,KAAKgC,yBAA2B,KAC9BhC,KAAKe,IAAI,oBAAgBG,IAE3B,cAAoBe,iBAAiB,mBAAoBjC,KAAK4B,wBAC9D,cAAoBK,iBAAiB,uBAAwBjC,KAAKgC,0BAGpE,uBACEb,MAAMe,uBAENlC,KAAKgC,2BACL,cAAoBG,oBAAoB,mBAAoBnC,KAAK4B,wBACjE,cAAoBO,oBAAoB,uBAAwBnC,KAAKgC,0BAGvE,kBAAkBlC,EAAIR,GACpB,OAAOA,EAAQA,EAAMQ,GAAM,GAG7B,UAAU+B,GACR,IAAIO,EAAKP,EAAEQ,OAAOC,QAAQ,kBACtB3B,EAAWyB,EAAGG,aAAa,YAC3B1B,EAAOuB,EAAGG,aAAa,QACvB/B,EAAO,wBAAcR,KAAKV,MAAMqB,GAAUE,GAAMC,MACpD,YAAkBN,GAGpB,QAAQgC,GACN,QAASA,EAGX,sBACE,OAAO,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkCfC,eAAeC,OAAO,YAAa,GCxKnC,MAAM,UAAqB,IACzB,sBACE,OAAO,GAAI;;;;OAQfD,eAAeC,OAAO,iBAAkB","file":"20.bundle.js","sourcesContent":["import {PolymerElement, html} from '@polymer/polymer';\nimport \"@polymer/polymer/lib/elements/dom-repeat.js\";\nimport {loadModel} from \"../util/data.js\";\nimport \"./styles/material-styles.js\";\nimport \"./styles/my-styles.js\";\nimport { jqWrap, initCollapseToggles, encodeForHash, decodeForHash } from \"../js/utils.js\";\nimport { clearRouteSelection, setRouteSelection, routeEventChannel, readRouteSelection } from '../util/routing.js';\n\nclass DndRules extends PolymerElement {\n  \n  static get properties() {\n    return {\n      rules: {\n        type: Array\n      },\n      selectedRule: {\n        type: Object,\n        value: '',\n        observer: '_selectedRuleChange'\n      },\n      contentsOrder: {\n        type: Array,\n        value: () => {\n          return [\n            { id: \"charactercreation\", title: \"Character Creation\" },\n            { id: \"equipment\", title: \"Equipment\" },\n            { id: \"playingthegame\", title: \"Playing the Game\" },\n            { id: \"runningthegame\", title: \"Running the Game\" },\n            { id: \"setting\", title: \"Setting\" },\n            { id: \"unearthedarcana\", title: \"Unearthed Arcana\" }\n          ];\n        }\n      }\n    };\n  }\n\n  static get observers() {\n    return [\n      '_openRuleFromHash(hash, rules)'\n    ]\n  }\n\n  _selectedRuleChange() {\n    if (this.selectedRule && this.selectedRule.htmlcontent) {\n      this.$.rulescontent.innerHTML = this.selectedRule.htmlcontent;\n      let tables = this.$.rulescontent.querySelectorAll(\"table\");\n      for (let table of tables) {\n        jqWrap(table, '<div class=\"table-scroll-wrap\">');\n      }\n    }\n  }\n\n  _openRuleFromHash() {\n    if (this.rules && this.hash && this.hash.length > 1) {\n      let hashName = decodeForHash(this.hash)[0];\n      let selectedRule;\n      for (let category of Object.values(this.rules)) {\n        for (let rule of category) {\n          if (rule.name === hashName) {\n            selectedRule = rule;\n            break;\n          }\n        }\n        if (selectedRule) {\n          break;\n        }\n      }\n      if (selectedRule) {\n        this.set(\"selectedRule\", selectedRule);\n        window.scrollTo(0,0);\n      } else {\n        clearRouteSelection(true);\n      }\n    } else {\n      this.set(\"selectedRule\", undefined);\n    }\n  }\n\n  constructor() {\n    super();\n    loadModel(\"rules\").then((data) => {\n      const rulesObject = {};\n      const rules = data;\n      for (let rule of rules) {\n        if (rulesObject[rule.parentlist]) {\n          rulesObject[rule.parentlist].push(rule);\n        } else {\n          rulesObject[rule.parentlist] = [rule];\n        }\n      }\n      this.set('rules', rulesObject);\n      initCollapseToggles(this.shadowRoot);\n      let currentSelection = readRouteSelection();\n      if (currentSelection) {\n        this.hash = currentSelection;\n      }\n    });\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.selectionChangeHandler = (e) => {\n      if (e.detail && e.detail.selection) {\n        this.hash = e.detail.selection;\n      }\n    };\n    this.deselectionChangeHandler = () => {\n      this.set(\"selectedRule\", undefined);\n    }\n    routeEventChannel().addEventListener(\"selection-change\", this.selectionChangeHandler);\n    routeEventChannel().addEventListener(\"selection-deselected\", this.deselectionChangeHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.deselectionChangeHandler();\n    routeEventChannel().removeEventListener(\"selection-change\", this.selectionChangeHandler);\n    routeEventChannel().removeEventListener(\"selection-deselected\", this.deselectionChangeHandler);\n  }\n\n  _getCategoryRules(id, rules) {\n    return rules ? rules[id] : '';\n  }\n\n  _openRule(e) {\n    let el = e.target.closest('.mdc-list-item');\n    let category = el.getAttribute(\"category\");\n    let rule = el.getAttribute(\"rule\");\n    let hash = encodeForHash(this.rules[category][rule].name);\n    setRouteSelection(hash);\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  static get template() {\n    return html`\n      <style include=\"material-styles my-styles\"></style>\n\n      <div class=\"rules-wrapper\" hidden$=\"[[_exists(selectedRule)]]\">\n        <template is=\"dom-repeat\" items=\"[[contentsOrder]]\" as=\"category\">\n          <div class=\"collapse collapse--left-arrow open\">\n            <div class=\"collapse-toggle\">\n              <div class=\"mdc-list-item rule-title mdc-theme--on-surface\">\n                [[category.title]]\n              </div>\n            </div>\n            <div class=\"collapse-wrapper\">\n              <ul class$=\"collapse-list rules [[category.id]]\">\n                <template is=\"dom-repeat\" items=\"[[_getCategoryRules(category.id, rules)]]\" as=\"rule\">\n                  <div\n                    class=\"mdc-list-item mdc-theme--on-surface\"\n                    on-click=\"_openRule\"\n                    category$=\"[[category.id]]\"\n                    rule$=\"[[index]]\"\n                  >\n                    <span class=\"name col-xs-12\">[[rule.name]]</span>\n                  </div>\n                </template>\n              </ul>\n            </div>\n          </div>\n        </template>\n      </div>\n\n      <div id=\"rulescontent\" hidden$=\"[[!_exists(selectedRule)]]\"></div>\n    `;\n  }\n}\n\ncustomElements.define('dnd-rules', DndRules);","import {PolymerElement, html} from '@polymer/polymer';\nimport '../styles/material-styles.js';\nimport '../styles/my-styles.js';\nimport '../dnd-rules';\n\nclass DndRulesView extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"material-styles my-styles\"></style>\n\n      <dnd-rules></dnd-rules>\n    `;\n  }\n}\n\ncustomElements.define('dnd-rules-view', DndRulesView);"],"sourceRoot":""}