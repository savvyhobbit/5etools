{"version":3,"sources":["webpack:///./components/views/character/dnd-character-builder-spells.js"],"names":["DndCharacterBuilderSpells","spellsKnown","type","Object","value","preparedSpells","noContentMessage","Boolean","isEditMode","filterStr","String","observer","expandedItems","Array","this","length","oldExpanded","$","grid","expandAll","clearCache","setTimeout","undefined","super","_filterChange","__filterChangeThrottled","bind","connectedCallback","characterChangeHandler","e","character","detail","updateFromCharacter","refresh","addEventListener","editModeHandler","disconnectedCallback","removeEventListener","ready","multiclassSlotsDef","fullCasterSlotsDef","halfCasterSlotsDef","thirdCasterSlotsDef","dataProvider","params","callback","startIndex","page","pageSize","children","parentItem","spellDisplay","filter","child","hasDecendentWithFilter","toLowerCase","slice","node","name","indexOf","findExpandables","array","id","push","customSpellMod","customSpellModVal","customSpellDC","customSpellDCVal","customSpellAttackBonus","customSpellAttackBonusVal","classRefs","classLevels","proficiencyBonus","spellsKnownObj","spellMods","className","classLevel","entries","classRef","casterSourceRef","isSubclass","tableGroups","classTableGroups","casterName","casterProgression","subclasses","subclassDef","find","i","shortName","subclassTableGroups","spellsKnownOrPrepared","spellsKnowPreparedType","cantripsKnown","cantripProgression","warlockSpellLevel","warlockSpellSlots","spellsKnownProgression","levelMultiplier","attributeModifier","spellcastingAbility","Math","floor","console","error","subclassName","classSpellList","searchSource","source","searchName","replaceAll","trim","key","divineSoulSpellList","Set","concat","spellTable","tableGroup","title","spellSlotEntries","rowsSpellProgression","spellSlots","hasCantrips","oldSpellsPrepared","oldCantripsPrepared","preparedCantrips","map","index","spellList","spell","level","sort","a","b","isCantrip","isPrepared","isAlwaysPrepared","hasChildren","parentClass","parentLevel","isWarlock","levelObj","currentSlots","some","item","slots","current","keys","max","maxCantrips","currentCantrips","classObj","spellPrepType","multiclassingLevels","additionalSpellChoices","values","choices","c","additionalSpells","spellsModel","addtlSpellsObj","forEach","spellChoice","defaultSpells","selectedSpells","spellChoiceEntry","spells","s","addtlSpell","spellDef","spellLevel","spellClass","label","storedItemName","selectedItemName","addtlSpellsClass","addtlSpellsClassVal","spellDisplayForClass","sdClass","hadToAddClass","addtlSpellsClassLevel","addtlSpellsClassLevelVal","parsedAddtlSpellsClassLevel","parseInt","spellDisplayForClassLevel","sdLevel","spellAlreadyAdded","uses","spellUseType","ability","selectedAbility","defaultAbility","superLabel","l","join","otherSpells","Other","otherSpellLevel","otherSpellList","otherSpell","destListType","destList","otherSpellsObj","newSpellDisplay","otherClass","multiclassLevel","isMulticlass","adjIndex","multiclassSlotsArray","spellLvl","spellDisplayForLevel","sd","currentWarlockSlots","dispatchEvent","CustomEvent","bubbles","composed","preventDefault","stopPropagation","model","_toggleCantripPrepared","_isPreparedSpell","currentPreparedCount","_currentSpellsKnownCount","maxPreparedCount","_maxSpellsKnownCount","spellsKnownCopy","JSON","parse","stringify","splice","_flashPreparedButton","_isPreparedCantrip","_currentCantripsKnownCount","_maxCantripsKnownCount","buttonEl","classList","add","remove","isInput","maxSlots","checked","_setSpellSlotsChecked","count","el","checkboxes","querySelectorAll","mod","isProficient","isExpertise","srcElement","contains","clickedSpellModIndex","dataset","spellAttackBonus","classes","rollForm","spellName","prepareType","data","spLevelToFull","newValue","currentTarget","spellParent","meta","ritual","duration","d","concentration","time","t","unit","SP_SCHOOL_ABV_TO_FULL","school","clas","num","customElements","define"],"mappings":"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","file":"10.bundle.js","sourcesContent":["import { PolymerElement,html } from \"@polymer/polymer\";\nimport {\n  getCharacterChannel,\n  getSelectedCharacter,\n  getClassReferences,\n  getClassLevelGroups,\n  toggleSpellPrepared,\n  saveCharacter,\n  getAttributeModifier,\n  isSpellPreparedFromObj,\n  setSpellSlots,\n  getSpellSlots,\n  toggleCantripPrepared,\n  getSubclassChoiceLevel,\n  getSpellCastingStats,\n  getCharacterProficiencyBonus,\n  toggleCustomSpellMod,\n  setCustomSpellModVal,\n  toggleCustomSpellDC,\n  setCustomSpellDCVal,\n  toggleCustomSpellAttackBonus,\n  setCustomSpellAttackBonusVal,\n} from \"../../../util/charBuilder\";\nimport { rollDice } from \"../../../util/roll\";\nimport { filterModel, loadModel } from \"../../../util/data\";\nimport { dispatchEditModeChange, getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { spellHtml } from \"../../../js/spells\";\nimport { findInPath, util_capitalize, util_capitalizeAll, debounce, cloneDeep } from \"../../../js/utils\";\nimport Parser from \"../../../util/Parser\";\nimport '@vaadin/polymer-legacy-adapter/template-renderer.js';\nimport \"@vaadin/vaadin-checkbox\";\nimport \"@vaadin/vaadin-text-field\";\nimport \"@vaadin/vaadin-text-field/vaadin-integer-field\";\nimport \"@vaadin/vaadin-grid\";\nimport \"@vaadin/vaadin-grid/vaadin-grid-tree-toggle\";\nimport \"../../dnd-button\";\n\nclass DndCharacterBuilderSpells extends PolymerElement {\n  \n  static get properties() {\n    return {\n      spellsKnown: {\n        type: Object,\n        value: {}\n      },\n      preparedSpells: {\n        type: Object,\n        value: {}\n      },\n      noContentMessage: {\n        type: Boolean,\n        value: false\n      },\n      isEditMode: {\n        type: Boolean,\n        value: false\n      },\n      filterStr: {\n        type: String,\n        value: '',\n        observer: '_filterChange'\n      },\n      expandedItems: {\n        type: Array\n      },\n    };\n  }\n\n  __filterChangeThrottled() {\n    if (this.filterStr.length) {\n      if (!this.oldExpanded) {\n        this.oldExpanded = this.$.grid.expandedItems;\n      }\n      this.expandAll();\n      this.$.grid.clearCache();\n      setTimeout(() => {\n        this.expandAll();\n      }, 10);\n    } else {\n      if (this.oldExpanded) {\n        this.$.grid.expandedItems = this.oldExpanded;\n        this.oldExpanded = undefined;\n      }\n      this.$.grid.clearCache();\n    }\n  }\n\n  constructor() {\n    super();\n\n    this._filterChange = debounce(this.__filterChangeThrottled.bind(this), 250);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.characterChangeHandler = (e) => {\n      let character = e.detail.character;\n      this.updateFromCharacter(character);\n    };\n    this.refresh = true;\n    this.updateFromCharacter(getSelectedCharacter());\n    getCharacterChannel().addEventListener(\"character-selected\",this.characterChangeHandler);\n\n    this.editModeHandler = (e) => {\n      this.isEditMode = e.detail.isEditMode;\n      this.refresh = true;\n      this.updateFromCharacter(getSelectedCharacter());\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.isEditMode = isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    getCharacterChannel().removeEventListener(\"character-selected\",this.characterChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  ready() {\n    super.ready();\n\n    this.multiclassSlotsDef = [\n      [2],\n      [3],\n      [4,2],\n      [4,3],\n      [4,3,2],\n      [4,3,3],\n      [4,3,3,1],\n      [4,3,3,2],\n      [4,3,3,3,1],\n      [4,3,3,3,2],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1],\n      [4,3,3,3,2,1,1,1,1],\n      [4,3,3,3,3,1,1,1,1],\n      [4,3,3,3,3,2,1,1,1],\n      [4,3,3,3,3,2,2,1,1]\n    ];\n\n    this.fullCasterSlotsDef = [];\n\n    this.halfCasterSlotsDef = [];\n    \n    this.thirdCasterSlotsDef = [];\n\n    setTimeout(() => {\n      const grid = this.$.grid;\n\n      grid.dataProvider = ((params, callback) => {\n        const startIndex = params.page * params.pageSize;\n        let children = params.parentItem ? params.parentItem.children : this.spellDisplay;\n        if (this.filterStr.length) {\n          children = children.filter((child) => {\n            return this.hasDecendentWithFilter(child, this.filterStr.toLowerCase()) \n          });\n        }\n        if (children && children.length) {\n          const page = children.slice(startIndex, startIndex + params.pageSize);\n          callback(page, children.length);\n        }\n      }).bind(this);\n    }, 0);\n  }\n\n  hasDecendentWithFilter(node, filterStr) {\n    if (!node.name || node.name.toLowerCase().indexOf(filterStr) > -1) {\n      return true;\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        return this.hasDecendentWithFilter(child, filterStr);\n      }\n    }\n    return false;\n  }\n\n  clearFilterStr() {\n    this.filterStr = '';\n  }\n\n  expandAll() {\n    this.$.grid.expandedItems = this.findExpandables(this.spellDisplay);\n  }\n\n  findExpandables(node, array = []) {\n    if (node.id === 'level' || node.id === 'class') {\n      array.push(node);\n    }\n    const children = node.length ? node : node.children;\n    if (children && children.length) {\n      for (let child of children) {\n        this.findExpandables(child, array);\n      }\n    }\n    return array;\n  }\n\n  async updateFromCharacter(character) {\n    if (character) {\n      this.customSpellMod = !!character.customSpellMod;\n      this.customSpellModVal = character.customSpellModVal;\n      this.customSpellDC = !!character.customSpellDC;\n      this.customSpellDCVal = character.customSpellDCVal;\n      this.customSpellAttackBonus = !!character.customSpellAttackBonus;\n      this.customSpellAttackBonusVal = character.customSpellAttackBonusVal;\n    }\n    if (character && this.refresh) {\n      this.noContentMessage = true;\n      const classRefs = await getClassReferences(character),\n        classLevels = getClassLevelGroups(character),\n        proficiencyBonus = await getCharacterProficiencyBonus(),\n        expandedItems = [],\n        spellsKnownObj = {};\n      let spellDisplay = [];\n\n      this.spellMods = await getSpellCastingStats(character);\n\n      for (const [ className, classLevel ] of Object.entries(classLevels)) {\n        const classRef = classRefs[className];\n        let casterSourceRef = classRef;\n        let isSubclass = false;\n        let tableGroups = classRef.classTableGroups;\n        let casterName = className;\n\n        // Checking the class first for a caster progression, then checking subclass\n        if (!casterSourceRef.casterProgression) {\n          const subclassLevel = getSubclassChoiceLevel(classRef);\n          if (classLevel >= subclassLevel && character.subclasses && character.subclasses[className] && classRef.subclasses && classRef.subclasses.length) {\n            const subclassDef = classRef.subclasses.find(i => character.subclasses[className].name === i.name);\n            if (subclassDef && subclassDef.casterProgression) {\n              // replacing caster parsing references with that from subclass \n              casterSourceRef = subclassDef;\n              casterName = subclassDef.shortName;\n              tableGroups = subclassDef.subclassTableGroups;\n              isSubclass = true;\n            }\n          }\n        }\n\n        if (casterSourceRef.casterProgression) {\n          this.noContentMessage = false;\n          let spellsKnownOrPrepared;\n          let spellsKnowPreparedType;\n          const cantripsKnown = casterSourceRef.cantripProgression ? casterSourceRef.cantripProgression[classLevel - 1] : 0;\n          let warlockSpellLevel;\n          let warlockSpellSlots;\n\n          // Use spell known progression\n          if (casterSourceRef.spellsKnownProgression) {\n            spellsKnowPreparedType = 'known';\n            spellsKnownOrPrepared = casterSourceRef.spellsKnownProgression[classLevel - 1];\n            if (casterSourceRef.casterProgression === 'pact') {\n              warlockSpellLevel = [1,1,2,2,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,5][classLevel - 1];\n              warlockSpellSlots = [1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4][classLevel - 1];\n            }\n\n          // otherwise compute spells prepared\n          } else if (casterSourceRef.preparedSpells) {\n            spellsKnowPreparedType = 'prepared';\n            // todo, check 1/3 caster progression\n            const levelMultiplier = casterSourceRef.casterProgression === 'full' ? 1 : 0.51;\n            const attributeModifier = await getAttributeModifier(casterSourceRef.spellcastingAbility);\n            spellsKnownOrPrepared = Math.floor(classLevel * levelMultiplier) + attributeModifier;\n            spellsKnownOrPrepared = spellsKnownOrPrepared < 1 ? 1 : spellsKnownOrPrepared;\n\n          } else {\n            console.error('!!! neither prepared or known spells', casterSourceRef);\n          }\n\n          /* SPELL LISTS */\n          // Getting class spell list\n          let classSpellList = [];\n          let subclassName;\n          \n          if (isSubclass) {\n            subclassName = casterSourceRef.shortName;\n          } else {\n            // Revised Ranger fix\n            let searchSource = casterSourceRef.name.indexOf('(Revised)') > -1 ? 'PHB' : casterSourceRef.source;\n            let searchName = casterSourceRef.name.indexOf('(Revised)') > -1 ? casterSourceRef.name.replaceAll('(Revised)', '').trim() : casterSourceRef.name;\n            classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: searchName, source: searchSource } } );\n\n            const subclassLevel = getSubclassChoiceLevel(classRef);\n            if (classLevel >= subclassLevel) {\n              subclassName = character.subclasses && character.subclasses[className] ? character.subclasses[className].shortName : '';\n            }\n          }\n\n          // Spell lists borrowed from other classes\n          if (subclassName) {\n            if (subclassName === 'Eldritch Knight') {\n              classSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'wizard', source: 'phb' } } );\n            }\n            if (subclassName === 'Divine Soul') {\n              let divineSoulSpellList = await filterModel('spells', { key: 'classes.fromClassList', value: { name: 'cleric', source: 'phb' } } );\n              classSpellList = [...new Set(classSpellList.concat(divineSoulSpellList))];\n            }\n          }\n\n          // Getting spell slots per level array\n          const spellTable = tableGroups.find((tableGroup) => tableGroup.title === \"Spell Slots\");\n          let spellSlotEntries;\n          if (spellTable) {\n            spellSlotEntries = spellTable.rowsSpellProgression[classLevel - 1].filter((spellSlots) => spellSlots !== 0);\n          } else {\n            // If no spell slots per level, then we're a warlock, get spell entries for\n            // warlocks with zero spell slots at each level (pact slots will be added later)\n            spellSlotEntries = [];\n            for (let i = 0; i < warlockSpellLevel; i++) {\n              spellSlotEntries.push(0);\n            }\n          }\n\n          // Adding cantrips entry\n          const hasCantrips = cantripsKnown ? 0 : 1;\n          if (cantripsKnown) {\n            spellSlotEntries = [0].concat(spellSlotEntries);\n          }\n\n          // Clearing prepared spells to filter out those that can no longer be prepared\n          let oldSpellsPrepared = cloneDeep(character.preparedSpells);\n          let oldCantripsPrepared = cloneDeep(character.preparedCantrips);\n          character.preparedSpells[casterName] = {};\n          character.preparedCantrips[casterName] = {};\n          \n\n          // Generating hierarchical structure of classes > levels > spells > spellDef\n          const spellSlots = spellSlotEntries.map((spellSlots, index) => {\n            if (spellSlots !== -1) {\n              let spellList = classSpellList\n                .filter((spell) => {\n                  return spell.level === index + hasCantrips;\n                })\n                .sort((a, b) => {\n                  if (a.name < b.name) { return -1; }\n                  if (a.name > b.name) { return 1; }\n                  return 0;\n                })\n                .map(spell => {\n                  const isCantrip = index + hasCantrips === 0;\n                  const isPrepared = isCantrip ? isSpellPreparedFromObj(casterName, spell, oldCantripsPrepared) : isSpellPreparedFromObj(casterName, spell, oldSpellsPrepared);\n                  if (isPrepared) {\n                    if (isCantrip) {\n                      character.preparedCantrips[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    } else {\n                      character.preparedSpells[casterName][spell.name] = {name: spell.name, source: spell.source};\n                    }\n                  }\n                  if (this.isEditMode || isPrepared || spell.isAlwaysPrepared) {\n                    return {\n                      id: 'spell',\n                      name: spell.name, \n                      children: [{...spell, hasChildren: false, id: 'spelldef', parentClass: casterName, parentLevel: index + hasCantrips} ],\n                      hasChildren: true,\n                      parentClass: casterName,\n                      parentLevel: index + hasCantrips,\n                      isCantrip,\n                      isAlwaysPrepared: spell.isAlwaysPrepared,\n                      isWarlock: !!warlockSpellLevel\n                    };\n                  } else {\n                    return undefined;\n                  }\n                })\n                .filter((spell) => spell !== undefined);\n\n              const levelObj = {\n                id: 'level',\n                level: index + hasCantrips,\n                spellSlots,\n                currentSlots: getSpellSlots(index + hasCantrips),\n                children: spellList,\n                hasChildren: spellList.length > 0,\n                parentClass: casterName,\n                isWarlock: !!warlockSpellLevel\n              };\n              const isExpanded = this.$.grid.expandedItems.some(item => item.id === 'level' && item.level === levelObj.level && item.parentClass === levelObj.parentClass);\n              if (isExpanded) {\n                expandedItems.push(levelObj);\n              }\n              return levelObj;\n            } else {\n              return null\n            }\n          }).filter(slots => slots !== null);\n\n          spellsKnownObj[casterName] = {\n            current: character.preparedSpells && character.preparedSpells[casterName] ? Object.keys(character.preparedSpells[casterName]) : [],\n            max: spellsKnownOrPrepared,\n            type: spellsKnowPreparedType,\n            maxCantrips: cantripsKnown,\n            currentCantrips: character.preparedCantrips && character.preparedCantrips[casterName] ? Object.keys(character.preparedCantrips[casterName]) : []\n          };\n\n          if (spellSlots.length) {\n            const classObj = {\n              id: 'class',\n              className: casterName,\n              level: classLevel,\n              hasCantrips,\n              children: spellSlots,\n              spellsKnown: spellsKnownOrPrepared,\n              hasChildren: spellSlots.length > 0,\n              spellPrepType: spellsKnowPreparedType,\n              multiclassingLevels: isSubclass ? 0 : Math.floor((classRef.casterProgression === 'full' ? 1 : 0.5) * classLevel),\n              isWarlock: !!warlockSpellLevel,\n              warlockSpellLevel,\n              warlockSpellSlots\n            };\n            expandedItems.push(classObj);\n            spellDisplay.push(classObj);\n          }\n        }\n      } // end level loop\n\n      // Parsing additionalSpells\n      const additionalSpellChoices = Object.values(character.choices).filter((c) => !!c.additionalSpells);\n      const spellsModel = await loadModel('spells');\n      const addtlSpellsObj = {};\n      additionalSpellChoices.forEach(spellChoice => {\n        const allAddtlSpells = spellChoice.additionalSpells.defaultSpells.concat(spellChoice.additionalSpells.selectedSpells);\n\n        allAddtlSpells.forEach((spellChoiceEntry) => {\n          const spellsForThisEntry = spellChoiceEntry.spells ? spellChoiceEntry.spells.map(s=> { return {...spellChoiceEntry, ...s}}) : [spellChoiceEntry];\n\n          spellsForThisEntry.forEach((addtlSpell) => {\n            const spellDef = spellsModel.find(s => s.name.toLowerCase() === addtlSpell.name.toLowerCase() && s.source.toLowerCase() === addtlSpell.source.toLowerCase());\n            \n            if (spellDef) {\n              const spellLevel = spellDef.level;\n              const spellClass = spellChoice.label && (addtlSpell.type === 'expanded' || addtlSpell.type === 'prepared' || addtlSpell.type === 'known') && Object.keys(classLevels).find((c) => c.toLowerCase() === spellChoice.label.toLowerCase()) ? spellChoice.label : 'Other';\n\n              if (!addtlSpellsObj[spellClass]) {\n                addtlSpellsObj[spellClass] = {};\n              }\n              if (!addtlSpellsObj[spellClass][spellLevel]) {\n                addtlSpellsObj[spellClass][spellLevel] = [];\n              }\n  \n              addtlSpellsObj[spellClass][spellLevel].push({storedItemName: spellChoice.selectedItemName, ...spellChoice.additionalSpells,...addtlSpell, ...spellChoiceEntry, label: spellChoice.label, spellDef});\n            }\n          })\n        });\n      });\n      console.error('addtlSpellsObj', addtlSpellsObj, spellDisplay);\n\n      // Adding additional spells\n      Object.entries(addtlSpellsObj).forEach(([addtlSpellsClass, addtlSpellsClassVal]) => {\n        this.noContentMessage = false;\n\n        if (addtlSpellsClass !== 'Other') {\n          let spellDisplayForClass = spellDisplay.find((sdClass) => sdClass.className.toLowerCase() === addtlSpellsClass),\n            hadToAddClass = false;\n\n          // If no class entry exists, class is not a spell caster so adding one manually\n          if (!spellDisplayForClass) {\n            hadToAddClass = true;\n            spellDisplay.push({\n              id: 'class',\n              className: util_capitalize(addtlSpellsClass),\n              level: 0,\n              hasCantrips: false,\n              children: [],\n              spellsKnown: 0,\n              hasChildren: true,\n              spellPrepType: 'always',\n              multiclassingLevels: 0,\n              isWarlock: false,\n              warlockSpellLevel: 0,\n              warlockSpellSlots: 0,\n              hadToAddClass: true\n            });\n            spellDisplayForClass = spellDisplay[spellDisplay.length - 1];\n            expandedItems.push(spellDisplayForClass);\n          }\n          Object.entries(addtlSpellsClassVal).forEach(([addtlSpellsClassLevel, addtlSpellsClassLevelVal]) => {\n            const parsedAddtlSpellsClassLevel = parseInt(addtlSpellsClassLevel);\n            let spellDisplayForClassLevel = spellDisplayForClass.children.find(sdLevel => sdLevel.level === parsedAddtlSpellsClassLevel) || null;\n\n            // Adding level if needed and not already present for class\n            if (!spellDisplayForClassLevel && (parsedAddtlSpellsClassLevel === 0 || hadToAddClass)) {\n              spellDisplayForClass.children = [{\n                id: 'level',\n                level: parsedAddtlSpellsClassLevel,\n                hasChildren: true,\n                children: [],\n                parentClass: addtlSpellsClass\n              }].concat(spellDisplayForClass.children);\n              spellDisplayForClassLevel = spellDisplayForClass.children[0];\n              if (spellDisplayForClass.children.find((c => c.level === 0))) {\n                spellDisplayForClass.hasCantrips = 0;\n              }\n            }\n\n            if (spellDisplayForClassLevel) {\n              addtlSpellsClassLevelVal.forEach(addtlSpell => {\n                const spellAlreadyAdded = spellDisplayForClassLevel.children.find((s) => s.children[0].name === addtlSpell.spellDef.name && s.children[0].source === addtlSpell.spellDef.source);\n\n                if (spellAlreadyAdded) {\n                  spellAlreadyAdded.isAlwaysPrepared = true;\n                  spellAlreadyAdded.spellSlots = addtlSpell.uses === 'proficiency' ? proficiencyBonus : addtlSpell.uses;\n                  spellAlreadyAdded.spellUseType = addtlSpell.type;\n                  spellAlreadyAdded.currentSlots = character.spellSlots && character.spellSlots[addtlSpell.spellDef.name] ? character.spellSlots[addtlSpell.spellDef.name] : 0\n                  spellAlreadyAdded.ability = addtlSpell.selectedAbility || addtlSpell.defaultAbility;\n                  spellAlreadyAdded.superLabel = [addtlSpell.label, addtlSpell.storedItemName].filter(l => !!l).map(util_capitalize).join(': ');\n                } else {\n                  spellDisplayForClassLevel.children.push({\n                    id: 'spell',\n                    name: addtlSpell.spellDef.name,\n                    children: [{...addtlSpell.spellDef, hasChildren: false, id: 'spelldef', parentClass: addtlSpellsClass, parentLevel: addtlSpellsClassLevel, uses: addtlSpell.uses} ],\n                    hasChildren: true,\n                    parentClass: addtlSpellsClass,\n                    parentLevel: addtlSpellsClassLevel,\n                    isCantrip: addtlSpellsClassLevel === 0,\n                    isAlwaysPrepared: true,\n                    isWarlock: addtlSpellsClass === 'warlock',\n                    spellUseType: addtlSpell.type,\n                    spellSlots: addtlSpell.uses === 'proficiency' ? proficiencyBonus : addtlSpell.uses,\n                    ability: addtlSpell.selectedAbility || addtlSpell.defaultAbility,\n                    currentSlots: character.spellSlots && character.spellSlots[addtlSpell.spellDef.name] ? character.spellSlots[addtlSpell.spellDef.name] : 0,\n                    superLabel: [addtlSpell.label, addtlSpell.storedItemName].filter(l => !!l).map(util_capitalize).join(': ')\n                  });\n                }\n              })\n            }\n          });\n\n        // Other additional Spells\n        } else {\n          const otherSpells = [] \n          Object.entries(addtlSpellsObj.Other).forEach(([otherSpellLevel, otherSpellList]) => {\n            otherSpellList.forEach((otherSpell) => {\n              const destListType = otherSpell.type === 'will' || otherSpell.spellDef.level === 0 ? 'At Will' : 'Innate';\n              let destList = otherSpells.find(l => l.level === destListType);\n              if (!destList) {\n                destList = {\n                  id: 'level',\n                  level: destListType,\n                  spellSlots: 0,\n                  currentSlots: 0,\n                  children: [],\n                  hasChildren: true,\n                  parentClass: 'Other'\n                }\n                otherSpells.push(destList);\n              }\n              destList.children.push({\n                id: 'spell',\n                name: otherSpell.spellDef.name,\n                children: [{...otherSpell.spellDef, hasChildren: false, id: 'spelldef', parentClass: \"Other\", parentLevel: \"Other\"} ],\n                hasChildren: true,\n                parentClass: \"Other\",\n                parentLevel: \"Other\",\n                isCantrip: false,\n                isAlwaysPrepared: true,\n                isWarlock: false,\n                spellUseType: otherSpell.type,\n                spellSlots: otherSpell.uses === 'proficiency' ? proficiencyBonus : otherSpell.uses,\n                ability: otherSpell.selectedAbility || otherSpell.defaultAbility,\n                currentSlots: character.spellSlots && character.spellSlots[otherSpell.spellDef.name] ? character.spellSlots[otherSpell.spellDef.name] : 0,\n                superLabel: [otherSpell.label, otherSpell.storedItemName].filter(l => !!l).map(util_capitalize).join(': ')\n              })\n            });\n          });\n  \n          const otherSpellsObj = {\n            id: 'class',\n            className: 'Other',\n            level: 0,\n            hasCantrips: false,\n            children: otherSpells,\n            spellsKnown: 0,\n            hasChildren: otherSpells > 0,\n            spellPrepType: 'always',\n            multiclassingLevels: 0,\n            isWarlock: false,\n            warlockSpellLevel: 0,\n            warlockSpellSlots: 0\n          };\n          spellDisplay.push(otherSpellsObj);\n          expandedItems.push(otherSpellsObj);\n        }\n      });\n\n      // sorting most levels first\n      spellDisplay.sort((a, b) => {\n        if (a.className === 'Other') {\n          return -1\n        }\n        return b.children.length - a.children.length\n      });\n\n      // Changing structure for non-edit mode & multiclassing\n      if (!this.isEditMode) {\n        let newSpellDisplay = [];\n        if (spellDisplay.length) {\n          let multiclassLevel = 0,\n            isMulticlass = -1,\n            warlockSpellLevel,\n            warlockSpellSlots,\n            otherClass;\n\n          // Combine all class spell levels into single references\n          for (let spellClass of spellDisplay) {\n            if (spellClass.className !== 'Other') {\n              if (!spellClass.hadToAddClass) {\n                if (!spellClass.isWarlock) {\n                  multiclassLevel += spellClass.multiclassingLevels;\n                  isMulticlass ++;\n                } else {\n                  warlockSpellLevel = spellClass.warlockSpellLevel;\n                  warlockSpellSlots = spellClass.warlockSpellSlots;\n                  isMulticlass ++;\n                }\n              }\n\n              spellClass.children.forEach((spellLevel, index) => {\n                const adjIndex = index + spellClass.hasCantrips;\n                if (!newSpellDisplay[adjIndex]) {\n                  newSpellDisplay[adjIndex] = spellLevel;\n                } else {\n                  newSpellDisplay[adjIndex].children = newSpellDisplay[adjIndex].children.concat(spellLevel.children);\n                  newSpellDisplay[adjIndex].hasChildren = !!newSpellDisplay[adjIndex].children.length;\n                }\n              });\n            } else if (spellClass.className === 'Other') {\n              otherClass = spellClass;\n            }\n          }\n\n          // remove index 0 if no cantrips\n          newSpellDisplay = newSpellDisplay.filter(i => i !== undefined);\n\n          // Changing spell slots for multiclass rules\n          const hasCantrips = newSpellDisplay.length && newSpellDisplay[0].level === 0;\n          if (isMulticlass > 0) {\n            const multiclassSlotsArray = this.multiclassSlotsDef[multiclassLevel - 1];\n\n            for (let i = 0; i < multiclassSlotsArray.length; i++) {\n              const spellLvl = i + 1;\n              const spellSlots =  multiclassSlotsArray[i];\n              const spellDisplayForLevel = newSpellDisplay.find(sd => sd.level === spellLvl);\n\n              if (spellDisplayForLevel) {\n                spellDisplayForLevel.spellSlots = spellSlots;\n              } else {\n                newSpellDisplay.push({\n                  children: [],\n                  currentSlots: getSpellSlots(spellLvl),\n                  hasChildren: false,\n                  id: \"level\",\n                  isWarlock: false,\n                  level: spellLvl,\n                  spellSlots\n                });\n              }\n            }\n          }\n\n          // Adding warlock slots\n          if (warlockSpellLevel) {\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].warlockSpellSlots = warlockSpellSlots;\n            newSpellDisplay[warlockSpellLevel - (hasCantrips ? 0 : 1)].currentWarlockSlots = character.warlockSpellSlots || 0;\n          }\n\n          if (otherClass) {\n            newSpellDisplay = otherClass.children.concat(newSpellDisplay);\n          }\n        }\n        spellDisplay = newSpellDisplay;\n      }\n\n      console.error('spellDisplay', spellDisplay);\n      this.refresh = false;\n      saveCharacter(character);\n      this.spellsKnown = spellsKnownObj;\n      this.spellDisplay = spellDisplay;\n      this.expandedItems = expandedItems;\n      this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n      this.$.grid.clearCache();\n    }\n  }\n\n  _renderSpell(spell) {\n    return `<div class=\"statsBlockHead\"><span class=\"stat-name\">${spell.name}</span></div>` + spellHtml(spell);\n  }\n\n  _toggleSpellPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isAlwaysPrepared = e.model.item.isAlwaysPrepared;\n    if (!isAlwaysPrepared && this.isEditMode) {\n      const isCantrip = e.model.item.isCantrip;\n      if (isCantrip) {\n        this._toggleCantripPrepared(e);\n      } else {\n        const className = e.model.item.parentClass;\n        const spell = e.model.item.children[0];\n        const isPrepared = this._isPreparedSpell(this.spellsKnown, className, spell.name);\n        const currentPreparedCount = this._currentSpellsKnownCount(className, this.spellsKnown);\n        const maxPreparedCount = this._maxSpellsKnownCount(className, this.spellsKnown);\n\n        if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n          let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n          if (isPrepared) {\n            const index = spellsKnownCopy[className].current.indexOf(spell.name);\n            spellsKnownCopy[className].current.splice(index, 1);\n          } else {\n            spellsKnownCopy[className].current.push(spell.name);\n          }\n          this.spellsKnown = spellsKnownCopy;\n          toggleSpellPrepared(className, spell);\n        } else if (currentPreparedCount >= maxPreparedCount) {\n          this._flashPreparedButton(findInPath('button', e));\n        }\n      }\n    }\n  }\n\n  _toggleCantripPrepared(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const className = e.model.item.parentClass;\n    const spell = e.model.item.children[0];\n    const isPrepared = this._isPreparedCantrip(this.spellsKnown, className, spell.name);\n    const currentPreparedCount = this._currentCantripsKnownCount(className, this.spellsKnown);\n    const maxPreparedCount = this._maxCantripsKnownCount(className, this.spellsKnown);\n\n    if ((isPrepared || currentPreparedCount < maxPreparedCount) && spell.id === 'spelldef') {\n      let spellsKnownCopy = JSON.parse(JSON.stringify(this.spellsKnown));\n      if (isPrepared) {\n        const index = spellsKnownCopy[className].currentCantrips.indexOf(spell.name);\n        spellsKnownCopy[className].currentCantrips.splice(index, 1);\n      } else {\n        spellsKnownCopy[className].currentCantrips.push(spell.name);\n      }\n      this.spellsKnown = spellsKnownCopy;\n      toggleCantripPrepared(className, spell);\n    } else if (currentPreparedCount >= maxPreparedCount) {\n      this._flashPreparedButton(findInPath('button', e));\n    }\n  }\n\n  _flashPreparedButton(buttonEl) {\n    if (buttonEl) {\n      buttonEl.classList.add('transition-bg');\n      buttonEl.classList.add('flash-error');\n      setTimeout(() => {\n        buttonEl.classList.remove('flash-error');\n        setTimeout(() => {\n          buttonEl.classList.remove('transition-bg');\n        }, 200);\n      }, 200);\n    }\n  }\n\n  _toggleSpellSlot(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const isInput = findInPath('.checkbox-wrap', e);\n    const isWarlock = !!findInPath('[warlock-spell]', e);\n    const currentSlots = isWarlock ? e.model.item.currentWarlockSlots : e.model.item.currentSlots;\n    const maxSlots = isWarlock ? e.model.item.warlockSpellSlots : e.model.item.spellSlots;\n    const level = e.model.item.level || e.model.item.name;\n\n    if (isInput) {\n      const isChecked = isInput.children[0].checked;\n      if (!isChecked && currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n  \n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    } else {\n      if (currentSlots < maxSlots) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots + 1;\n        } else {\n          e.model.item.currentSlots = currentSlots + 1;\n        }\n\n      } else if (currentSlots > 0) {\n        if (isWarlock) {\n          e.model.item.currentWarlockSlots = currentSlots - 1;\n        } else {\n          e.model.item.currentSlots = currentSlots - 1;\n        }\n      }\n    }\n    \n    if (isWarlock) {\n      this._setSpellSlotsChecked(e.model.item.currentWarlockSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentWarlockSlots, undefined, true);\n    } else {\n      this._setSpellSlotsChecked(e.model.item.currentSlots, findInPath('.slot-checkboxes', e));\n      setSpellSlots(level, e.model.item.currentSlots);\n    }\n  }\n\n  _setSpellSlotsChecked(count, el) {\n    const checkboxes = el.querySelectorAll('vaadin-checkbox');\n    for (let i = 0; i < checkboxes.length; i++) {\n      if (i < count) {\n        checkboxes[i].checked = true;\n      } else {\n        checkboxes[i].checked = false\n      }\n    }\n  }\n\n  _roll(e) {\n    if (!this.isEditMode) {\n      const spellAttackEl = findInPath('.spellAttack', e);\n      let mod, isProficient, name, isExpertise;\n\n      if (spellAttackEl) {\n        isProficient = false;\n\n        if (this.customSpellAttackBonus) {\n          mod = this.customSpellAttackBonusVal;\n          name = \"Spell Attack (Custom)\";\n          \n        } else if (e.srcElement.classList.contains('mod-val')) {\n          const clickedSpellModIndex = e.srcElement.dataset.index;\n          mod = this.spellMods[clickedSpellModIndex].spellAttackBonus;\n          name = `Spell Attack (${this.spellMods[clickedSpellModIndex].classes.join(', ')})`;\n\n        } else {\n          mod = this.spellMods[0].spellAttackBonus;\n          name = `Spell Attack (${this.spellMods[0].classes.join(', ')})`;\n        }\n      }\n\n      if (name) {\n        let rollForm = '1d20';\n  \n        if (isProficient) {\n          mod = mod + this.proficiencyBonus;\n        }\n        if (isExpertise) {\n          mod = mod + this.proficiencyBonus;\n        }\n        if (mod > 0) {\n          rollForm += `+${mod}`\n        } else if (mod < 0) {\n          rollForm += mod;\n        }\n        rollDice(name, rollForm);\n      }\n    }\n  }\n\n  _isPreparedClass(spellsKnown, item, isEditMode) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isAlwaysPrepared = item.isAlwaysPrepared;\n    if (isAlwaysPrepared) {\n      return isEditMode ? 'spell-button always-prepared edit-mode' : 'spell-button always-prepared';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared);\n    if (isPrepared) {\n      return isEditMode ? 'spell-prepared spell-button edit-mode' : 'spell-prepared spell-button';\n    }\n    return isEditMode ? 'spell-button edit-mode' : 'spell-button';\n  }\n\n  _isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared){\n    return isAlwaysPrepared || spellsKnown[className] && spellsKnown[className].current && spellsKnown[className].current.length && spellsKnown[className].current.indexOf(spellName) > -1;\n  }\n\n  _isPreparedCantrip(spellsKnown, className, spellName){\n    return spellsKnown[className] && spellsKnown[className].currentCantrips && spellsKnown[className].currentCantrips.length && spellsKnown[className].currentCantrips.indexOf(spellName) > -1;\n  }\n\n  _isPreparedText(spellsKnown, item) {\n    const className = item.parentClass;\n    const spellName = item.name;\n    const isCantrip = item.isCantrip;\n    const isAlwaysPrepared = item.isAlwaysPrepared;\n    const prepareType = spellsKnown[className] ? spellsKnown[className].type : undefined;\n    if (isAlwaysPrepared) {\n      return prepareType === 'known' ? 'Always' : 'Always';\n    }\n    let isPrepared = isCantrip ? this._isPreparedCantrip(spellsKnown, className, spellName) : this._isPreparedSpell(spellsKnown, className, spellName, isAlwaysPrepared);\n    \n    if (isPrepared) {\n      return prepareType === 'known' ? 'Learned' : 'Prepared';\n    } else {\n      return prepareType === 'known' ? 'Learn' : 'Prepare';\n    }\n  }\n\n  _countToArray(count) {\n    const data = [];\n    for (var i = 0; i < count; i++) {\n      data.push(null);\n    }\n    return data;\n  }\n\n  _toLevel(level) {\n    if (level === 'At Will' || level === 'Innate') {\n      return level;\n    } else if (level === 0) {\n      return Parser.spLevelToFull(level) + 's';\n    } else {\n      return Parser.spLevelToFull(level) + ' Level';\n    }\n  }\n  \n  _currentSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].current.length;\n    }\n    return 0;\n  }\n\n  _maxSpellsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].max;\n    }\n    return 0;\n  }\n  \n  _currentCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className] && spellsKnown[className].current) {\n      return spellsKnown[className].currentCantrips.length;\n    }\n    return 0;\n  }\n\n  _maxCantripsKnownCount(className, spellsKnown) {\n    if (spellsKnown && className && spellsKnown[className]) {\n      return spellsKnown[className].maxCantrips;\n    }\n    return 0;\n  }\n\n  _toggleEditMode() {\n    dispatchEditModeChange(!this.isEditMode);\n  }\n\n\n  _updateCustomSpellMod(e) {\n    const newValue = parseInt(e.currentTarget.value);\n    setCustomSpellModVal(newValue);\n  }\n\n  _updateCustomSpellDC(e) {\n    const newValue = parseInt(e.currentTarget.value);\n    setCustomSpellDCVal(newValue);\n  }\n\n  _updateCustomSpellAttackBonus(e) {\n    const newValue = parseInt(e.currentTarget.value);\n    setCustomSpellAttackBonusVal(newValue);\n  }\n\n  _swapCustomSpellMod(e) {\n    toggleCustomSpellMod();\n  }\n\n  _swapCustomSpellAttackBonus(e) {\n    toggleCustomSpellAttackBonus();\n  }\n\n  _swapCustomSpellDC(e) {\n    toggleCustomSpellDC();\n  }\n\n  _spellsKnownString(spellPrepType) {\n    return 'Spells ' + util_capitalize(spellPrepType) + ':'\n  }\n\n  _isRitualSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell && spell.meta && spell.meta.ritual;\n  }\n\n  _isConcentrationSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.duration.some((d) => d.concentration);\n  }\n\n  _isBonusActionSpell(spellParent) {\n    const spell = spellParent.children[0];\n    return spell.time.some((t) => t.unit === 'bonus');\n  }\n\n  _getSpellSchool(spellParent) {\n    const spell = spellParent.children[0];\n    return Parser.SP_SCHOOL_ABV_TO_FULL[spell.school];\n  }\n\n  _hidePrepareSpellsButton(isEditMode, spellsKnown) {\n    return isEditMode || !Object.values(spellsKnown).some((clas) => clas.current.length < clas.max - 1 || clas.currentCantrips.length < clas.maxCantrips - 1);\n  }\n\n  _hidePreparedCountLabel(className, spellsKnown) {\n    return this._maxSpellsKnownCount(className, spellsKnown) === 0\n  }\n\n  _hideCantripsPreparedCountLabel(item, spellsKnown) {\n    return item.level !== 0 || !spellsKnown || !item.parentClass || !spellsKnown[item.parentClass] || spellsKnown[item.parentClass].maxCantrips === 0;\n  }\n\n  _spellLevel(item) {\n    if (item && item.children && item.children.length && item.children[0].level) {\n      return Parser.spLevelToFull(item.children[0].level);\n    }\n  }\n\n  _isSpellSlotChecked(currentSlots, index) {\n    return index < currentSlots;\n  }\n\n  _spellClassText(parentClass) {\n    return parentClass;//util_capitalizeAll(parentClass);\n  }\n\n  _isEmpty(a) {\n    return !a || !a.length;\n  }\n\n  _hideCheckboxes(spellSlots, isEditMode, type) {\n    return !spellSlots || spellSlots > 0 && this.isEditMode || type === 'known' || type === 'will' || type === 'resource'\n  }\n\n  _hideAbility(ability) {\n    return !ability;\n  }\n  \n  _hideSlotsLabel(isEditMode, level, className) {\n    return !isEditMode || level === 0 || level === 'At Will' || level === 'Innate'|| className === 'Warlock';\n  }\n\n  _innateUsageString(spellUseType) {\n    if (spellUseType === 'daily') {\n      return '<span>Long Rest</span>'\n    } else if (spellUseType === 'rest') {\n      return '<span>Short Rest</span>'\n    } else if (spellUseType) {\n      return '<span>' + util_capitalizeAll(spellUseType) + '</span>'\n    }\n  }\n  \n  _wrapClassString(isEditMode) {\n    return isEditMode ? 'edit-mode' : 'not-edit-mode';\n  }\n\n  _equal(a, b) {\n    return a === b;\n  }\n\n  _hasTwo(a) {\n    return a && a.length && a.length > 1;\n  }\n\n  _join(a) {\n    return a.join(', ');\n  }\n\n  _abs(num) {\n    return num >= 0 ? `+${num}`: num;\n  }\n\n  static get template() {\n    return html`\n      <style include='my-styles material-styles'>\n        :host {}\n        :host {\n          display: block;\n          padding-top: 16px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        .heading {\n          width: calc(100% - 32px);\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--lumo-contrast-10pct);\n          margin: 0 16px;\n        }\n\n        h2 {\n          display: block;\n          font-size: 1.5em;\n          margin: 20px 0 20px 0;\n          font-weight: bold;\n        }\n\n        vaadin-grid {\n          margin-bottom: var(--tab-bottom-margin);\n        }\n\n        vaadin-grid-tree-toggle {\n          width: 100%;\n          cursor: pointer;\n        }\n\n        .class-wrap {\n          width: 100%;\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          align-items: center;\n          padding-top: 4px;\n          /* padding-top: 34px;\n          padding-bottom: 8px; */\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n          left: -16px;\n          border-bottom: 3px solid var(--_lumo-grid-secondary-border-color);;\n          padding: 24px 16px 8px;\n          position: relative;\n        }\n        .class-wrap h3 {\n          font-size: 22px;\n          font-weight: bold;\n        }\n\n        .spells-prepared-text {\n          margin-right: 6px;\n          margin-left: auto;\n          user-select: none;\n        }\n        .prepared-count {\n          color: var(--mdc-theme-primary);\n          font-weight: bold;\n          margin-left: 6px;\n        }\n        .prepared-count[edit-mode] {\n          color: var(--mdc-theme-secondary);\n        }\n        .cantrips-prepared {\n          margin-right: 0;\n          display: inline-flex;\n          align-items: center;\n        }\n\n        .level-outer-wrap {\n          border-bottom: 1px solid var(--_lumo-grid-secondary-border-color);\n          padding-bottom: 8px;\n          display: flex;\n          height: 32px;\n        }\n\n        .level-wrap {\n          width: 100%;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .level-wrap .label {\n          padding-left: 6px;\n          font-size: 12px;\n          color: var(--lumo-tint-70pct);\n        }\n\n        .slot-checkboxes {\n          cursor: pointer;\n          display: flex;\n          padding: 4px;\n        }\n\n        .slot-checkboxes span {\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n          display: flex;\n          align-items: center;\n        }\n\n        .slot-checkboxes .label {\n          padding-left: 8px;\n        }\n        .slot-checkboxes .label span {\n          font-size: 12px;\n          display: inline-block;\n          white-space: pre-wrap;\n          text-align: center;\n        }\n\n        vaadin-checkbox {\n          pointer-events: none;\n        }\n\n        .spell-outer-wrap {\n          display: flex;\n        }\n\n        .spell-wrap {\n          width: 100%;\n          margin-left: 24px;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .spell-inner-wrap {\n          position: relative;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          -youbkit-touch-callout: none;\n          -youbkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n        }\n\n        .spell-inner-wrap[has-super] {\n          padding-top: 12px;\n          padding-bottom: 4px;\n        }\n\n        .spell-level {\n          color: var(--mdc-theme-text-disabled-on-background);\n          margin-left: 8px;\n          margin-right: 4px;\n          font-size: 12px;\n        }\n\n        .spell-ability {\n          font-size: 12px;\n          display: flex;\n          align-items: center;\n          color: var(--mdc-theme-text-secondary-on-background);\n          margin-right: 6px;\n        }\n\n        .innate-spell-label {\n          font-size: 12px;\n          display: flex;\n          align-items: center;\n        }\n\n        .spell-super-text {\n          position: absolute;\n          top: 0px;\n          font-size: 11px;\n          left: 0px;\n          color: var(--mdc-theme-text-secondary-on-background);\n        }\n\n        .ind {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          border-radius: 8px;\n          color: var(--mdc-theme-on-secondary);\n          background-color: var(--mdc-theme-secondary);\n          font-size: 12px;\n          position: relative;\n          bottom: 2px;\n          margin-left: 0;\n          padding: 0px 4px;\n          font-weight: 500;\n        }\n\n        .rit-ind::before {\n          content: 'R';\n        }\n        .conc-ind::before {\n          content: 'C';\n        }\n        .bonus-ind::before {\n          content: 'BA';\n        }\n        .school-ind {\n          font-size: 10px;\n          height: 16px;\n          bottom: 3px;\n        }\n\n        .spell-inner-wrap[not-edit-mode] .ind {\n          background-color: var(--mdc-theme-primary);\n        }\n\n        .spell-def-wrap {\n          font-size: 14px;\n          width: calc(100% - 20px);\n          margin: 0 auto;\n          background: var(--lumo-contrast-10pct);\n          border-radius: 4px;\n          white-space: pre-line;\n        }\n\n        .details.stats-wrapper {\n          margin: -8px 14px 0;\n          font-size: 14px;\n          line-height: 1.5;\n        }\n        .details > .statsBlockHead:first-child > .stat-name {\n          margin-top: 0;\n        }\n        .details.stats-wrapper .statsBlockHead .stat-name {\n          font-size: 22px;\n          margin-bottom: 2px;\n        }\n        .details.stats-wrapper .statsBlockSubHead .stat-name {\n          font-size: 18px;\n        }\n        .details.stats-wrapper .text {\n          margin-top: 16px;\n        }\n        .details.stats-wrapper p {\n          margin-bottom: 8px;\n        }\n        .details.stats-wrapper .statsInlineHead .stat-name {\n          font-size: inherit;\n        }\n        .details.stats-wrapper .margin-bottom_med {\n          margin-bottom: 0px !important;\n        }\n        .details.stats-wrapper .source {\n          display: block !important;\n          color: var(--lumo-contrast-70pct);\n          font-size: 13px;\n          margin-top: 0px;\n          margin-bottom: 12px;\n        }\n\n        .spell-button {\n          background-color: var(--mdc-theme-text-disabled-on-background);\n          color: var(--mdc-theme-on-secondary);\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 80px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n          margin-left: 8px;\n          height: min-content;\n          margin-top: auto;\n          margin-bottom: auto;\n        }\n        .class-icon {\n          border: none;\n          border-radius: 4px;\n          outline: none;\n          width: 60px;\n          display: inline-block;\n          justify-content: center;\n          white-space: normal;\n          font-size: 12px;\n          padding: 4px 4px;\n          width: 20px;\n        }\n        .class-icon[hide] {\n          display: none;\n        }\n        .spell-button.edit-mode {\n          cursor: pointer;\n        }\n        .spell-button.always-prepared {\n          background-color: var(--mdc-theme-secondary-lighter);\n          cursor: not-allowed;\n        }\n        .spell-button.spell-prepared {\n          background-color: var(--mdc-theme-secondary);\n        }\n        .spell-button.flash-error {\n          background-color: var(--mdc-theme-error);\n          transition: background-color 0.2s ease-out;\n        }\n        .spell-button.transition-bg {\n          transition: background-color 0.2s ease-in;\n        }\n\n        .filter {\n          margin-left: 16px;\n        }\n\n        .custom-val__swap {\n          font-size: 10px;\n          margin: -4px 0px 8px auto;\n          background-color: var(--lumo-contrast-10pct);\n          padding: 4px 5px 4px;\n          line-height: 1;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        .custom-val__swap .material-icons {\n          font-size: 11px;\n          position: relative;\n          top: 1px;\n        }\n\n        .basic-box__wrap-wrap {\n          padding: 0 16px;\n        }\n        .basic-box__wrap {\n          width: 100%;\n          display: flex;\n          justify-content: space-between;\n          margin: 16px auto 40px;\n          max-width: 360px;\n        }\n        .basic-box {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 4px 0;\n          background: var(--lumo-contrast-10pct);\n          border-radius: 4px;\n          height: min-content;\n          width: calc(33% - 8px);\n          max-width: 120px;\n        }\n        .basic-box--short {\n          height: fit-content;\n        }\n        \n        .basic-box__label {\n          color: var(--mdc-theme-primary);\n          font-size: 14px;\n          text-align: center;\n        }\n        .basic-box__value {\n          font-size: 18px;\n          width: 100%;\n          display: flex;\n          flex-direction: column;\n          text-align: center;\n        }\n        .basic-box__no-flex {\n          display: block;\n        }\n\n        .mod-val {\n          position: relative;\n        }\n        .mod-val:focus .tooltip,\n        .mod-val:hover .tooltip {\n          display: block;\n        }\n        .mod-val:focus {\n          outline: none;\n        }\n        .mod-val:not(:last-of-type)::after {\n          content: '|';\n          margin-left: 4px;\n          color: var(--lumo-contrast-30pct);\n        }\n        .tooltip {\n          position: absolute;\n          background: lightgray;\n          color: black;\n          font-size: 14px;\n          padding: 2px 10px;\n          border-radius: 4px;\n          white-space: nowrap;\n          left: 5px;\n          top: -32px;\n          display: none;\n        }\n        .tooltip::after {\n          content: '';\n          height: 0;\n          width: 0;\n          position: absolute;\n          border-left: 5px solid transparent;\n          border-right: 5px solid transparent;\n          border-top: 5px solid lightgray;\n          bottom: -4px;\n          left: 2px;\n        }\n\n        .no-content-message {\n          font-size: 14px;\n          padding: 20px;\n          font-style: italic;\n        }\n      </style>\n\n      <div class$=\"[[_wrapClassString(isEditMode)]]\" hidden$=\"[[noContentMessage]]\">\n        <div class=\"heading\">\n          <h2>Spells</h2>\n          <dnd-button class=\"prepare-spells-button\" link hidden$=\"[[_hidePrepareSpellsButton(isEditMode, spellsKnown)]]\" edit-mode$=\"[[isEditMode]]\" not-edit-mode$=\"[[!isEditMode]]\" label=\"Prepare Your Spells!\" icon=\"edit\" on-click=\"_toggleEditMode\"></dnd-button>\n        </div>\n\n        <!-- Spell Mods -->\n        <div class=\"basic-box__wrap-wrap\">\n          <div class=\"basic-box__wrap\">\n            <div class=\"basic-box\">\n              <span class=\"basic-box__value\">\n                <div class=\"custom-val__swap\" on-click=\"_swapCustomSpellMod\" hidden$=[[!isEditMode]]>\n                  <span class=\"custom-val__option\" hidden$=[[customSpellMod]]><span class=\"material-icons\">edit</span> Edit</span>\n                  <span class=\"custom-val__option\" hidden$=[[!customSpellMod]]><span class=\"material-icons\">restart_alt</span> Use Standard</span>\n                </div>\n                <div hidden$=[[customSpellMod]]>\n                  <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                    <span class=\"mod-val\" tabindex=\"0\" data-index$=\"[[index]]\">[[_abs(item.mod)]]<span class=\"tooltip\">[[_join(item.classes)]]</span></span>\n                  </template>\n                </div>\n                <div hidden$=[[!customSpellMod]]>\n                  <vaadin-integer-field theme=\"mini\" value=[[customSpellModVal]] on-change=\"_updateCustomSpellMod\" min=\"-20\" max=\"20\" has-controls hidden$=\"[[!isEditMode]]\"></vaadin-integer-field>\n                  <span hidden$=[[isEditMode]] class=\"mod-val\">[[_abs(customSpellModVal)]]<span class=\"tooltip\">Custom</span></span>\n                </div>\n              </span>\n              <span class=\"basic-box__label\">Spell Mod</span>\n            </div>\n            <div class=\"basic-box spellAttack\" on-click=\"_roll\">\n              <span class=\"basic-box__value\">\n                <div class=\"custom-val__swap\" on-click=\"_swapCustomSpellAttackBonus\" hidden$=[[!isEditMode]]>\n                  <span class=\"custom-val__option\" hidden$=[[customSpellAttackBonus]]><span class=\"material-icons\">edit</span> Edit</span>\n                  <span class=\"custom-val__option\" hidden$=[[!customSpellAttackBonus]]><span class=\"material-icons\">restart_alt</span> Use Standard</span>\n                </div>\n                <div hidden$=[[customSpellAttackBonus]]>\n                  <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                    <span class=\"mod-val\" tabindex=\"0\" data-index$=\"[[index]]\">+[[item.spellAttackBonus]]<span class=\"tooltip\">[[_join(item.classes)]]</span></span>\n                  </template>\n                </div>\n                <div hidden$=[[!customSpellAttackBonus]]>\n                  <vaadin-integer-field theme=\"mini\" value=[[customSpellAttackBonusVal]] on-change=\"_updateCustomSpellAttackBonus\" min=\"-20\" max=\"20\" has-controls hidden$=\"[[!isEditMode]]\"></vaadin-integer-field>\n                  <span hidden$=[[isEditMode]] class=\"mod-val\">[[_abs(customSpellAttackBonusVal)]]<span class=\"tooltip\">Custom</span></span>\n                </div>\n              </span>\n              <span class=\"basic-box__label\">Spell ATK+</span>\n            </div>\n            <div class=\"basic-box\">\n              <span class=\"basic-box__value\">\n                <div class=\"custom-val__swap\" on-click=\"_swapCustomSpellDC\" hidden$=[[!isEditMode]]>\n                  <span class=\"custom-val__option\" hidden$=[[customSpellDC]]><span class=\"material-icons\">edit</span> Edit</span>\n                  <span class=\"custom-val__option\" hidden$=[[!customSpellDC]]><span class=\"material-icons\">restart_alt</span> Use Standard</span>\n                </div>\n                <div hidden$=[[customSpellDC]]>\n                  <template is=\"dom-repeat\" items=\"[[spellMods]]\">\n                    <span class=\"mod-val\" tabindex=\"0\">[[item.dc]]<span class=\"tooltip\">[[_join(item.classes)]]</span></span>\n                  </template>\n                </div>\n                <div hidden$=[[!customSpellDC]]>\n                  <vaadin-integer-field theme=\"mini\" value=[[customSpellDCVal]] on-change=\"_updateCustomSpellDC\" min=\"0\" max=\"40\" has-controls hidden$=\"[[!isEditMode]]\"></vaadin-integer-field>\n                  <span hidden$=[[isEditMode]] class=\"mod-val\">[[customSpellDCVal]]<span class=\"tooltip\">Custom</span></span>\n                </div>\n              </span>\n              <span class=\"basic-box__label\">Spell DC</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"filter\">\n          <vaadin-text-field clear-button-visible value=\"{{filterStr}}\" placeholder='Filter'></vaadin-text-field>\n        </div>\n      </div>\n\n      <div class=\"no-content-message\" hidden$=\"[[!noContentMessage]]\">Enter edit mode to add classes and levels.</div>\n\n      <vaadin-grid id=\"grid\" theme=\"no-border no-row-borders\" expanded-items=\"{{expandedItems}}\" all-rows-visible hidden$=\"[[noContentMessage]]\">\n        <vaadin-grid-column flex-grow=\"1\">\n          <template>\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'class')]]\">\n                <div class=\"class-wrap\">\n                  <h3>[[item.className]]</h3>\n                  <div class='spells-prepared-text' hidden$=\"[[_hidePreparedCountLabel(item.className, spellsKnown)]]\">\n                    <span>[[_spellsKnownString(item.spellPrepType)]]</span>\n                    <span class='prepared-count' edit-mode$=[[isEditMode]]>[[_currentSpellsKnownCount(item.className, spellsKnown)]] / [[_maxSpellsKnownCount(item.className, spellsKnown)]]</span>\n                  </div>\n                </div>\n              </template>\n  \n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'level')]]\">\n                <div class=\"level-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\">\n                    <h4 class=\"level-wrap\">[[_toLevel(item.level)]]<span hidden$=\"[[_hideSlotsLabel(isEditMode, item.level, item.parentClass)]]\" class=\"label\">([[item.spellSlots]] Slots)</span></h4>\n                  </vaadin-grid-tree-toggle>\n\n                  <div class=\"cantrips-prepared spells-prepared-text\" hidden$=\"[[_hideCantripsPreparedCountLabel(item, spellsKnown)]]\">\n                    <span>Cantrips Known:</span>\n                    <span class='prepared-count' edit-mode$=[[isEditMode]]>[[_currentCantripsKnownCount(item.parentClass, spellsKnown)]] / [[_maxCantripsKnownCount(item.parentClass, spellsKnown)]]</span>\n                  </div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.warlockSpellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\" warlock-spell>\n                    <template is='dom-repeat' items='[[_countToArray(item.warlockSpellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentWarlockSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Pact</span>\n                  </div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.spellSlots, isEditMode)]]\" on-click=\"_toggleSpellSlot\">\n                    <template is='dom-repeat' items='[[_countToArray(item.spellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\">Slots</span>\n                  </div>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spell')]]\">\n                <div class=\"spell-outer-wrap\">\n                  <vaadin-grid-tree-toggle leaf=\"[[!item.hasChildren]]\" expanded=\"{{expanded}}\" class=\"spell-wrap\">\n                    <div class=\"spell-inner-wrap\" has-super$=\"[[!_hideAbility(item.superLabel)]]\" not-edit-mode$=\"[[!isEditMode]]\">\n                      <span class=spell-super-text>[[item.superLabel]]</span>\n                      [[item.name]]\n                      <span class=\"spell-level\" hidden>[[_spellLevel(item)]]</span>\n                      <span class=\"ind rit-ind\" title=\"Ritual\" hidden$=\"[[!_isRitualSpell(item)]]\"></span>\n                      <span class=\"ind conc-ind\" title=\"Concentration\" hidden$=\"[[!_isConcentrationSpell(item)]]\"></span>\n                      <span class=\"ind bonus-ind\" title=\"Bonus Action\" hidden$=\"[[!_isBonusActionSpell(item)]]\"></span>\n                      <span class=\"ind school-ind\" title=\"[[_getSpellSchool(item)]]\">[[_getSpellSchool(item)]]</span>\n                    </div>\n                  </vaadin-grid-tree-toggle>\n\n                  <div class=\"spell-ability\" hidden$=\"[[_hideAbility(item.ability)]]\">([[item.ability]])</div>\n\n                  <div class=\"slot-checkboxes\" hidden$=\"[[_hideCheckboxes(item.spellSlots, isEditMode, item.spellUseType)]]\" on-click=\"_toggleSpellSlot\">\n                    <template is='dom-repeat' items='[[_countToArray(item.spellSlots)]]' as=\"thing\">\n                      <span class=\"checkbox-wrap\"><vaadin-checkbox checked=\"[[_isSpellSlotChecked(item.currentSlots, index)]]\"></vaadin-checkbox></span>\n                    </template>\n                    <span class=\"label\" inner-h-t-m-l=\"[[_innateUsageString(item.spellUseType)]]\"></span>\n                  </div>\n\n                  <div class=\"innate-spell-label\" hidden$=\"[[!_equal(item.spellUseType, 'will')]]\">At Will</div>\n\n                  <div class=\"innate-spell-label\" hidden$=\"[[!_equal(item.spellUseType, 'ritual')]]\">Ritual Only</div>\n\n                  <div class=\"innate-spell-label\" hidden$=\"[[!_equal(item.spellUseType, 'resource')]]\">[[item.spellSlots]] Ki</div>\n        \n                  <button class$=\"[[_isPreparedClass(spellsKnown, item, isEditMode)]]\" hidden$=\"[[!isEditMode]]\" on-click=\"_toggleSpellPrepared\">[[_isPreparedText(spellsKnown, item)]]</button>\n                  <dnd-svg class=\"class-icon\" hidden$=\"[[isEditMode]]\" id='[[_spellClassText(item.parentClass)]]' default-color></dnd-svg>\n                </div>\n              </template>\n\n              <template is=\"dom-if\" if=\"[[_equal(item.id, 'spelldef')]]\">\n                <div class=\"spell-def-wrap\">\n                  <div class=\"details stats-wrapper\" inner-h-t-m-l=\"[[_renderSpell(item)]]\"></div>\n                </div>\n              </template>\n          </template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-character-builder-spells\",DndCharacterBuilderSpells);\n"],"sourceRoot":""}