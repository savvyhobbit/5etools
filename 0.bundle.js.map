{"version":3,"sources":["webpack:///./components/dnd-select-add.js","webpack:///./components/views/character/dnd-character-builder-suboptions.js"],"names":["DndSelectAdd","test","type","Boolean","reflectToAttribute","value","options","Array","observer","model","String","addCallback","Function","choices","Number","paren","label","placeholder","multiValue","disabled","this","listBox","remove","$","select","render","isArray","choiceArray","map","v","indexOf","findIndex","o","name","source","filter","selectedValues","i","join","super","ready","setTimeout","async","renderer","root","document","createElement","setAttribute","addEventListener","e","opened","wasPreviouslySelected","srcElement","getAttribute","length","splice","selectedOptions","option","item","optionName","innerHTML","appendChild","_assignMenuElement","valueUpdated","connectedCallback","selectChangeHandler","val","selected","undefined","disconnectedCallback","removeEventListener","a","result","customElements","define","DndCharacterBuilderSuboptions","storageKey","selectedItem","Object","skillProfOptions","skillProfChoices","selectedSkillProfs","defaultSkillProfs","toolProfOptions","defaultToolProfs","langProfOptions","defaultLangProfs","weaponProfOptions","defaultWeaponProfs","armorProfOptions","defaultArmorProfs","defaultDarkvision","attributeOptions","attributeChoices","attributeMod","selectedAttributes","defaultAttributes","resistOptions","resistChoices","selectedResists","defaultResists","conditionImmuneOptions","conditionImmuneChoices","selectedConditionImmunes","defaultConditionImmunes","featOptions","featChoices","selectedFeat","sTLProfOptions","sTLProfChoices","selectedSTLProfs","isEditMode","dontCreateIfMissing","characterChangeHandler","character","detail","set","editModeHandler","storageKeys","split","storedItem","dispatchEvent","CustomEvent","bubbles","composed","isNaN","parseInt","ability","choose","from","toUpperCase","count","amount","abilityObj","entries","attribute","toLowerCase","mod","skillProficiencies","skillProficiency","any","concat","keys","toolProficiencies","selectedToolProfs","toolProficiency","forEach","toolKey","toolVal","newToolProfOption","key","toolListsMapped","flat","toolProfChoices","push","isInteger","skillToolLanguageProficiencies","sTLDef","includes","SKILL_JSON_TO_FULL","skill","tool","resist","conditionImmune","languageProficiencies","selectedLangProfs","langProficiency","langKey","langVal","newLangProfOption","langProfChoices","substring","trim","weaponProficiencies","selectedWeaponProfs","weaponProficiency","weaponKey","weaponVal","newWeaponProfOption","weaponProfChoices","fromFilter","weaponName","armorProficiencies","selectedArmorProfs","armorProficiency","armorKey","armorVal","newArmorProfOption","armorProfChoices","armorName","entry","is60","is120","feats","index","skills","newToolProfOptions","bind","newLangProfOptions","newArmorProfOptions","newWeaponProfOptions","attr","feat","resists","conditionImmunes","arg","arguments","constructor","num","str","overrideLabel","newStr","out"],"mappings":"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","file":"0.bundle.js","sourcesContent":["import { PolymerElement, html } from '@polymer/polymer';\nimport { mergeFeature } from '../util/charBuilder';\nimport { jqEmpty, util_capitalizeAll } from \"../js/utils\";\nimport \"@vaadin/vaadin-select\";\nimport {loadModel} from \"../util/data\";\n\nclass DndSelectAdd extends PolymerElement {\n  static get properties() {\n    return {\n      test: {\n        type: Boolean,\n        reflectToAttribute: true,\n        value: false\n      },\n      options: {\n        type: Array,\n        observer: \"optionsUpdated\"\n      },\n      model: {\n        type: String\n      },\n      addCallback: {\n        type: Function\n      },\n      value: {\n        type: String,\n        value: \"\",\n        observer: \"valueUpdated\"\n      },\n      choices: {\n        type: Number,\n        observer: \"choicesUpdated\"\n      },\n      paren: {\n        type: String,\n      },\n      label: {\n        type: String\n      },\n      placeholder: {\n        type: String,\n      },\n      multiValue: {\n        type: String,\n        value: \"\"\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      }\n    }\n  }\n\n  choicesUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  optionsUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  valueUpdated() {\n    if (this.choices) {\n      if (Array.isArray(this.value) && this.options) {\n        const choiceArray = this.value\n          .map(v => {\n            if (this.options.indexOf(v) !== -1) {\n              return this.options.indexOf(v);\n            } else {\n              return this.options.findIndex((o) => {\n                return o.name === v.name && o.source === v.source;\n              });\n            }\n          })\n          .filter(v => { return v !== -1 });\n\n        if (this.listBox) {\n          this.listBox.selectedValues = choiceArray;\n        }\n        this.multiValue = choiceArray.map(i => {\n          let value = this.options[i];\n          return value.name ? value.name : util_capitalizeAll(value) \n        }).join(\", \");\n      } else {\n        if (this.listBox) {\n          this.listBox.selectedValues = [];\n        }\n        this.multiValue = \"\";\n      }\n    } else {\n      if (this.value && this.options) {\n        if (this.value.source) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name && i.source === this.value.source || i === this.value.name }) + \"\";\n        } else if (this.value.name) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name || i === this.value.name }) + \"\";\n        } else {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value || i === this.value }) + \"\";\n        }\n      } else {\n        this.$.select.value = \"\";\n      }\n    }\n  }\n\n  ready() {\n    super.ready();\n\n    setTimeout(async () => {\n      if (this.model) {\n        this.options = await loadModel(this.model);\n      }\n\n      this.$.select.renderer = (root, select) => {\n        if (!this.listBox) {\n          this.listBox = document.createElement('vaadin-list-box');\n\n          // setting up for multi-select\n          if (this.choices) {\n            this.listBox.setAttribute(\"multiple\", true);\n\n            this.listBox.addEventListener(\"click\", (e) => {\n              select.opened = true;\n              let wasPreviouslySelected = e.srcElement.getAttribute(\"selected\") !== null\n              setTimeout(() => {\n                if (this.listBox.selectedValues.length > this.choices\n                    && !wasPreviouslySelected) {\n                  this.listBox.selectedValues.splice(this.listBox.selectedValues.length - 2, 1)\n                }\n                let selectedOptions = this.listBox.selectedValues.map(v => { return this.options[v] });\n                this.multiValue = selectedOptions.map(o => { return o.name ? o.name : util_capitalizeAll(o) }).join(', ');\n                if (this.addCallback) {\n                  this.addCallback(selectedOptions);\n                }\n              }, 0);\n            });\n\n          }\n\n          // Adding options\n          if (this.options && this.options.length) {\n            for (let i = 0; i < this.options.length; i ++) {\n              const option = this.options[i],\n                item = document.createElement('vaadin-item');\n              const optionName = option.name || util_capitalizeAll(option);\n              item.innerHTML = `<span style='margin-left: 10px;'>${optionName}</span> ${option.name ? `<span style='font-size: 14px;color: var(--lumo-primary-color-50pct);'>${option.source || ''}</span>` : ''}`\n              item.setAttribute(\"value\", i);\n              this.listBox.appendChild(item);\n            }\n          }\n          root.appendChild(this.listBox);\n          this.$.select._assignMenuElement();\n\n          this.valueUpdated();\n        }\n      };\n    }, 0);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.selectChangeHandler = () => {\n      const val = this.$.select.value;\n      if (val) {\n        if (!this.choices) {\n          const selected = this.options[val];\n          if (this.addCallback) {\n            this.addCallback(selected, this.model);\n          } else {\n            mergeFeature(undefined, selected, this.model);\n          }\n          if (!this.value) {\n            this.$.select.value = \"\";\n          }\n        }\n      }\n    };\n\n    this.$.select.addEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.$.select.removeEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  _label(label, choices, paren) {\n    let result = '';\n    if (label) {\n      result = label;\n      if (choices && choices !== 1 && choices !== 100) {\n        result += ` (pick ${choices})`;\n      }\n      if (paren) {\n        result += ` (${paren})`;\n      }\n    }\n    return result;\n  }\n  \n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n        [slot=\"prefix\"] {\n          width: calc(100% - 46px);\n          padding: 12px;\n          line-height: 1.4;\n        }\n        vaadin-select {\n          width: 100%;\n        }\n        .prefix {\n          white-space: normal;\n          color: var(--lumo-body-text-color);\n        }\n      </style>\n      <vaadin-select test$=\"[[test]]\" theme=\"dark\" add id=\"select\" label=\"[[_label(label, choices, paren)]]\" placeholder=\"[[placeholder]]\" disabled$=\"[[disabled]]\">\n        <div hidden$=\"[[!_exists(multiValue)]]\" slot=\"prefix\">\n          <span class=\"prefix\">[[multiValue]]</span>\n        </div>\n      </vaadin-select>\n      \n    `;\n  }\n}\ncustomElements.define('dnd-select-add', DndSelectAdd);","import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n    getCharacterChannel,\n    getSelectedCharacter,\n    saveCharacter,\n} from \"../../../util/charBuilder\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { util_capitalizeAll, absInt, cloneDeep } from \"../../../js/utils\"; \nimport { loadModel } from \"../../../util/data\";\nimport '../../dnd-select-add';\nimport { SKILL_TO_ATB_ABV } from \"../../../js/bestiary\";\nimport { } from '@polymer/polymer/lib/elements/dom-if.js';\nimport { } from '@polymer/polymer/lib/elements/dom-repeat.js';\nimport { LANGUAGES_ALL, toolsListFromCategory, TOOLS_ALL, TOOLS_ARTISAN, TOOLS_GAMING_SET, TOOLS_INSTRUMENT, WEAPON_ALL, WEAPON_MARTIAL, WEAPON_SIMPLE } from \"../../../util/consts\";\nimport Parser from \"../../../util/Parser\";\n\n\n// TODO parsing\n//// skillToolLanguageProficiencies, additionalSpells, \"expertise\"\n//// class entry parsing - \"gain proficiency\" - {@item brewer's supplies|phb}, martial weapons, {@skill Performance}, or, choose one, \n///\n\nclass DndCharacterBuilderSuboptions extends PolymerElement {\n    static get properties() {\n        return {\n            storageKey: {\n                type: String\n            },\n            // This selectedItem provided is used to populate the sub option fields using the option data structure setup in data\n            selectedItem: {\n                type: Object\n            },\n\n            skillProfOptions: {\n                type: Array,\n                value: []\n            },\n            skillProfChoices: {\n                type: Number,\n            },\n            selectedSkillProfs: {\n                type: Array,\n            },\n            defaultSkillProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            toolProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultToolProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            langProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultLangProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            weaponProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultWeaponProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            armorProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultArmorProfs: {\n                type: String,\n                value: \"\"\n            },\n            defaultDarkvision: {\n                type: String,\n                value: \"\"\n            },\n\n            attributeOptions: {\n                type: Array,\n                value: []\n            },\n            attributeChoices: {\n                type: Number,\n            },\n            attributeMod: {\n                type: Number,\n            },\n            selectedAttributes: {\n                type: Array,\n            },\n            defaultAttributes: {\n                type: String,\n                value: \"\"\n            },\n\n            resistOptions: {\n                type: Array,\n                value: []\n            },\n            resistChoices: {\n                type: Number,\n            },\n            selectedResists: {\n                type: Array,\n            },\n            defaultResists: {\n                type: String,\n                value: \"\"\n            },\n\n            conditionImmuneOptions: {\n                type: Array,\n                value: []\n            },\n            conditionImmuneChoices: {\n                type: Number,\n            },\n            selectedConditionImmunes: {\n                type: Array,\n            },\n            defaultConditionImmunes: {\n                type: String,\n                value: \"\"\n            },\n\n            featOptions: {\n                type: Array,\n                value: []\n            },\n            featChoices: {\n                type: Number\n            },\n            selectedFeat: {\n                type: Array,\n            },\n\n            sTLProfOptions: {\n                type: Array,\n                value: []\n            },\n            sTLProfChoices: {\n                type: Number\n            },\n            selectedSTLProfs: {\n                type: Array,\n            },\n\n            isEditMode: {\n                type: Boolean,\n                value: false\n            },\n            \n            dontCreateIfMissing: {\n                type: Boolean,\n                value: false,\n                reflectToAttribute: true\n            }\n        };\n    }\n\n    static get observers() {\n        return ['updateOptions(selectedItem, storageKey)']\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.characterChangeHandler = (e) => {\n            // let character = cloneDeep(e.detail.character);\n            let character = e.detail.character;\n            this.set('character', character);\n        };\n        \n        this.set('character', getSelectedCharacter());\n        getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n        this.editModeHandler = (e) => {\n            this.isEditMode = e.detail.isEditMode;\n        }\n        getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n        this.isEditMode = isEditMode();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n        getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n    }\n\n    async updateOptions() {\n        if (!this.character) {\n            this.set('character', getSelectedCharacter());\n        }\n        if (this.storageKey && this.selectedItem) {\n            // Finding the storedItem from the character's choices at storageKey \n            const storageKeys = this.storageKey.split('.');\n            if (!this.character.choices) {\n                this.character.choices = {};\n            }\n            let storedItem = this.character.choices;\n\n            for (let i = 0; i < storageKeys.length; i++) {\n                const storageKey = storageKeys[i];\n                if (!storedItem[storageKey]) {\n                    if (!this.dontCreateIfMissing) {\n                        if (storageKeys.length < i + 1 && !isNaN(parseInt(storageKeys[i + 1], 10))) {\n                            storedItem[storageKey] = new Array(20);\n                        } else {\n                            storedItem[storageKey] = {};\n                        }\n                    } else {\n                        this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n                        return;\n                    }\n                }\n                storedItem = storedItem[storageKey];\n            }\n            this.storedItem = storedItem;\n\n            // Retrieving the selected choices for attribute, feat, or proficiency off of the storedItem\n\n            // Populating Attribute choice field\n            this.attributeOptions = [];\n            this.attributeChoices = null;\n            this.attributeMod = 1;\n            this.selectedAttributes = null;\n            this.defaultAttributes = null;\n            if (this.selectedItem.ability && this.selectedItem.ability.length) {\n                const ability = this.selectedItem.ability[0];\n                if (ability.choose) {\n                    this.attributeOptions = ability.choose.from.map(i => { return i.toUpperCase() });\n                    this.attributeChoices = ability.choose.count || 1;\n                    this.attributeMod = ability.choose.amount || 1;\n                    this.selectedAttributes = this.storedItem.selectedAttributes ? this.storedItem.selectedAttributes.split(',') : null;\n                }\n                this.defaultAttributes = this.selectedItem.ability.map((abilityObj) => {\n                    return Object.entries(abilityObj).map(e => {\n                        if (e[0] !== 'choose' && e[0] !== 'any') {\n                            let attribute = e[0].toLowerCase(),\n                                mod = e[1];\n                            return attribute.toUpperCase() + ' ' + absInt(mod);\n                        }\n                    }).filter(e => !!e).join(', ');\n                }).filter(e => !!e).join(', ');\n\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultAttributes = this.defaultAttributes;\n                this.storedItem.attributeMod = this.attributeMod;\n            }\n\n            // Populating Skill Proficiency choice field\n            this.skillProfOptions = [];\n            this.skillProfChoices = null;\n            this.selectedSkillProfs = null;\n            this.defaultSkillProfs = null;\n            if (this.selectedItem.skillProficiencies && this.selectedItem.skillProficiencies.length) {\n                const skillProficiency = this.selectedItem.skillProficiencies[0];\n                if (skillProficiency.choose) {\n                    this.skillProfOptions = skillProficiency.choose.from;\n                    this.skillProfChoices = skillProficiency.choose.count || 1;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                if (skillProficiency.any) {\n                    if (this.selectedItem.name === \"Custom Lineage\") {\n                        this.skillProfOptions = [\"Darkvision (60ft)\"].concat(Object.keys(SKILL_TO_ATB_ABV));\n                    } else {\n                        this.skillProfOptions = Object.keys(SKILL_TO_ATB_ABV);\n                    }\n                    this.skillProfChoices = skillProficiency.any;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                this.defaultSkillProfs = Object.keys(skillProficiency).map(e => {\n                    if (e !== 'choose' && e !== 'any') {\n                        return util_capitalizeAll(e) \n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultSkillProfs = this.defaultSkillProfs;\n            }\n\n\n            // \"toolProficiencies\" (Dragon Casualty)\n            //     tool list special keys - artisan's tools, musical instruments, gaming set, any, choose.from\n            //     values usually === true or 2\n            const toolProfOptions = []\n            let defaultToolProfs = [];\n            if (this.selectedItem.toolProficiencies && this.selectedItem.toolProficiencies.length) {\n                if (this.selectedItem.toolProficiencies.length > 1) {\n                    // TODO: generated a dropdown for choosing index and add additional suboption components for each choice.\n                    // path of nested suboptions should use an indexed key\n                    // test with \"Dragon Causualty\"\n                } else {\n                    if (!this.storedItem.selectedToolProfs || typeof this.storedItem.selectedToolProfs === 'string') {\n                        this.storedItem.selectedToolProfs = {};\n                    }\n                    const toolProficiency = this.selectedItem.toolProficiencies[0];\n\n                    Object.entries(toolProficiency).forEach(([toolKey, toolVal]) => {\n                        const newToolProfOption = {\n                            key: toolKey,\n                            toolProfOptions: toolsListFromCategory(toolKey),\n                            selectedToolProfs: this.storedItem.selectedToolProfs[toolKey] ? this.storedItem.selectedToolProfs[toolKey].split(',') : null\n                        };\n                        switch (toolKey) {\n                            case 'choose':\n                                const toolListsMapped = toolVal.from.map(toolsListFromCategory);\n                                newToolProfOption.toolProfOptions = toolListsMapped.flat();\n                                newToolProfOption.toolProfChoices = toolVal.count || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case 'any':\n                                newToolProfOption.toolProfChoices = toolProficiency.any || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case \"artisan's tools\":\n                            case 'musical instrument':\n                            case 'gaming set':\n                                newToolProfOption.label = `Selected ${util_capitalizeAll(toolKey)}`;\n                                newToolProfOption.toolProfChoices = Number.isInteger(toolVal) ? toolVal : 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n                        \n                            default:\n                                defaultToolProfs.push(util_capitalizeAll(toolKey))\n                                break;\n                        }\n\n                    })\n                    defaultToolProfs = defaultToolProfs.filter(e => !!e).join(', ');\n                    // store defaults on character to avoid future look-ups\n                    this.set('defaultToolProfs', defaultToolProfs.length > 0 ? defaultToolProfs : null);\n                    this.storedItem.defaultToolProfs = defaultToolProfs;\n                }\n            }\n            this.set('toolProfOptions', toolProfOptions.length > 0 ? toolProfOptions : null);\n\n\n            // \"skillToolLanguageProficiencies\"\n            let sTLProfOptions = [];\n            let sTLProfChoices = 1;\n            if (this.selectedItem.skillToolLanguageProficiencies && this.selectedItem.skillToolLanguageProficiencies.length) {\n                const sTLDef = this.selectedItem.skillToolLanguageProficiencies[0];\n                if (sTLDef.choose && sTLDef.choose.length) {\n                    if (sTLDef.choose[0].from && sTLDef.choose[0].from.length) {\n                        if (sTLDef.choose[0].from.includes(\"anySkill\")) {\n                            sTLProfOptions = sTLProfOptions.concat(Object.keys(Parser.SKILL_JSON_TO_FULL).map(skill => { return {name: skill, type: 'skill'} }));\n                        }\n                        if (sTLDef.choose[0].from.includes(\"anyTool\")) {\n                            sTLProfOptions = sTLProfOptions.concat(TOOLS_ALL.map((tool) => { return {...tool, type: \"tool\"} }));\n                        }\n                    }\n                    if (sTLDef.choose[0].count) {\n                        sTLProfChoices = sTLDef.choose[0].count;\n                    }\n                }\n            }\n            this.sTLProfChoices = sTLProfChoices;\n            this.set('sTLProfOptions', sTLProfOptions.length > 0 ? sTLProfOptions : null);\n            this.selectedSTLProfs = this.storedItem.selectedSTLProfs || null;\n\n\n            // \"resist\"\n            let defaultResists = [];\n            let resistOptions = [];\n            let resistChoices = 1;\n            if (this.selectedItem.resist && this.selectedItem.resist.length) {\n                this.selectedItem.resist.forEach((resist) => {\n                    if (typeof resist === 'string') {\n                        defaultResists.push(resist);\n                    } else if (resist.choose) {\n                        resistOptions = resist.choose.from;\n                        if (resist.choose.count) {\n                            resistChoices = resist.choose.count;\n                        }\n                    }\n                });\n                this.set('defaultResists', defaultResists.length > 0 ? defaultResists.map(util_capitalizeAll).join(', ') : null);\n                this.storedItem.defaultResists = defaultResists;\n            }\n            this.resistChoices = resistChoices;\n            this.set('resistOptions', resistOptions.length > 0 ? resistOptions : null);\n            this.selectedResists = this.storedItem.selectedResists || null;\n\n\n            // \"conditionImmune\"\n            let defaultConditionImmunes = [];\n            let conditionImmuneOptions = [];\n            let conditionImmuneChoices = 1;\n            if (this.selectedItem.conditionImmune && this.selectedItem.conditionImmune.length) {\n                this.selectedItem.conditionImmune.forEach((conditionImmune) => {\n                    if (typeof conditionImmune === 'string') {\n                        defaultConditionImmunes.push(conditionImmune);\n                    } else if (conditionImmune.choose) {\n                        conditionImmuneOptions = conditionImmune.choose.from;\n                        if (conditionImmune.choose.count) {\n                            conditionImmuneChoices = conditionImmune.choose.count;\n                        }\n                    }\n                });\n                this.set('defaultConditionImmunes', defaultConditionImmunes.length > 0 ? defaultConditionImmunes.map(util_capitalizeAll).join(', ') : null);\n                this.storedItem.defaultConditionImmunes = defaultConditionImmunes;\n            }\n            this.conditionImmuneChoices = conditionImmuneChoices;\n            this.set('conditionImmuneOptions', conditionImmuneOptions.length > 0 ? conditionImmuneOptions : null);\n            this.selectedConditionImmunes = this.storedItem.selectedConditionImmunes || null;\n\n\n            // \"languageProficiencies\" \n            //      any: #, anyStandard: #, dwarvish, choose:from, other (this usually? indicates race's own language)\n            // test with  Vedalken\n            const langProfOptions = []\n            let defaultLangProfs = [];\n            if (this.selectedItem.languageProficiencies && this.selectedItem.languageProficiencies.length) {\n                if (!this.storedItem.selectedLangProfs || typeof this.storedItem.selectedLangProfs === 'string') {\n                    this.storedItem.selectedLangProfs = {};\n                }\n                this.selectedItem.languageProficiencies.forEach(langProficiency => {\n                    Object.entries(langProficiency).forEach(([langKey, langVal]) => {\n                        const newLangProfOption = {\n                            key: langKey,\n                            langProfOptions: toolsListFromCategory(langKey),\n                            selectedLangProfs: this.storedItem.selectedLangProfs[langKey] ? this.storedItem.selectedLangProfs[langKey].split(',') : null\n                        };\n                        switch (langKey) {\n                            case 'choose':\n                                newLangProfOption.langProfOptions = langVal.from;\n                                newLangProfOption.langProfChoices = langVal.count || 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case 'any':\n                            case 'anyStandard':\n                                newLangProfOption.langProfOptions = LANGUAGES_ALL;\n                                newLangProfOption.langProfChoices = Number.isInteger(langVal) ? langVal : 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case \"other\":\n                                let name = this.selectedItem.name;\n                                if (name.includes(\"(\")) {\n                                    name = name.substring(0, name.indexOf('(')).trim();\n                                }\n                                defaultLangProfs.push(name);\n                                break;\n                        \n                            default:\n                                defaultLangProfs.push(util_capitalizeAll(langKey))\n                                break;\n                        }\n                    });\n                });\n                defaultLangProfs = defaultLangProfs.filter(e => !!e).join(', ');\n                this.defaultLangProfs = defaultLangProfs.length > 0 ? defaultLangProfs : null;\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultLangProfs = defaultLangProfs;\n            }\n            this.set('langProfOptions', langProfOptions.length > 0 ? langProfOptions : null);\n\n            // \"weaponProficiencies\"\n            //     martial, simple\n            // \n            //     \"longsword|phb\": true,\n            //\n            //     \"choose\": {\n            //         \t\"fromFilter\": \"type=martial weapon|miscellaneous=mundane\",\n            //         \t\"count\": 2\n            //      }\n            const weaponProfOptions = []\n            let defaultWeaponProfs = [];\n            if (this.selectedItem.weaponProficiencies && this.selectedItem.weaponProficiencies.length) {\n                if (!this.storedItem.selectedWeaponProfs || typeof this.storedItem.selectedWeaponProfs === 'string') {\n                    this.storedItem.selectedWeaponProfs = {};\n                }\n                this.selectedItem.weaponProficiencies.forEach(weaponProficiency => {\n                    Object.entries(weaponProficiency).forEach(([weaponKey, weaponVal]) => {\n                        const newWeaponProfOption = {\n                            key: weaponKey,\n                            selectedWeaponProfs: this.storedItem.selectedWeaponProfs[weaponKey] ? this.storedItem.selectedWeaponProfs[weaponKey].split(',') : null\n                        };\n                        switch (weaponKey) {\n                            case 'any':\n                                newWeaponProfOption.weaponProfOptions = WEAPON_ALL;\n                                newWeaponProfOption.weaponProfChoices = Number.isInteger(weaponVal) ? weaponVal : 1;\n                                weaponProfOptions.push(newWeaponProfOption);\n                                break;\n\n                            case 'choose':\n                                newWeaponProfOption.weaponProfOptions = weaponVal.fromFilter === \"martial\" ? WEAPON_MARTIAL : weaponProfOptions.choose.fromFilter === \"simple\" ? WEAPON_SIMPLE : WEAPON_ALL;\n                                newWeaponProfOption.weaponProfChoices = weaponVal.count || 1;\n                                weaponProfOptions.push(newWeaponProfOption);\n                                break;\n                        \n                            default:\n                                const weaponName = weaponKey.split('|')[0];\n                                defaultWeaponProfs.push(util_capitalizeAll(weaponName));\n                                break;\n                        }\n                    });\n                });\n                defaultWeaponProfs = defaultWeaponProfs.filter(e => !!e).join(', ');\n            }\n            if (defaultWeaponProfs.length > 0) {\n                this.set(\"defaultWeaponProfs\", defaultWeaponProfs);\n                this.storedItem.defaultWeaponProfs = defaultWeaponProfs;\n\n            } else {\n                this.set(\"defaultWeaponProfs\", null);\n                this.storedItem.defaultWeaponProfs = null;\n            }\n            this.set(\"defaultWeaponProfs\", defaultWeaponProfs.length > 0 ? defaultWeaponProfs : null);\n            // store defaults on character to avoid future look-ups\n            this.storedItem.defaultWeaponProfs = defaultWeaponProfs;\n            this.set('weaponProfOptions', weaponProfOptions.length > 0 ? weaponProfOptions : null);\n\n\n            // \"armorProficiencies\"\n            //\n            const armorProfOptions = []\n            let defaultArmorProfs = [];\n            if (this.selectedItem.armorProficiencies && this.selectedItem.armorProficiencies.length) {\n                if (!this.storedItem.selectedArmorProfs || typeof this.storedItem.selectedArmorProfs === 'string') {\n                    this.storedItem.selectedArmorProfs = {};\n                }\n                this.selectedItem.armorProficiencies.forEach(armorProficiency => {\n                    Object.entries(armorProficiency).forEach(([armorKey, armorVal]) => {\n                        const newArmorProfOption = {\n                            key: armorKey,\n                            selectedArmorProfs: this.storedItem.selectedArmorProfs[armorKey] ? this.storedItem.selectedArmorProfs[armorKey].split(',') : null\n                        };\n                        switch (armorKey) {\n                            case 'any':\n                                newArmorProfOption.armorProfOptions = [\"light\", \"medium\", \"heavy\", \"shield\"];\n                                newArmorProfOption.armorProfChoices = Number.isInteger(armorVal) ? armorVal : 1;\n                                armorProfOptions.push(newArmorProfOption);\n                                break;\n                        \n                            default:\n                                if (armorKey.includes('|')) {\n                                    const armorName = armorKey.split('|')[0];\n                                    defaultArmorProfs.push(util_capitalizeAll(armorName))\n                                } else {\n                                    defaultArmorProfs.push(util_capitalizeAll(armorKey));\n                                }\n                                break;\n                        }\n                    });\n                });\n                defaultArmorProfs = defaultArmorProfs.filter(e => !!e).join(', ');\n                this.defaultArmorProfs = defaultArmorProfs.length > 0 ? defaultArmorProfs : null;\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultArmorProfs = defaultArmorProfs;\n            }\n            this.set('armorProfOptions', armorProfOptions.length > 0 ? armorProfOptions : null);\n\n\n            // Dark Vision \n            //   uses entry names, only one depth.\n            let defaultDarkvision;\n            if (this.selectedItem.entries) {\n                this.selectedItem.entries\n                    .forEach((entry) => {\n                        if (entry && entry.name && entry.name.toLowerCase() === 'darkvision' \n                                && entry.entries && entry.entries.length) {\n                            const is60 = entry.entries[0].includes('60'),\n                                is120 = entry.entries[0].includes('120');\n                                defaultDarkvision = is120 ? 120 : is60 ? 60 : 0;\n                        }\n                    })\n            }\n\n            this.storedItem.defaultDarkvision = defaultDarkvision || null;\n            this.defaultDarkvision = defaultDarkvision || null;\n\n            // Feast\n            //  can populate a nested suboption component entry \n            this.featOptions = [];\n            this.featChoices = null;\n            this.selectedFeat = null;\n            if (this.selectedItem.feats) {\n                this.featOptions = await loadModel('feats');\n                this.featChoices = this.selectedItem.feats;\n                this.selectedFeat = this.storedItem.selectedFeat;\n            }\n            \n            this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n        } else {\n            this.storedItem = {}\n            this.attributeOptions = [];\n            this.skillProfOptions = [];\n            this.armorProfOptions = [];\n            this.weaponProfOptions = [];\n            this.toolProfOptions = [];\n            this.langProfOptions = [];\n            this.featOptions = [];\n            this.defaultAttributes = null;\n            this.defaultSkillProfs = null;\n            this.defaultArmorProfs = null;\n            this.defaultWeaponProfs = null;\n            this.defaultToolProfs = null;\n            this.defaultLangProfs = null;\n            this.defaultDarkvision = null;\n        }\n    }\n\n    _toolProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedToolProfs[key] = skills.join(',');\n            const newToolProfOptions = cloneDeep(this.toolProfOptions);\n            newToolProfOptions[index].selectedToolProfs = skills;\n            this.set('toolProfOptions', newToolProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _langProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedLangProfs[key] = skills.join(',');\n            const newLangProfOptions = cloneDeep(this.langProfOptions);\n            newLangProfOptions[index].selectedLangProfs = skills;\n            this.set('langProfOptions', newLangProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _armorProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedArmorProfs[key] = skills.join(',');\n            const newArmorProfOptions = cloneDeep(this.armorProfOptions);\n            newArmorProfOptions[index].selectedArmorProfs = skills;\n            this.set('armorProfOptions', newArmorProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _weaponProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedWeaponProfs[key] = skills.join(',');\n            const newWeaponProfOptions = cloneDeep(this.weaponProfOptions);\n            newWeaponProfOptions[index].selectedWeaponProfs = skills;\n            this.set('weaponProfOptions', newWeaponProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _skillProficiencyAddCallback() {\n        return ((skills) => {\n            this.storedItem.selectedSkillProfs = skills.join(',');\n            this.selectedSkillProfs = skills;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _attributeAddCallback() {\n        return ((attr) => {\n            this.storedItem.selectedAttributes = attr.join(',');\n            this.selectedAttributes = attr;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _featAddCallback() {\n        return ((feat) => {\n            this.storedItem.selectedFeat = feat;\n            this.selectedFeat = this.storedItem.selectedFeat;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _resistAddCallback() {\n        return ((resists) => {\n            this.storedItem.selectedResists = resists;\n            this.selectedResists = resists;\n            saveCharacter(this.character);\n        }).bind(this)\n    }\n\n    _conditionImmuneAddCallback() {\n        return ((conditionImmunes) => {\n            this.storedItem.selectedConditionImmunes = conditionImmunes;\n            this.selectedConditionImmunes = conditionImmunes;\n            saveCharacter(this.character);\n        }).bind(this)\n    }\n\n    _suboptionStorageKey(storageKey) {\n        return `${storageKey}.suboptions`\n    }\n\n    _showEmpty(isEditMode, value) {\n        return !isEditMode && !value;\n    }\n\n    _exists() {\n        for (let arg of arguments) {\n            if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _plusPrefix(num) {\n        return `+${num}`\n    }\n\n    _plural(str, num, overrideLabel) {\n        const newStr = overrideLabel || str;\n        if (num > 1) {\n            return newStr + 's'\n        }\n        return newStr;\n    }\n\n    _printOptions(selectedOptions, storedItem, key) {\n        let out = []\n        for (const option of selectedOptions) {\n            out = out.concat(storedItem[`selected${key}Profs`][option])\n        }\n        return out.join(', ');\n    }\n\n    static get template() {\n        return html`\n            <style include=\"material-styles\">\n                .some {}\n                :host {\n                    display: block;\n                    white-space: initial;\n                }\n                [hidden] {\n                    display: none !important;\n                }\n                dnd-character-builder-suboptions {\n                    padding-left: 40px;\n                    display: block;\n                }\n                dnd-select-add {\n                    width: 100%;\n                    display: block;\n                }\n                dnd-select-add,\n                dnd-character-builder-suboptions {\n                    width: var(--suboptions__width);\n                    max-width: var(--suboptions__max-width);\n                }\n                .default-selection {\n                    font-size: 14px;\n                    margin-bottom: 6px;\n                }\n                @media(min-width: 420px) {\n                    dnd-select-add {\n                        \n                    }\n                }\n\n                @media(min-width: 921px) {\n                }\n            </style>\n\n            <div class=\"col-wrap\">\n                <div hidden$=\"[[!_exists(defaultAttributes)]]\" class=\"default-selection\"><b>Ability Increase: </b><span>[[defaultAttributes]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultSkillProfs)]]\" class=\"default-selection\"><b>Skills: </b><span>[[defaultSkillProfs]]</span></div>\n                \n                <div hidden$=\"[[!_exists(defaultArmorProfs)]]\" class=\"default-selection\"><b>Armor: </b><span>[[defaultArmorProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultWeaponProfs)]]\" class=\"default-selection\"><b>Weapons: </b><span>[[defaultWeaponProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultToolProfs)]]\" class=\"default-selection\"><b>Tools: </b><span>[[defaultToolProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultLangProfs)]]\" class=\"default-selection\"><b>Languages: </b><span>[[defaultLangProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultDarkvision)]]\" class=\"default-selection\"><b>Darkvision: </b><span>[[defaultDarkvision]] ft.</span></div>\n\n                <div hidden$=\"[[!_exists(defaultResists)]]\" class=\"default-selection\"><b>Resistances: </b><span>[[defaultResists]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultConditionImmunes)]]\" class=\"default-selection\"><b>Condition Immunities: </b><span>[[defaultConditionImmunes]]</span></div>\n\n\n                <template is=\"dom-if\" if=\"[[_exists(attributeOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\" \n                        placeholder=\"<Select Attribute>\" label='[[_plural(\"Selected Attribute\", attributeChoices)]]'\n                        choices=\"[[attributeChoices]]\" paren=\"[[_plusPrefix(attributeMod)]]\" options=\"[[attributeOptions]]\"\n                        value=\"[[selectedAttributes]]\" add-callback=\"[[_attributeAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(skillProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill>\" label='[[_plural(\"Selected Skill\", skillProfChoices)]]'\n                        choices=\"[[skillProfChoices]]\" options=\"[[skillProfOptions]]\"\n                        value=\"[[selectedSkillProfs]]\" add-callback=\"[[_skillProficiencyAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[armorProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Armor>\" label='[[_plural(\"Selected Armor\", item.armorProfChoices, item.label)]]'\n                        choices=\"[[item.armorProfChoices]]\" options=\"[[item.armorProfOptions]]\"\n                        value=\"[[item.selectedArmorProfs]]\" add-callback=\"[[_armorProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[weaponProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Weapon>\" label='[[_plural(\"Selected Weapon\", item.weaponProfChoices, item.label)]]'\n                        choices=\"[[item.weaponProfChoices]]\" options=\"[[item.weaponProfOptions]]\"\n                        value=\"[[item.selectedWeaponProfs]]\" add-callback=\"[[_weaponProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[toolProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Tool>\" label='[[_plural(\"Selected Tool\", item.toolProfChoices, item.label)]]'\n                        choices=\"[[item.toolProfChoices]]\" options=\"[[item.toolProfOptions]]\"\n                        value=\"[[item.selectedToolProfs]]\" add-callback=\"[[_toolProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[langProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Language>\" label='[[_plural(\"Selected Language\", item.langProfChoices, item.label)]]'\n                        choices=\"[[item.langProfChoices]]\" options=\"[[item.langProfOptions]]\"\n                        value=\"[[item.selectedLangProfs]]\" add-callback=\"[[_langProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(sTLProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill or Tool>\" label=\"Selected Skill or Tool\"\n                        choices=\"[[sTLProfChoices]]\" options=\"[[sTLProfOptions]]\"\n                        value=\"[[selectedSTLProfs]]\" add-callback=\"[[_sTLProfAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(resistOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Resistance>\" label=\"Selected Resistance\"\n                        choices=\"[[resistChoices]]\" options=\"[[resistOptions]]\"\n                        value=\"[[selectedResists]]\" add-callback=\"[[_resistAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(conditionImmuneOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Condition Immunity>\" label=\"Selected Condition Immunity\"\n                        choices=\"[[conditionImmuneChoices]]\" options=\"[[conditionImmuneOptions]]\"\n                        value=\"[[selectedConditionImmunes]]\" add-callback=\"[[_conditionImmuneAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(featOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Feat>\" label=\"Selected Feat\"\n                        options=\"[[featOptions]]\" value=\"[[selectedFeat]]\"\n                        add-callback=\"[[_featAddCallback()]]\">\n                    </dnd-select-add>\n                    \n                    <template is=\"dom-if\" if=\"[[_exists(selectedFeat)]]\"></template>\n                        <dnd-character-builder-suboptions storage-key=\"[[_suboptionStorageKey(storageKey)]]\" selected-item=\"[[selectedFeat]]\"></dnd-character-builder-suboptions>\n                    </template>\n                </template>\n            </div>\n        `;\n    }\n}\n\ncustomElements.define(\"dnd-character-builder-suboptions\", DndCharacterBuilderSuboptions);\n"],"sourceRoot":""}