{"version":3,"sources":["webpack:///./components/dnd-select-add.js","webpack:///./components/dnd-switch.js","webpack:///./components/views/character/dnd-character-builder-suboptions.js","webpack:///./components/dnd-asi-select.js"],"names":["DndSelectAdd","options","type","Array","model","String","addCallback","Function","value","observer","choices","Number","paren","label","placeholder","multiValue","disabled","Boolean","reflectToAttribute","theme","this","listBox","remove","$","select","requestContentUpdate","isArray","choiceArray","map","v","indexOf","findIndex","o","name","source","filter","selectedValues","i","join","super","ready","setTimeout","async","contentEl","_overlayElement","shadowRoot","querySelector","scrollHeight","addEventListener","e","scrollTop","passive","renderer","root","document","createElement","setAttribute","opened","wasPreviouslySelected","srcElement","getAttribute","scroll","length","splice","selectedOptions","option","item","optionName","style","setProperty","innerHTML","appendChild","_assignMenuElement","valueUpdated","connectedCallback","selectChangeHandler","val","selected","undefined","disconnectedCallback","removeEventListener","a","result","customElements","define","DndSwitch","initialValue","checked","notify","secondaryLabel","switchEl","switchEventHandler","dispatchEvent","CustomEvent","detail","bubbles","composed","DndCharacterBuilderSuboptions","storageKey","selectedItem","Object","skillProfOptions","skillProfChoices","selectedSkillProfs","defaultSkillProfs","toolProfOptions","defaultToolProfs","langProfOptions","defaultLangProfs","weaponProfOptions","defaultWeaponProfs","armorProfOptions","defaultArmorProfs","defaultDarkvision","attributeOptions","attributeChoices","attributeMod","selectedAttributes","defaultAttributes","resistOptions","resistChoices","selectedResists","defaultResists","conditionImmuneOptions","conditionImmuneChoices","selectedConditionImmunes","defaultConditionImmunes","featOptions","featChoices","selectedFeat","sTLProfOptions","sTLProfChoices","selectedSTLProfs","spellSetOptions","selectedSpellSet","isEditMode","characterChangeHandler","character","set","editModeHandler","storageKeys","split","storedItem","isNaN","parseInt","selectedItemName","selectedItemSource","ability","choose","from","toUpperCase","count","amount","abilityObj","entries","attribute","toLowerCase","mod","skillProficiencies","skillProficiency","any","concat","keys","toolProficiencies","selectedToolProfs","toolProficiency","forEach","toolKey","toolVal","newToolProfOption","key","toolListsMapped","flat","toolProfChoices","push","isInteger","skillToolLanguageProficiencies","sTLDef","includes","SKILL_JSON_TO_FULL","skill","tool","resist","conditionImmune","languageProficiencies","selectedLangProfs","langProficiency","langKey","langVal","newLangProfOption","langProfChoices","substring","trim","weaponProficiencies","selectedWeaponProfs","weaponProficiency","weaponKey","weaponVal","newWeaponProfOption","weaponProfChoices","fromFilter","weaponName","armorProficiencies","selectedArmorProfs","armorProficiency","armorKey","armorVal","newArmorProfOption","armorProfChoices","armorName","entry","is60","is120","feats","featModel","find","feat","asi","hasASI","asiChecked","asiFeatStored","previouslySelectedFeat","asiFeat","asiFeatItem","attributes","previouslySelectedAttributes","asiAbility1","asiAbility2","spellLookupPromises","additionalSpells","defaultSpells","defaultAbility","selectedSpells","addtlSpellSet","addtlSpellSetIndex","spellSetOption","expandedSpells","spellChoices","abilityChoices","spellSetPromises","addtlSpellTypeKey","addtlSpellTypeValue","addtlSpellLevelKey","addtlSpellLevelValue","adjAddtlSpellLevelValue","will","addtlSpellResetKey","addtlSpellResetValue","adjAddtlSpellResetValue","addtlSpellCountKey","addtlSpellCountValue","path","uses","spellEntry","level","spellLookupPromise","then","spellChoiceAtPath","spells","spellResult","values","foundExpandedSpellsLevel","es","selectedAbility","Promise","all","_renderSpellName","sort","es1","es2","chooseString","index","skills","newToolProfOptions","bind","newLangProfOptions","newArmorProfOptions","newWeaponProfOptions","attr","profs","resists","conditionImmunes","spellSet","updateOptions","newSelectedSpellSet","choice","mappedSpells","spell","spellChoiceAtPathIndex","resource","resourceName","selectedAbilityOne","selectedAbilityTwo","suboptionKeys","ck","startsWith","removalKey","arg","arguments","constructor","num","str","overrideLabel","newStr","out","list","s","viewId","__data","target","__dataHost","b","DndAsiSelect","changeCallback","switchChangeHandler","_changeHandler","linkData","dataLink"],"mappings":"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","file":"0.bundle.js","sourcesContent":["import { PolymerElement, html } from '@polymer/polymer';\nimport { mergeFeature } from '../util/charBuilder';\nimport { jqEmpty, util_capitalizeAll } from \"../js/utils\";\nimport \"@vaadin/vaadin-select\";\nimport {loadModel} from \"../util/data\";\n\nclass DndSelectAdd extends PolymerElement {\n  static get properties() {\n    return {\n      options: {\n        type: Array\n      },\n      model: {\n        type: String\n      },\n      addCallback: {\n        type: Function\n      },\n      value: {\n        type: String,\n        value: \"\",\n        observer: \"valueUpdated\"\n      },\n      choices: {\n        type: Number,\n        observer: \"choicesUpdated\"\n      },\n      paren: {\n        type: String,\n      },\n      label: {\n        type: String\n      },\n      placeholder: {\n        type: String,\n      },\n      multiValue: {\n        type: String,\n        value: \"\"\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      theme: {\n        reflectToAttribute: true,\n        type: String,\n        value: \"\"\n      }\n    }\n  }\n\n  choicesUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.requestContentUpdate();\n  }\n\n  valueUpdated() {\n    if (this.choices) {\n      if (Array.isArray(this.value) && this.options) {\n        const choiceArray = this.value\n          .map(v => {\n            if (this.options.indexOf(v) !== -1) {\n              return this.options.indexOf(v);\n            } else {\n              return this.options.findIndex((o) => {\n                return o.name === v.name && o.source === v.source;\n              });\n            }\n          })\n          .filter(v => { return v !== -1 });\n\n        if (this.listBox) {\n          this.listBox.selectedValues = choiceArray;\n        }\n        this.multiValue = choiceArray.map(i => {\n          let value = this.options[i];\n          return value.name ? value.name : util_capitalizeAll(value) \n        }).join(\", \");\n      } else {\n        if (this.listBox) {\n          this.listBox.selectedValues = [];\n        }\n        this.multiValue = \"\";\n      }\n    } else {\n      if (this.value && this.options) {\n        if (this.value.source) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name && i.source === this.value.source || i === this.value.name }) + \"\";\n        } else if (this.value.name) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name || i === this.value.name }) + \"\";\n        } else {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value || i === this.value }) + \"\";\n        }\n      } else {\n        this.$.select.value = \"\";\n      }\n    }\n  }\n\n  ready() {\n    super.ready();\n\n    setTimeout(async () => {\n      if (this.model) {\n        this.options = await loadModel(this.model);\n      }\n\n      const contentEl = this.$.select._overlayElement.shadowRoot.querySelector('#content');\n      let scrollHeight = 0;\n      \n      contentEl.addEventListener('scroll', (e) => {\n        scrollHeight = contentEl.scrollTop;\n      }, { passive: true });\n\n      this.$.select.renderer = (root, select) => {\n        if (!this.listBox) {\n          this.listBox = document.createElement('vaadin-list-box');\n\n          // setting up for multi-select\n          if (this.choices) {\n            this.listBox.setAttribute(\"multiple\", true);\n\n            this.listBox.addEventListener(\"click\", (e) => {\n              select.opened = true;\n              let wasPreviouslySelected = e.srcElement.getAttribute(\"selected\") !== null\n              contentEl.scroll(0, scrollHeight);\n              setTimeout(() => {\n                if (this.listBox.selectedValues.length > this.choices\n                    && !wasPreviouslySelected) {\n                  this.listBox.selectedValues.splice(this.listBox.selectedValues.length - 2, 1)\n                }\n                let selectedOptions = this.listBox.selectedValues.map(v => { return this.options[v] });\n                this.multiValue = selectedOptions.map(o => { return o.name ? o.name : util_capitalizeAll(o) }).join(', ');\n                if (this.addCallback) {\n                  this.addCallback(selectedOptions);\n                }\n              }, 0);\n            });\n\n          }\n\n          // Adding options\n          if (this.options && this.options.length) {\n            for (let i = 0; i < this.options.length; i ++) {\n              const option = this.options[i],\n                item = document.createElement('vaadin-item');\n              const optionName = option.name || util_capitalizeAll(option);\n              item.style.setProperty(\"--lumo-primary-text-color\", \"var(--mdc-theme-secondary)\");\n              item.style.setProperty(\"--lumo-primary-color-10pct\", \"var(--mdc-theme-secondary-10pct)\");\n              // item.style.setProperty(\"--lumo-primary-color-50pct\", \"var(--mdc-theme-primary-50pct)\");\n              item.innerHTML = `<span class=\"select-add__item-name\" style='margin-left: 10px'>${optionName}</span>`;\n              if (option.source) {\n                item.innerHTML += ` <span class=\"select-add__item-src\" style='font-size: 14px;color: var(--lumo-primary-color-50pct);'>${option.source || ''}</span>`\n              }\n              item.setAttribute(\"value\", i);\n              this.listBox.appendChild(item);\n            }\n          }\n          root.appendChild(this.listBox);\n          this.$.select._assignMenuElement();\n\n          this.valueUpdated();\n        }\n      };\n    }, 0);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.selectChangeHandler = () => {\n      const val = this.$.select.value;\n      if (val) {\n        if (!this.choices) {\n          const selected = this.options[val];\n          if (this.addCallback) {\n            this.addCallback(selected, this.model);\n          } else {\n            mergeFeature(undefined, selected, this.model);\n          }\n          if (!this.value) {\n            this.$.select.value = \"\";\n          }\n        }\n      }\n    };\n\n    this.$.select.addEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.$.select.removeEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  _label(label, choices, paren) {\n    let result = '';\n    if (label) {\n      result = label;\n      if (choices && choices !== 1 && choices !== 100) {\n        result += ` (pick ${choices})`;\n      }\n      if (paren) {\n        result += ` (${paren})`;\n      }\n    }\n    return result;\n  }\n\n  _theme(theme) {\n    return `dark add ${theme}`;\n  }\n  \n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n        [slot=\"prefix\"] {\n          width: calc(100% - 46px);\n          padding: 12px;\n          line-height: 1.4;\n        }\n        vaadin-select {\n          width: 100%;\n          --lumo-primary-text-color: var(--mdc-theme-primary);\n        }\n        vaadin-item[selected] {\n\n        }\n        .prefix {\n          white-space: normal;\n          color: var(--mdc-theme-primary);\n        }\n        .select-add__item-name {\n          color: var(--mdc-theme-primary);\n        }\n      </style>\n      <vaadin-select id=\"select\" add theme$=\"[[_theme(theme)]]\" label=\"[[_label(label, choices, paren)]]\" placeholder=\"[[placeholder]]\" disabled$=\"[[disabled]]\">\n        <div hidden$=\"[[!_exists(multiValue)]]\" slot=\"prefix\">\n          <span class=\"prefix\">[[multiValue]]</span>\n        </div>\n      </vaadin-select>\n    `;\n  }\n}\ncustomElements.define('dnd-select-add', DndSelectAdd);","import { PolymerElement, html } from \"@polymer/polymer\";\nimport { MDCSwitch } from \"@material/switch\";\n\nclass DndSwitch extends PolymerElement {\n  \n  static get properties() {\n    return {\n      initialValue: {\n        type: Boolean,\n        value: false,\n        observer: 'initValueChange'\n      },\n      checked: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      },\n      label: {\n        type: String,\n        value: ''\n      },\n      secondaryLabel: {\n        type: String,\n        value: ''\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      }\n    };\n  }\n\n  initValueChange() {\n    if (this.switchEl) {\n      this.switchEl.checked = this.initialValue;\n      this.checked = this.initialValue;\n    }\n  }\n\n  ready() {\n    super.ready(); \n\n    setTimeout(() => {\n      this.switchEl = new MDCSwitch(this.shadowRoot.querySelector(\".mdc-switch\"));\n  \n      this.switchEl.checked = this.initialValue;\n      this.checked = this.initialValue;\n    }, 10);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.switchEventHandler = () => {\n      this.checked = this.switchEl.checked;\n      this.dispatchEvent(new CustomEvent(\"switch-change\", {\n        detail: {\n          checked: this.switchEl.checked\n        },\n        bubbles: true,\n        composed: true\n      }));\n    };\n    this.shadowRoot.querySelector(\".mdc-switch__native-control\").addEventListener(\"change\", this.switchEventHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.shadowRoot.querySelector(\".mdc-switch__native-control\").removeEventListener(\"change\", this.switchEventHandler);\n  }\n\n  _switchClasses(disabled) {\n    return disabled ? \"mdc-switch mdc-list-item__meta mdc-switch--disabled\" : \"mdc-switch mdc-list-item__meta\";\n  }\n\n  static get template() {\n    return html`\n      <style include=\"material-styles\">\n        :host {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          text-align: center;\n        }\n        :host([checked]) label.secondary {\n          color: var(--mdc-theme-primary);\n        }\n        :host([checked]) label:not(.secondary) {\n          color: var(--lumo-secondary-text-color);\n        }\n        label {\n          color: var(--mdc-theme-primary);\n          font-weight: 500;\n          font-size: var(--lumo-font-size-s);\n          margin-right: 16px;\n          transition: color 0.2s;\n        }\n        label.secondary {\n          color: var(--lumo-secondary-text-color);\n          margin-right: 0;\n          margin-left: 16px;\n        }\n        :host([extra-padding]) label.secondary {\n          margin-left: 50px;\n        }\n        :host([no-color]) .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: #000;\n          border-color: #000;\n        }\n        :host([no-color]) .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: #fff;\n          border-color: #fff;\n        }\n        :host([no-color]) .mdc-switch.mdc-switch--checked .mdc-switch__thumb-underlay::before {\n          background-color: #9e9e9e;\n        }\n        :host([no-color]) .mdc-switch.mdc-switch--checked .mdc-switch__thumb-underlay::after {\n          background-color: #9e9e9e;\n        }\n      </style>\n      \n      <label for=\"switch\">[[label]]<slot name=\"label\"></slot></label>\n      <div class$=\"[[_switchClasses(disabled)]]\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\">\n          <div class=\"mdc-switch__thumb\">\n            <input type=\"checkbox\" id=\"switch\" class=\"mdc-switch__native-control\" role=\"switch\" disabled$=\"[[disabled]]\" />\n          </div>\n        </div>\n      </div>\n      <label class=\"secondary\">[[secondaryLabel]]<slot name=\"secondaryLabel\"></slot></label>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-switch\", DndSwitch);","import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n    getCharacterChannel,\n    getSelectedCharacter,\n    saveCharacter,\n} from \"../../../util/charBuilder\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { util_capitalizeAll, absInt, cloneDeep } from \"../../../js/utils\"; \nimport { filterModel, loadModel } from \"../../../util/data\";\nimport '../../dnd-select-add';\nimport '../../dnd-asi-select';\nimport { SKILL_TO_ATB_ABV } from \"../../../js/bestiary\";\nimport { } from '@polymer/polymer/lib/elements/dom-if.js';\nimport { } from '@polymer/polymer/lib/elements/dom-repeat.js';\nimport { LANGUAGES_ALL, toolsListFromCategory, TOOLS_ALL, WEAPON_ALL, WEAPON_MARTIAL, WEAPON_SIMPLE } from \"../../../util/consts\";\nimport Parser from \"../../../util/Parser\";\n\n\n// TODO parsing\n//// \"expertise\"\n//// class entry parsing - \"gain proficiency\" - {@item brewer's supplies|phb}, martial weapons, {@skill Performance}, or, choose one, \n///\n\nclass DndCharacterBuilderSuboptions extends PolymerElement {\n    static get properties() {\n        return {\n            storageKey: {\n                type: String\n            },\n            label: {\n                type: String\n            },\n            // This selectedItem provided is used to populate the sub option fields using the option data structure setup in data\n            selectedItem: {\n                type: Object\n            },\n\n            skillProfOptions: {\n                type: Array,\n                value: []\n            },\n            skillProfChoices: {\n                type: Number,\n            },\n            selectedSkillProfs: {\n                type: Array,\n            },\n            defaultSkillProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            toolProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultToolProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            langProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultLangProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            weaponProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultWeaponProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            armorProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultArmorProfs: {\n                type: String,\n                value: \"\"\n            },\n            defaultDarkvision: {\n                type: String,\n                value: \"\"\n            },\n\n            attributeOptions: {\n                type: Array,\n                value: []\n            },\n            attributeChoices: {\n                type: Number,\n            },\n            attributeMod: {\n                type: Number,\n            },\n            selectedAttributes: {\n                type: Array,\n            },\n            defaultAttributes: {\n                type: String,\n                value: \"\"\n            },\n\n            resistOptions: {\n                type: Array,\n                value: []\n            },\n            resistChoices: {\n                type: Number,\n            },\n            selectedResists: {\n                type: Array,\n            },\n            defaultResists: {\n                type: String,\n                value: \"\"\n            },\n\n            conditionImmuneOptions: {\n                type: Array,\n                value: []\n            },\n            conditionImmuneChoices: {\n                type: Number,\n            },\n            selectedConditionImmunes: {\n                type: Array,\n            },\n            defaultConditionImmunes: {\n                type: String,\n                value: \"\"\n            },\n\n            featOptions: {\n                type: Array,\n                value: []\n            },\n            featChoices: {\n                type: Number\n            },\n            selectedFeat: {\n                type: Array,\n            },\n\n            sTLProfOptions: {\n                type: Array,\n                value: []\n            },\n            sTLProfChoices: {\n                type: Number\n            },\n            selectedSTLProfs: {\n                type: Array,\n            },\n\n            spellSetOptions: {\n                type: Array,\n            },\n            selectedSpellSet: {\n                type: Object,\n                value: {}\n            },\n\n            isEditMode: {\n                type: Boolean,\n                value: false\n            },\n        };\n    }\n\n    static get observers() {\n        return ['updateOptions(selectedItem, storageKey)']\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.characterChangeHandler = (e) => {\n            // let character = cloneDeep(e.detail.character);\n            let character = e.detail.character;\n            this.set('character', character);\n        };\n        \n        this.set('character', getSelectedCharacter());\n        getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n        this.editModeHandler = (e) => {\n            this.isEditMode = e.detail.isEditMode;\n        }\n        getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n        this.isEditMode = isEditMode();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n        getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n    }\n\n    async updateOptions() {\n        if (!this.character) {\n            this.set('character', getSelectedCharacter());\n        }\n        if (this.storageKey && this.selectedItem) {\n            // Finding the storedItem from the character's choices at storageKey \n            const storageKeys = this.storageKey.split('.');\n            if (!this.character.choices) {\n                this.character.choices = {};\n            }\n            let storedItem = this.character.choices;\n\n            for (let i = 0; i < storageKeys.length; i++) {\n                const storageKey = storageKeys[i];\n                if (!storedItem[storageKey]) {\n                    if (storageKeys.length < i + 1 && !isNaN(parseInt(storageKeys[i + 1], 10))) {\n                        storedItem[storageKey] = new Array(20);\n                    } else {\n                        storedItem[storageKey] = {};\n                    }\n                }\n                if (i === storageKeys.length - 1) {\n                    // Clearing out all stored choices if the selected item has changed from what was previously selected and options chosen for\n                    if (storedItem[storageKey].selectedItemName !== this.selectedItem.name || storedItem[storageKey].selectedItemSource !== this.selectedItem.source) {\n                        storedItem[storageKey] = {\n                            selectedItemName: this.selectedItem.name,\n                            selectedItemSource: this.selectedItem.source,\n                            label: this.label || undefined\n                        }\n                    }\n                }\n                storedItem = storedItem[storageKey];\n            }\n            this.storedItem = storedItem;\n            if (this.label) {\n                this.storedItem.label = this.label;\n            }\n\n            // Retrieving the selected choices for attribute, feat, or proficiency off of the storedItem\n\n            // Populating Attribute choice field\n            this.attributeOptions = [];\n            this.attributeChoices = null;\n            this.attributeMod = 1;\n            this.selectedAttributes = null;\n            this.defaultAttributes = null;\n            if (this.selectedItem.ability && this.selectedItem.ability.length) {\n                const ability = this.selectedItem.ability[0];\n                if (ability.choose) {\n                    this.attributeOptions = ability.choose.from.map(i => { return i.toUpperCase() });\n                    this.attributeChoices = ability.choose.count || 1;\n                    this.attributeMod = ability.choose.amount || 1;\n                    this.selectedAttributes = this.storedItem.selectedAttributes ? this.storedItem.selectedAttributes.split(',') : null;\n                }\n                this.defaultAttributes = this.selectedItem.ability.map((abilityObj) => {\n                    return Object.entries(abilityObj).map(e => {\n                        if (e[0] !== 'choose' && e[0] !== 'any') {\n                            let attribute = e[0].toLowerCase(),\n                                mod = e[1];\n                            return attribute.toUpperCase() + ' ' + absInt(mod);\n                        }\n                    }).filter(e => !!e).join(', ');\n                }).filter(e => !!e).join(', ');\n\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultAttributes = this.defaultAttributes;\n                this.storedItem.attributeMod = this.attributeMod;\n            }\n\n            // Populating Skill Proficiency choice field\n            this.skillProfOptions = [];\n            this.skillProfChoices = null;\n            this.selectedSkillProfs = null;\n            this.defaultSkillProfs = null;\n            if (this.selectedItem.skillProficiencies && this.selectedItem.skillProficiencies.length) {\n                const skillProficiency = this.selectedItem.skillProficiencies[0];\n                if (skillProficiency.choose) {\n                    this.skillProfOptions = skillProficiency.choose.from;\n                    this.skillProfChoices = skillProficiency.choose.count || 1;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                if (skillProficiency.any) {\n                    if (this.selectedItem.name === \"Custom Lineage\") {\n                        this.skillProfOptions = [\"Darkvision (60ft)\"].concat(Object.keys(SKILL_TO_ATB_ABV));\n                    } else {\n                        this.skillProfOptions = Object.keys(SKILL_TO_ATB_ABV);\n                    }\n                    this.skillProfChoices = skillProficiency.any;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                this.defaultSkillProfs = Object.keys(skillProficiency).map(e => {\n                    if (e !== 'choose' && e !== 'any') {\n                        return util_capitalizeAll(e) \n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultSkillProfs = this.defaultSkillProfs;\n            }\n\n\n            // \"toolProficiencies\" (Dragon Casualty)\n            //     tool list special keys - artisan's tools, musical instruments, gaming set, any, choose.from\n            //     values usually === true or 2\n            const toolProfOptions = []\n            let defaultToolProfs = [];\n            if (this.selectedItem.toolProficiencies && this.selectedItem.toolProficiencies.length) {\n                if (this.selectedItem.toolProficiencies.length > 1) {\n                    // TODO: generated a dropdown for choosing index and add additional suboption components for each choice.\n                    // path of nested suboptions should use an indexed key\n                    // test with \"Dragon Causualty\"\n                } else {\n                    if (!this.storedItem.selectedToolProfs || typeof this.storedItem.selectedToolProfs === 'string') {\n                        this.storedItem.selectedToolProfs = {};\n                    }\n                    const toolProficiency = this.selectedItem.toolProficiencies[0];\n\n                    Object.entries(toolProficiency).forEach(([toolKey, toolVal]) => {\n                        const newToolProfOption = {\n                            key: toolKey,\n                            toolProfOptions: toolsListFromCategory(toolKey),\n                            selectedToolProfs: this.storedItem.selectedToolProfs[toolKey] ? this.storedItem.selectedToolProfs[toolKey].split(',') : null\n                        };\n                        switch (toolKey) {\n                            case 'choose':\n                                const toolListsMapped = toolVal.from.map(toolsListFromCategory);\n                                newToolProfOption.toolProfOptions = toolListsMapped.flat();\n                                newToolProfOption.toolProfChoices = toolVal.count || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case 'any':\n                                newToolProfOption.toolProfChoices = toolProficiency.any || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case \"artisan's tools\":\n                            case 'musical instrument':\n                            case 'gaming set':\n                                newToolProfOption.label = `Selected ${util_capitalizeAll(toolKey)}`;\n                                newToolProfOption.toolProfChoices = Number.isInteger(toolVal) ? toolVal : 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n                        \n                            default:\n                                defaultToolProfs.push(util_capitalizeAll(toolKey))\n                                break;\n                        }\n\n                    })\n                    defaultToolProfs = defaultToolProfs.filter(e => !!e).join(', ');\n                    // store defaults on character to avoid future look-ups\n                    this.set('defaultToolProfs', defaultToolProfs.length > 0 ? defaultToolProfs : null);\n                    this.storedItem.defaultToolProfs = defaultToolProfs;\n                }\n            }\n            this.set('toolProfOptions', toolProfOptions.length > 0 ? toolProfOptions : null);\n\n\n            // \"skillToolLanguageProficiencies\"\n            let sTLProfOptions = [];\n            let sTLProfChoices = 1;\n            if (this.selectedItem.skillToolLanguageProficiencies && this.selectedItem.skillToolLanguageProficiencies.length) {\n                const sTLDef = this.selectedItem.skillToolLanguageProficiencies[0];\n                if (sTLDef.choose && sTLDef.choose.length) {\n                    if (sTLDef.choose[0].from && sTLDef.choose[0].from.length) {\n                        if (sTLDef.choose[0].from.includes(\"anySkill\")) {\n                            sTLProfOptions = sTLProfOptions.concat(Object.keys(Parser.SKILL_JSON_TO_FULL).map(skill => { return {name: skill, type: 'skill'} }));\n                        }\n                        if (sTLDef.choose[0].from.includes(\"anyTool\")) {\n                            sTLProfOptions = sTLProfOptions.concat(TOOLS_ALL.map((tool) => { return {...tool, type: \"tool\"} }));\n                        }\n                    }\n                    if (sTLDef.choose[0].count) {\n                        sTLProfChoices = sTLDef.choose[0].count;\n                    }\n                }\n            }\n            this.sTLProfChoices = sTLProfChoices;\n            this.set('sTLProfOptions', sTLProfOptions.length > 0 ? sTLProfOptions : null);\n            this.selectedSTLProfs = this.storedItem.selectedSTLProfs || null;\n\n\n            // \"resist\"\n            let defaultResists = [];\n            let resistOptions = [];\n            let resistChoices = 1;\n            if (this.selectedItem.resist && this.selectedItem.resist.length) {\n                this.selectedItem.resist.forEach((resist) => {\n                    if (typeof resist === 'string') {\n                        defaultResists.push(resist);\n                    } else if (resist.choose) {\n                        resistOptions = resist.choose.from;\n                        if (resist.choose.count) {\n                            resistChoices = resist.choose.count;\n                        }\n                    }\n                });\n                this.set('defaultResists', defaultResists.length > 0 ? defaultResists.map(util_capitalizeAll).join(', ') : null);\n                this.storedItem.defaultResists = defaultResists;\n            }\n            this.resistChoices = resistChoices;\n            this.set('resistOptions', resistOptions.length > 0 ? resistOptions : null);\n            this.selectedResists = this.storedItem.selectedResists || null;\n\n\n            // \"conditionImmune\"\n            let defaultConditionImmunes = [];\n            let conditionImmuneOptions = [];\n            let conditionImmuneChoices = 1;\n            if (this.selectedItem.conditionImmune && this.selectedItem.conditionImmune.length) {\n                this.selectedItem.conditionImmune.forEach((conditionImmune) => {\n                    if (typeof conditionImmune === 'string') {\n                        defaultConditionImmunes.push(conditionImmune);\n                    } else if (conditionImmune.choose) {\n                        conditionImmuneOptions = conditionImmune.choose.from;\n                        if (conditionImmune.choose.count) {\n                            conditionImmuneChoices = conditionImmune.choose.count;\n                        }\n                    }\n                });\n                this.set('defaultConditionImmunes', defaultConditionImmunes.length > 0 ? defaultConditionImmunes.map(util_capitalizeAll).join(', ') : null);\n                this.storedItem.defaultConditionImmunes = defaultConditionImmunes;\n            }\n            this.conditionImmuneChoices = conditionImmuneChoices;\n            this.set('conditionImmuneOptions', conditionImmuneOptions.length > 0 ? conditionImmuneOptions : null);\n            this.selectedConditionImmunes = this.storedItem.selectedConditionImmunes || null;\n\n\n            // \"languageProficiencies\" \n            //      any: #, anyStandard: #, dwarvish, choose:from, other (this usually? indicates race's own language)\n            // test with  Vedalken\n            const langProfOptions = []\n            let defaultLangProfs = [];\n            if (this.selectedItem.languageProficiencies && this.selectedItem.languageProficiencies.length) {\n                if (!this.storedItem.selectedLangProfs || typeof this.storedItem.selectedLangProfs === 'string') {\n                    this.storedItem.selectedLangProfs = {};\n                }\n                this.selectedItem.languageProficiencies.forEach(langProficiency => {\n                    Object.entries(langProficiency).forEach(([langKey, langVal]) => {\n                        const newLangProfOption = {\n                            key: langKey,\n                            langProfOptions: toolsListFromCategory(langKey),\n                            selectedLangProfs: this.storedItem.selectedLangProfs[langKey] ? this.storedItem.selectedLangProfs[langKey].split(',') : null\n                        };\n                        switch (langKey) {\n                            case 'choose':\n                                newLangProfOption.langProfOptions = langVal.from;\n                                newLangProfOption.langProfChoices = langVal.count || 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case 'any':\n                            case 'anyStandard':\n                                newLangProfOption.langProfOptions = LANGUAGES_ALL;\n                                newLangProfOption.langProfChoices = Number.isInteger(langVal) ? langVal : 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case \"other\":\n                                let name = this.selectedItem.name;\n                                if (name.includes(\"(\")) {\n                                    name = name.substring(0, name.indexOf('(')).trim();\n                                }\n                                defaultLangProfs.push(name);\n                                break;\n                        \n                            default:\n                                defaultLangProfs.push(util_capitalizeAll(langKey))\n                                break;\n                        }\n                    });\n                });\n                defaultLangProfs = defaultLangProfs.filter(e => !!e).join(', ');\n                this.defaultLangProfs = defaultLangProfs.length > 0 ? defaultLangProfs : null;\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultLangProfs = defaultLangProfs;\n            }\n            this.set('langProfOptions', langProfOptions.length > 0 ? langProfOptions : null);\n\n            // \"weaponProficiencies\"\n            //     martial, simple\n            // \n            //     \"longsword|phb\": true,\n            //\n            //     \"choose\": {\n            //         \t\"fromFilter\": \"type=martial weapon|miscellaneous=mundane\",\n            //         \t\"count\": 2\n            //      }\n            const weaponProfOptions = []\n            let defaultWeaponProfs = [];\n            if (this.selectedItem.weaponProficiencies && this.selectedItem.weaponProficiencies.length) {\n                if (!this.storedItem.selectedWeaponProfs || typeof this.storedItem.selectedWeaponProfs === 'string') {\n                    this.storedItem.selectedWeaponProfs = {};\n                }\n                this.selectedItem.weaponProficiencies.forEach(weaponProficiency => {\n                    Object.entries(weaponProficiency).forEach(([weaponKey, weaponVal]) => {\n                        const newWeaponProfOption = {\n                            key: weaponKey,\n                            selectedWeaponProfs: this.storedItem.selectedWeaponProfs[weaponKey] ? this.storedItem.selectedWeaponProfs[weaponKey].split(',') : null\n                        };\n                        switch (weaponKey) {\n                            case 'any':\n                                newWeaponProfOption.weaponProfOptions = WEAPON_ALL;\n                                newWeaponProfOption.weaponProfChoices = Number.isInteger(weaponVal) ? weaponVal : 1;\n                                weaponProfOptions.push(newWeaponProfOption);\n                                break;\n\n                            case 'choose':\n                                newWeaponProfOption.weaponProfOptions = weaponVal.fromFilter === \"martial\" ? WEAPON_MARTIAL : weaponProfOptions.choose.fromFilter === \"simple\" ? WEAPON_SIMPLE : WEAPON_ALL;\n                                newWeaponProfOption.weaponProfChoices = weaponVal.count || 1;\n                                weaponProfOptions.push(newWeaponProfOption);\n                                break;\n                        \n                            default:\n                                const weaponName = weaponKey.split('|')[0];\n                                defaultWeaponProfs.push(util_capitalizeAll(weaponName));\n                                break;\n                        }\n                    });\n                });\n                defaultWeaponProfs = defaultWeaponProfs.filter(e => !!e).join(', ');\n            }\n            if (defaultWeaponProfs.length > 0) {\n                this.set(\"defaultWeaponProfs\", defaultWeaponProfs);\n                this.storedItem.defaultWeaponProfs = defaultWeaponProfs;\n\n            } else {\n                this.set(\"defaultWeaponProfs\", null);\n                this.storedItem.defaultWeaponProfs = null;\n            }\n            this.set(\"defaultWeaponProfs\", defaultWeaponProfs.length > 0 ? defaultWeaponProfs : null);\n            // store defaults on character to avoid future look-ups\n            this.storedItem.defaultWeaponProfs = defaultWeaponProfs;\n            this.set('weaponProfOptions', weaponProfOptions.length > 0 ? weaponProfOptions : null);\n\n\n            // \"armorProficiencies\"\n            //\n            const armorProfOptions = []\n            let defaultArmorProfs = [];\n            if (this.selectedItem.armorProficiencies && this.selectedItem.armorProficiencies.length) {\n                if (!this.storedItem.selectedArmorProfs || typeof this.storedItem.selectedArmorProfs === 'string') {\n                    this.storedItem.selectedArmorProfs = {};\n                }\n                this.selectedItem.armorProficiencies.forEach(armorProficiency => {\n                    Object.entries(armorProficiency).forEach(([armorKey, armorVal]) => {\n                        const newArmorProfOption = {\n                            key: armorKey,\n                            selectedArmorProfs: this.storedItem.selectedArmorProfs[armorKey] ? this.storedItem.selectedArmorProfs[armorKey].split(',') : null\n                        };\n                        switch (armorKey) {\n                            case 'any':\n                                newArmorProfOption.armorProfOptions = [\"light\", \"medium\", \"heavy\", \"shield\"];\n                                newArmorProfOption.armorProfChoices = Number.isInteger(armorVal) ? armorVal : 1;\n                                armorProfOptions.push(newArmorProfOption);\n                                break;\n                        \n                            default:\n                                if (armorKey.includes('|')) {\n                                    const armorName = armorKey.split('|')[0];\n                                    defaultArmorProfs.push(util_capitalizeAll(armorName))\n                                } else {\n                                    defaultArmorProfs.push(util_capitalizeAll(armorKey));\n                                }\n                                break;\n                        }\n                    });\n                });\n                defaultArmorProfs = defaultArmorProfs.filter(e => !!e).join(', ');\n                this.defaultArmorProfs = defaultArmorProfs.length > 0 ? defaultArmorProfs : null;\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultArmorProfs = defaultArmorProfs;\n            }\n            this.set('armorProfOptions', armorProfOptions.length > 0 ? armorProfOptions : null);\n\n\n            // Dark Vision \n            //   uses entry names, only one depth.\n            let defaultDarkvision;\n            if (this.selectedItem.entries) {\n                this.selectedItem.entries\n                    .forEach((entry) => {\n                        if (entry && entry.name && entry.name.toLowerCase() === 'darkvision' \n                                && entry.entries && entry.entries.length) {\n                            const is60 = entry.entries[0].includes('60'),\n                                is120 = entry.entries[0].includes('120');\n                                defaultDarkvision = is120 ? 120 : is60 ? 60 : 0;\n                        }\n                    })\n            }\n\n            this.storedItem.defaultDarkvision = defaultDarkvision || null;\n            this.defaultDarkvision = defaultDarkvision || null;\n\n            // Feats\n            //  can populate a nested suboption component entry \n            this.featOptions = [];\n            this.featChoices = null;\n            this.selectedFeat = null;\n            if (this.selectedItem.feats) {\n                if (!this.featModel || !this.featModel.length) {\n                    this.featModel = await loadModel('feats');\n                }\n                this.featOptions = this.featModel;\n                this.featChoices = this.selectedItem.feats;\n                this.selectedFeat = this.featOptions.find(feat => this.storedItem.selectedFeat && feat.name === this.storedItem.selectedFeat.name && feat.source === this.storedItem.selectedFeat.source);\n            }\n\n            // ASI\n            if (this.selectedItem.asi) {\n                this.hasASI = true;\n                this.asiChecked = !!this.storedItem.selectedFeat;\n                if (!this.featModel || !this.featModel.length) {\n                    this.featModel = await loadModel('feats');\n                }\n                const asiFeatStored = this.storedItem.selectedFeat || this.storedItem.previouslySelectedFeat;\n                this.asiFeat = asiFeatStored;\n                this.asiFeatItem = this.featModel.find(feat => asiFeatStored && feat.name === asiFeatStored.name && feat.source === asiFeatStored.source);\n                const attributes = this.storedItem.selectedAttributes ? this.storedItem.selectedAttributes.split(',') : this.storedItem.previouslySelectedAttributes ? this.storedItem.previouslySelectedAttributes.split(',') : [];\n                this.asiAbility1 = attributes.length ? attributes[0] : null;\n                this.asiAbility2 = attributes.length > 1 ? attributes[1] : null;\n                this.storedItem.attributeMod = 1;\n            }\n\n            // Additional Spells: []\n            //     Ritual Caster  -  multiple top-level options\n            //     Breath of Winter  -  ki resource\n            //     Eldritch Sight, Far Scribe  -  innate: -: [] with unique structure (should be will?)\n            //     Astral Elf  -  multiple top-level, multiple ability choose\n            //     Mark of Shadow  -  innate, known and expanded\n            //     Shadar-kai  -  standard choose implemented as a top-level options\n            //     race \"name\": \"Green\",  - known with additional level\n            //     Drow High Magic - innate with \"1e\" usage (1 for each spell)\n            // {\n            const spellSetOptions = [];\n            const spellLookupPromises = [];\n            if (this.selectedItem.additionalSpells && this.selectedItem.additionalSpells.length) {\n                if (!this.storedItem.additionalSpells) {\n                    this.storedItem.additionalSpells = {\n                        defaultSpells: [],\n                        selectedSpells: []\n                    };\n                } else {\n                    this.storedItem.additionalSpells.defaultSpells = [];\n                    this.storedItem.additionalSpells.defaultAbility = null;\n                }\n                if (this.storedItem.additionalSpells.selectedSpellSet === undefined) {\n                    this.storedItem.additionalSpells.selectedSpellSet = 0;\n                }\n\n                this.selectedItem.additionalSpells.forEach((addtlSpellSet, addtlSpellSetIndex) => {\n                    const spellSetOption = {\n                        defaultSpells: [],\n                        expandedSpells: [],\n                        spellChoices: [],\n                        abilityChoices: []\n                    };\n                    const spellSetPromises = [];\n\n                    Object.entries(addtlSpellSet).forEach(([addtlSpellTypeKey, addtlSpellTypeValue]) => {\n                        \n                        switch (addtlSpellTypeKey) {\n                            //type    innate: \n                            //level     <character level> - or 1, 2, 3, 4, 5, 6, 7, 8, 9:\n                            //reset       <cost or reset type> rest, daily, will, ritual, resource:\n                            //                      rest (eg once per short rest)\n                            //                      daily (eg once per long rest)\n                            //                      will (eg cast it without spending a spell slot)\n                            //                      ritual (eg only cast as a ritual, infinite uses)\n                            //                      resource\n                            //                      - n/a : if character level value is an array (not object), then treat as \"will\"\n                            //count         <cost or reset value> 1: \n                            //                      - n/a for ritual and will\n                            //                <spell list or choose> [\"speak with animals\", {choose: \"level=1|class=Sorcerer\", count: 2}]\n                            //  issues: Furbolg & Variant; Mark of Detection  -  cast count shared across multiple spells\n                            //\n                            case 'innate':\n                                Object.entries(addtlSpellTypeValue).forEach(([addtlSpellLevelKey, addtlSpellLevelValue]) => {\n                                    const adjAddtlSpellLevelValue = Array.isArray(addtlSpellLevelValue) ? { will: addtlSpellLevelValue } : addtlSpellLevelValue;\n\n                                    Object.entries(adjAddtlSpellLevelValue).forEach(([addtlSpellResetKey, addtlSpellResetValue]) => {\n                                        const adjAddtlSpellResetValue = Array.isArray(addtlSpellResetValue) ? { '99': addtlSpellResetValue } : addtlSpellResetValue;\n\n                                        Object.entries(adjAddtlSpellResetValue).forEach(([addtlSpellCountKey, addtlSpellCountValue]) => {\n                                            const path = [addtlSpellSetIndex, addtlSpellTypeKey, addtlSpellLevelKey, addtlSpellResetKey, addtlSpellCountKey].join('.');\n                                            const type = addtlSpellResetKey;\n                                            let uses = addtlSpellCountKey === 'proficiency' ? addtlSpellCountKey : parseInt(addtlSpellCountKey.split('e').join(''));\n                                            uses = uses === 99 ? undefined : uses;\n\n                                            addtlSpellCountValue.forEach( (spellEntry) => {\n                                                // This is the level in class, not spell level\n                                                const level = addtlSpellLevelKey === '_' ? 1 : parseInt(addtlSpellLevelKey);\n                                                if (spellEntry.choose !== undefined) {\n                                                    const spellLookupPromise = filterModel('spells', spellEntry.choose).then((options) => {\n                                                        const spellChoiceAtPath = this.storedItem.additionalSpells.selectedSpells.find((selected) => selected.path === path);\n                                                        spellSetOption.spellChoices.push({\n                                                            path,\n                                                            type,\n                                                            level,\n                                                            uses,\n                                                            count: spellEntry.count || 1,\n                                                            options,\n                                                            selectedSpells: spellChoiceAtPath && spellChoiceAtPath.spells ? spellChoiceAtPath.spells : []\n                                                        });\n                                                    });\n                                                    spellLookupPromises.push(spellLookupPromise);\n                                                    spellSetPromises.push(spellLookupPromise);\n                                                } else {\n                                                    let name = spellEntry.split('#')[0];\n                                                    let source;\n                                                    const spellLookupPromise = filterModel('spells', 'name='+name+'|').then((spellResult) => {\n                                                        if (spellResult.length) {\n                                                            source = spellResult[0].source;\n                                                            name = spellResult[0].name;\n                                                        }\n                                                        spellSetOption.defaultSpells.push({name, source, type});\n                                                        // defaults get stored if this is the selected spell set\n                                                        if (addtlSpellSetIndex === this.storedItem.additionalSpells.selectedSpellSet) {\n                                                            this.storedItem.additionalSpells.defaultSpells.push({\n                                                                type,\n                                                                level,\n                                                                name,\n                                                                source,\n                                                                uses,\n                                                            });\n                                                        }\n                                                    });\n                                                    spellLookupPromises.push(spellLookupPromise);\n                                                    spellSetPromises.push(spellLookupPromise);\n                                                }\n                                            });\n                                        });\n                                    });\n                                });\n                                break;\n\n\n                            //type    known:\n                            //level     <character level> - or 1, 2, 3, 4, 5, 6, 7, 8, 9:\n                            //            <spell list or choose> [\"prestidigitation#c\", {choose: \"level=0|class=Sorcerer\", count: 2}]\n                            //                  - if character level is an object (not array), take first key's array (test with race High; Valena)\n                            //\n                            case 'known':\n                                Object.entries(addtlSpellTypeValue).forEach(([addtlSpellLevelKey, addtlSpellLevelValue]) => {\n                                    let adjAddtlSpellLevelValue = Array.isArray(addtlSpellLevelValue)\n                                        ? addtlSpellLevelValue\n                                        : Object.values(addtlSpellLevelValue)[0];\n                                    const path = [addtlSpellSetIndex, addtlSpellTypeKey, addtlSpellLevelKey].join('.');\n\n                                    adjAddtlSpellLevelValue.forEach((spellEntry) => {\n                                        const level = addtlSpellLevelKey === '_' ? 1 : parseInt(addtlSpellLevelKey);\n                                        if (spellEntry.choose !== undefined) {\n                                            const spellLookupPromise = filterModel('spells', spellEntry.choose).then((options) => {\n                                                const spellChoiceAtPath = this.storedItem.additionalSpells.selectedSpells.find((selected) => selected.path === path);\n                                                spellSetOption.spellChoices.push({\n                                                    path,\n                                                    type: 'known',\n                                                    level,\n                                                    count: spellEntry.count || 1,\n                                                    options,\n                                                    selectedSpells: spellChoiceAtPath && spellChoiceAtPath.spells ? spellChoiceAtPath.spells : []\n                                                });\n                                            });\n                                            spellLookupPromises.push(spellLookupPromise);\n                                            spellSetPromises.push(spellLookupPromise);\n                                        } else {\n                                            let name = spellEntry.split('#')[0];\n                                            let source;\n                                            const spellLookupPromise = filterModel('spells', 'name='+name+'|').then((spellResult) => {\n                                                if (spellResult.length) {\n                                                    source = spellResult[0].source;\n                                                    name = spellResult[0].name;\n                                                }\n                                                spellSetOption.defaultSpells.push({name, source, type: 'known'});\n                                                // defaults get stored if this is the selected spell set\n                                                if (addtlSpellSetIndex === this.storedItem.additionalSpells.selectedSpellSet) {\n                                                    this.storedItem.additionalSpells.defaultSpells.push({\n                                                        type: 'known',\n                                                        level,\n                                                        name,\n                                                        source\n                                                    });\n                                                }\n                                            });\n                                            spellLookupPromises.push(spellLookupPromise);\n                                            spellSetPromises.push(spellLookupPromise);\n                                        }\n                                    });\n                                });\n\n                                break;\n\n                            //   expanded: If you have spellcasting or pact magic, add these spells to your class spell list\n                            //      <spell level> s1, s2, s3, s5, s5, 9\n                            //         <spell list>\n                            case 'prepared':\n                            case 'expanded':\n                                Object.entries(addtlSpellTypeValue).forEach(([addtlSpellLevelKey, addtlSpellLevelValue]) => {\n                                    addtlSpellLevelValue.forEach((spellEntry) => {\n                                        const level = parseInt(addtlSpellLevelKey.split('s').join(''));\n                                        let name = spellEntry.split('#')[0];\n                                        let source;\n                                        const spellLookupPromise = filterModel('spells', 'name='+name+'|').then((spellResult) => {\n                                            if (spellResult.length) {\n                                                source = spellResult[0].source;\n                                                name = spellResult[0].name;\n                                            }\n                                            const foundExpandedSpellsLevel = spellSetOption.expandedSpells.find((es) => es.level === level);\n                                            if (foundExpandedSpellsLevel) {\n                                                foundExpandedSpellsLevel.spells.push({name, source});\n                                            } else {\n                                                spellSetOption.expandedSpells.push({level, spells: [{name, source}]});\n                                            }\n                                            \n                                            // defaults get stored if this is the selected spell set\n                                            if (addtlSpellSetIndex === this.storedItem.additionalSpells.selectedSpellSet) {\n                                                this.storedItem.additionalSpells.defaultSpells.push({\n                                                    type: 'expanded',\n                                                    level,\n                                                    name,\n                                                    source\n                                                });\n                                            }\n                                        });\n                                        spellLookupPromises.push(spellLookupPromise);\n                                        spellSetPromises.push(spellLookupPromise);\n                                    });\n                                });\n                                break;\n\n                            \n                            case 'ability': \n                                if (addtlSpellTypeValue === \"inherit\") {\n                                    // todo, get from selected ability. example: feat Telekinetic\n                                } else if (addtlSpellTypeValue.choose){\n                                    spellSetOption.abilityChoices = addtlSpellTypeValue.choose.map((v) => v.toUpperCase());\n                                    spellSetOption.selectedAbility = this.storedItem.additionalSpells.selectedAbility;\n                                } else {\n                                    spellSetOption.defaultAbility = addtlSpellTypeValue;\n                                    // defaults get stored if this is the selected spell set\n                                    if (addtlSpellSetIndex === this.storedItem.additionalSpells.selectedSpellSet) {\n                                        this.storedItem.additionalSpells.defaultAbility = addtlSpellTypeValue.toUpperCase();\n                                    }\n                                }\n                                break;\n\n                            default:\n                                break;\n                        }\n                    });\n\n                    Promise.all(spellSetPromises).then(() => {\n                        spellSetOption.name = addtlSpellSet.name ? addtlSpellSet.name : spellSetOption.defaultSpells.length ? this._renderSpellName(spellSetOption.defaultSpells[0]) : addtlSpellSetIndex;\n                        spellSetOption.expandedSpells.sort((es1, es2) => es1.level - es2.level);\n                        spellSetOptions.push(spellSetOption);\n                    })\n                });\n            }\n\n            Promise.all(spellLookupPromises).then(() => {\n                this.set('spellSetOptions', spellSetOptions);\n                if (spellSetOptions.length) {\n                    this.set('selectedSpellSet', spellSetOptions[this.storedItem.additionalSpells.selectedSpellSet]);\n                } else {\n                    this.set('selectedSpellSet', null);\n                }\n            });\n            \n            this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n        } else {\n            this.storedItem = {}\n            this.attributeOptions = [];\n            this.skillProfOptions = [];\n            this.armorProfOptions = [];\n            this.weaponProfOptions = [];\n            this.toolProfOptions = [];\n            this.langProfOptions = [];\n            this.sTLProfOptions = [];\n            this.resistOptions = [];\n            this.conditionImmuneOptions = [];\n            this.featOptions = [];\n            this.spellSetOptions = [];\n            this.defaultAttributes = null;\n            this.defaultSkillProfs = null;\n            this.defaultArmorProfs = null;\n            this.defaultWeaponProfs = null;\n            this.defaultToolProfs = null;\n            this.defaultLangProfs = null;\n            this.defaultDarkvision = null;\n            this.defaultResists = null;\n            this.defaultConditionImmunes = null;\n        }\n    }\n\n    async getSpellChoiceOptions(chooseString) {\n        return await filterModel('spells', chooseString);\n    }\n\n    _toolProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedToolProfs[key] = skills.join(',');\n            const newToolProfOptions = cloneDeep(this.toolProfOptions);\n            newToolProfOptions[index].selectedToolProfs = skills;\n            this.set('toolProfOptions', newToolProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _langProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedLangProfs[key] = skills.join(',');\n            const newLangProfOptions = cloneDeep(this.langProfOptions);\n            newLangProfOptions[index].selectedLangProfs = skills;\n            this.set('langProfOptions', newLangProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _armorProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedArmorProfs[key] = skills.join(',');\n            const newArmorProfOptions = cloneDeep(this.armorProfOptions);\n            newArmorProfOptions[index].selectedArmorProfs = skills;\n            this.set('armorProfOptions', newArmorProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _weaponProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedWeaponProfs[key] = skills.join(',');\n            const newWeaponProfOptions = cloneDeep(this.weaponProfOptions);\n            newWeaponProfOptions[index].selectedWeaponProfs = skills;\n            this.set('weaponProfOptions', newWeaponProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _skillProficiencyAddCallback() {\n        return ((skills) => {\n            this.storedItem.selectedSkillProfs = skills.join(',');\n            this.selectedSkillProfs = skills;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _attributeAddCallback() {\n        return ((attr) => {\n            this.storedItem.selectedAttributes = attr.join(',');\n            this.selectedAttributes = attr;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _featAddCallback() {\n        return ((feat) => {\n            this.storedItem.selectedFeat = { name: feat.name, source: feat.source };\n            this.selectedFeat = this.featOptions.find(feat => feat.name === this.storedItem.selectedFeat.name && feat.source === this.storedItem.selectedFeat.source);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _sTLProfAddCallback() {\n        return ((profs) => {\n            this.storedItem.selectedSTLProfs = profs;\n            this.selectedSTLProfs = profs;\n            saveCharacter(this.character);\n        }).bind(this)\n    }\n\n    _resistAddCallback() {\n        return ((resists) => {\n            this.storedItem.selectedResists = resists;\n            this.selectedResists = resists;\n            saveCharacter(this.character);\n        }).bind(this)\n    }\n\n    _conditionImmuneAddCallback() {\n        return ((conditionImmunes) => {\n            this.storedItem.selectedConditionImmunes = conditionImmunes;\n            this.selectedConditionImmunes = conditionImmunes;\n            saveCharacter(this.character);\n        }).bind(this)\n    }\n\n    _spellSetCallback() {\n        return ((spellSet) => {\n            this.storedItem.additionalSpells.selectedSpellSet = this.spellSetOptions.findIndex((spellSetOption) => spellSetOption === spellSet);;\n            this.set('selectedSpellSet', spellSet);\n            this.updateOptions();\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _spellAbilityCallback() {\n        return ((ability) => {\n            this.storedItem.additionalSpells.selectedAbility = ability;\n            const newSelectedSpellSet = cloneDeep(this.selectedSpellSet);\n            newSelectedSpellSet.selectedAbility = ability;\n            this.set('selectedSpellSet', newSelectedSpellSet);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _spellChoiceCallback(choice, index) {\n        return ((spells) => {\n            const mappedSpells = spells.map((spell) => { return { name: spell.name, source: spell.source } });\n            let spellChoiceAtPathIndex = this.storedItem.additionalSpells.selectedSpells.findIndex((selected) => selected.path === choice.path);\n            if (spellChoiceAtPathIndex > -1) {\n                this.storedItem.additionalSpells.selectedSpells.splice(spellChoiceAtPathIndex, 1);\n            }\n            let spellChoiceAtPath = { path: choice.path, type: choice.type, level: choice.level, resource: choice.resource, resourceName: this.selectedSpellSet.resourceName, count: choice.count, uses: choice.uses };\n            this.storedItem.additionalSpells.selectedSpells.push(spellChoiceAtPath);\n            spellChoiceAtPath.spells = mappedSpells;\n            const newSelectedSpellSet = cloneDeep(this.selectedSpellSet);\n            newSelectedSpellSet.spellChoices[index].selectedSpells = mappedSpells;\n            this.set('selectedSpellSet', newSelectedSpellSet);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _asiChangeCallback() {\n        return ((asi) => {\n            if (asi.checked) {\n                this.storedItem.selectedFeat = asi.selectedFeat;\n                this.storedItem.previouslySelectedAttributes = [asi.selectedAbilityOne, asi.selectedAbilityTwo].filter(a => !!a).join(',');\n                delete this.storedItem.selectedAttributes;\n            } else {\n                this.storedItem.previouslySelectedFeat = asi.selectedFeat;\n                delete this.storedItem.selectedFeat;\n                const suboptionKeys = Object.keys(this.character.choices).filter(ck => ck.startsWith(this.storageKey + '_'));\n                if (suboptionKeys && suboptionKeys.length) {\n                    suboptionKeys.forEach((removalKey) => delete this.character.choices[removalKey]);\n                }\n                this.asiFeatItem = null;\n                this.storedItem.selectedAttributes = [asi.selectedAbilityOne, asi.selectedAbilityTwo].filter(a => !!a).join(',')\n            }\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _suboptionStorageKey(storageKey) {\n        return `${storageKey}_suboptions`\n    }\n\n    _showEmpty(isEditMode, value) {\n        return !isEditMode && !value;\n    }\n\n    _exists() {\n        for (let arg of arguments) {\n            if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _plusPrefix(num) {\n        return `+${num}`\n    }\n\n    _plural(str, num, overrideLabel) {\n        const newStr = overrideLabel || str;\n        if (num > 1) {\n            return newStr + 's'\n        }\n        return newStr;\n    }\n\n    _printOptions(selectedOptions, storedItem, key) {\n        let out = []\n        for (const option of selectedOptions) {\n            out = out.concat(storedItem[`selected${key}Profs`][option])\n        }\n        return out.join(', ');\n    }\n\n    _moreThanOne(list) {\n        return list.length > 1;\n    }\n\n    _renderSpellName(s) {\n        return `${util_capitalizeAll(s.name)}${s.source && s.source.toLowerCase() !== 'phb' ? ` (${s.source})` : ''}`;\n    }\n\n    _openSpell(e) {\n        this.dispatchEvent(new CustomEvent(\"open-drawer\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n                viewId: \"spells\",\n                selectedItem: e.model.__data.item\n            }\n        }));\n    }\n\n    _featLinkClick(e) {\n        this.dispatchEvent(new CustomEvent(\"open-drawer\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n                selectedItem: e.target.__dataHost.__data.selectedFeat,\n                viewId: 'feats'\n            }\n        }));\n    }\n\n    _spellLevel(level) {\n        switch (level) {\n            case 0:\n                return 'Cantrip';\n            case 1:\n                return '1st';\n            case 2:\n                return '2nd';\n            case 3:\n                return '3rd';\n            default:\n                return level + 'th';\n        }\n    }\n\n    _isLast(index, list) {\n        return list && list.length && index === list.length - 1;\n    }\n\n    _or(a, b) {\n        return a || b\n    }\n\n    static get template() {\n        return html`\n            <style include=\"material-styles\">\n                .some {}\n                :host {\n                    display: block;\n                    white-space: initial;\n                }\n                .spell-link {\n                    color: var(--mdc-theme-link);\n                    cursor: pointer;\n                    text-decoration: underline;\n                }\n                .spell-link:hover {\n                }\n                .feat-wrap {\n                    display: flex;\n                    width: 100%;\n                    justify-content: space-between;\n                    align-items: flex-end;\n                }\n                table {\n                    line-height: 1.3;\n                    margin-left: 12px;\n                }\n                td {\n                    vertical-align: top;\n                }\n                td:first-child {\n                    padding-right: 8px;\n                }\n                [hidden] {\n                    display: none !important;\n                }\n                dnd-character-builder-suboptions {\n                    padding-left: 40px;\n                    display: block;\n                }\n                dnd-select-add {\n                    width: 100%;\n                    display: block;\n                }\n                /* dnd-select-add {\n                    width: var(--suboptions__width, 100%);\n                    max-width: var(--suboptions__max-width, unset);\n                } */\n                .default-selection {\n                    font-size: 14px;\n                    margin-bottom: 6px;\n                }\n                .default-selection span {\n                    color: var(--mdc-theme-primary);\n                }\n                @media(min-width: 420px) {\n                    dnd-select-add {\n                        \n                    }\n                }\n\n                @media(min-width: 921px) {\n                }\n            </style>\n\n            <div class=\"col-wrap\">\n\n                <div hidden$=\"[[!_exists(defaultAttributes)]]\" class=\"default-selection\"><b>Ability Increase: </b><span>[[defaultAttributes]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultSkillProfs)]]\" class=\"default-selection\"><b>Skills: </b><span>[[defaultSkillProfs]]</span></div>\n                \n                <div hidden$=\"[[!_exists(defaultArmorProfs)]]\" class=\"default-selection\"><b>Armor: </b><span>[[defaultArmorProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultWeaponProfs)]]\" class=\"default-selection\"><b>Weapons: </b><span>[[defaultWeaponProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultToolProfs)]]\" class=\"default-selection\"><b>Tools: </b><span>[[defaultToolProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultLangProfs)]]\" class=\"default-selection\"><b>Languages: </b><span>[[defaultLangProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultDarkvision)]]\" class=\"default-selection\"><b>Darkvision: </b><span>[[defaultDarkvision]] ft.</span></div>\n\n                <div hidden$=\"[[!_exists(defaultResists)]]\" class=\"default-selection\"><b>Resistances: </b><span>[[defaultResists]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultConditionImmunes)]]\" class=\"default-selection\"><b>Condition Immunities: </b><span>[[defaultConditionImmunes]]</span></div>\n\n                <template is=\"dom-if\" if=\"[[_moreThanOne(spellSetOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Spell Set>\" label=\"Selected Spell Set\"\n                        options=\"[[spellSetOptions]]\" value=\"[[selectedSpellSet]]\" \n                        add-callback=\"[[_spellSetCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(selectedSpellSet.abilityChoices)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Spell Ability>\" label=\"Selected Spell Ability\"\n                        options=\"[[selectedSpellSet.abilityChoices]]\" value=\"[[selectedSpellSet.selectedAbility]]\"\n                        add-callback=\"[[_spellAbilityCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[selectedSpellSet.spellChoices]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Spells>\" label=\"Selected Spells\"\n                        choices=\"[[item.count]]\" options=\"[[item.options]]\"\n                        value=\"[[item.selectedSpells]]\" add-callback=\"[[_spellChoiceCallback(item, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <div hidden$=\"[[!_exists(selectedSpellSet.defaultSpells)]]\" class=\"default-selection\">\n                    <b>Spells: </b>\n                    <span>\n                        <template is=\"dom-repeat\" items=\"[[selectedSpellSet.defaultSpells]]\">\n                            <span class=\"spell-link\" on-click=\"_openSpell\">[[_renderSpellName(item)]]</span><span hidden$=\"[[_isLast(index, selectedSpellSet.defaultSpells)]]\">, </span>\n                        </template>\n                    </span>\n                </div>\n\n                <div hidden$=\"[[!_exists(selectedSpellSet.expandedSpells)]]\" class=\"default-selection\">\n                    <b>Expanded Spell List</b>\n                    <table>\n                        <template is=\"dom-repeat\" items=\"[[selectedSpellSet.expandedSpells]]\" as=\"expandedSpells\">\n                            <tr>\n                                <td>[[_spellLevel(expandedSpells.level)]]</td>\n                                <td>\n                                    <template is=\"dom-repeat\" items=\"[[expandedSpells.spells]]\">\n                                        <span class=\"spell-link\" on-click=\"_openSpell\">[[_renderSpellName(item)]]</span><span hidden$=\"[[_isLast(index, expandedSpells.spells)]]\">, </span>\n                                    </template>\n                                </td>\n                            </tr>\n                        </template>\n                    </table>\n                </div>\n\n\n                <template is=\"dom-if\" if=\"[[_exists(attributeOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\" \n                        placeholder=\"<Select Attribute>\" label='[[_plural(\"Selected Attribute\", attributeChoices)]]'\n                        choices=\"[[attributeChoices]]\" paren=\"[[_plusPrefix(attributeMod)]]\" options=\"[[attributeOptions]]\"\n                        value=\"[[selectedAttributes]]\" add-callback=\"[[_attributeAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(skillProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill>\" label='[[_plural(\"Selected Skill\", skillProfChoices)]]'\n                        choices=\"[[skillProfChoices]]\" options=\"[[skillProfOptions]]\"\n                        value=\"[[selectedSkillProfs]]\" add-callback=\"[[_skillProficiencyAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[armorProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Armor>\" label='[[_plural(\"Selected Armor\", item.armorProfChoices, item.label)]]'\n                        choices=\"[[item.armorProfChoices]]\" options=\"[[item.armorProfOptions]]\"\n                        value=\"[[item.selectedArmorProfs]]\" add-callback=\"[[_armorProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[weaponProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Weapon>\" label='[[_plural(\"Selected Weapon\", item.weaponProfChoices, item.label)]]'\n                        choices=\"[[item.weaponProfChoices]]\" options=\"[[item.weaponProfOptions]]\"\n                        value=\"[[item.selectedWeaponProfs]]\" add-callback=\"[[_weaponProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[toolProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Tool>\" label='[[_plural(\"Selected Tool\", item.toolProfChoices, item.label)]]'\n                        choices=\"[[item.toolProfChoices]]\" options=\"[[item.toolProfOptions]]\"\n                        value=\"[[item.selectedToolProfs]]\" add-callback=\"[[_toolProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[langProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Language>\" label='[[_plural(\"Selected Language\", item.langProfChoices, item.label)]]'\n                        choices=\"[[item.langProfChoices]]\" options=\"[[item.langProfOptions]]\"\n                        value=\"[[item.selectedLangProfs]]\" add-callback=\"[[_langProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(sTLProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill or Tool>\" label=\"Selected Skill or Tool\"\n                        choices=\"[[sTLProfChoices]]\" options=\"[[sTLProfOptions]]\"\n                        value=\"[[selectedSTLProfs]]\" add-callback=\"[[_sTLProfAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(resistOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Resistance>\" label=\"Selected Resistance\"\n                        choices=\"[[resistChoices]]\" options=\"[[resistOptions]]\"\n                        value=\"[[selectedResists]]\" add-callback=\"[[_resistAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(conditionImmuneOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Condition Immunity>\" label=\"Selected Condition Immunity\"\n                        choices=\"[[conditionImmuneChoices]]\" options=\"[[conditionImmuneOptions]]\"\n                        value=\"[[selectedConditionImmunes]]\" add-callback=\"[[_conditionImmuneAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(featOptions)]]\">\n                    <div class=\"feat-wrap\">\n                        <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                            placeholder=\"<Select Feat>\" label=\"Selected Feat\"\n                            options=\"[[featOptions]]\" value=\"[[selectedFeat]]\"\n                            add-callback=\"[[_featAddCallback()]]\">\n                        </dnd-select-add>\n                        <button hidden$=\"[[!_exists(selectedFeat)]]\" class=\"mdc-icon-button material-icons\" on-click=\"_featLinkClick\">logout</button>\n                    </div>\n\n                    <template is=\"dom-if\" if=\"[[_exists(selectedFeat)]]\">\n                        <dnd-character-builder-suboptions label=\"[[_or(label, 'Feat')]]\" storage-key=\"[[_suboptionStorageKey(storageKey)]]\" selected-item=\"[[selectedFeat]]\"></dnd-character-builder-suboptions>\n                    </template>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[hasASI]]\">\n                    <dnd-asi-select change-callback=\"[[_asiChangeCallback()]]\" checked=\"[[asiChecked]]\" selected-feat=\"[[asiFeat]]\" selected-ability-one=\"[[asiAbility1]]\" selected-ability-two=\"[[asiAbility2]]\"></dnd-asi-select>\n\n                    <template is=\"dom-if\" if=\"[[asiChecked]]\">\n                        <dnd-character-builder-suboptions label=\"[[_or(label, 'ASI Feat')]]\" class=\"asi-suboption\" storage-key=\"[[_suboptionStorageKey(storageKey)]]\" selected-item=\"[[asiFeatItem]]\"></dnd-character-builder-suboptions>\n                    </template>\n                </template>\n            </div>\n        `;\n    }\n}\n\ncustomElements.define(\"dnd-character-builder-suboptions\", DndCharacterBuilderSuboptions);\n","import { PolymerElement, html } from \"@polymer/polymer\";\nimport { encodeForHash } from \"../js/utils\";\nimport { loadModel } from \"../util/data\";\nimport { getEditModeChannel, isEditMode } from \"../util/editMode\";\nimport \"./dnd-switch\";\n\nclass DndAsiSelect extends PolymerElement {\n  \n  static get properties() {\n    return {\n      checked: {\n        type: Boolean,\n        value: false\n      },\n      selectedFeat: {\n        type: Object\n      },\n      selectedAbilityOne: {\n        type: String\n      },\n      selectedAbilityTwo: {\n        type: String\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      changeCallback: {\n        type: Function\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.attributeOptions = [\n      \"STR\",\n      \"DEX\",\n      \"CON\",\n      \"INT\",\n      \"WIS\",\n      \"CHA\"\n    ]\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n\n    this.switchChangeHandler = (e) => {\n      this.checked = e.detail.checked;\n      this._changeHandler()();\n    }\n    this.addEventListener(\"switch-change\", this.switchChangeHandler);\n\n    this.editModeHandler = (e) => {\n        this.disabled = !e.detail.isEditMode;\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.disabled = !isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.removeEventListener(\"switch-change\", this.switchChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  _changeHandler(key) {\n    return (async (val) => {\n      switch (key) {\n        case 'a1':\n          this.selectedAbilityOne = val;\n          break;\n\n        case 'a2':\n          this.selectedAbilityTwo = val;\n          break;\n\n        case 'feat':\n          if (!this.featOptions) {\n            this.featOptions = await loadModel('feats');\n          }\n          this.selectedFeat = this.featOptions.find(feat => feat.name === val.name && feat.source === val.source);\n          break;\n      \n        default:\n          break;\n      }\n      this.changeCallback({\n        checked: this.checked,\n        selectedFeat: this.selectedFeat ? { name: this.selectedFeat.name, source: this.selectedFeat.source } : undefined,\n        selectedAbilityOne: this.selectedAbilityOne,\n        selectedAbilityTwo: this.selectedAbilityTwo,\n      });\n    })\n  }\n\n  _disableLabel(checked) {\n    return checked ? 'Feat' : 'ASI';\n  }\n\n  _getFeatLink(feat) {\n    let linkData = [feat.name];\n    if (feat.source) {\n      linkData.push(feat.source);\n    }\n    let dataLink = encodeForHash(linkData);\n    return dataLink ? `#/feats/${dataLink}` : '#/feats';\n  }\n\n  _linkClick() {\n    this.dispatchEvent(new CustomEvent(\"open-drawer\", {\n      bubbles: true,\n      composed: true,\n      detail: {\n        selectedItem: this.selectedFeat,\n        viewId: 'feats'\n      }\n    }));\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  static get template() {\n    return html`\n      <style include=\"material-styles\">\n        :host {\n          display: flex;\n          flex-direction: column;\n          max-width: 192px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n        .abilities {\n          display: flex;\n          flex-wrap: wrap;\n        }\n        .abilities dnd-select-add {\n          width: calc(50% - 8px);\n        }\n        dnd-select-add + dnd-select-add {\n          margin-left: 16px;\n        }\n        dnd-select-add {\n          display: block;\n        }\n        .disable-label {\n          font-size: 14px;\n          font-weight: 500;\n          color: var(--lumo-body-text-color);\n        }\n        .reference-link {\n          color: var(--lumo-body-text-color);\n          background: transparent;\n        }\n        .reference-link:hover {\n          color: var(--mdc-theme-secondary);\n        }\n        .feat-pick-wrap {\n          display: flex;\n        }\n      </style>\n\n      <div class=\"disable-label\" hidden$=\"[[!disabled]]\">[[_disableLabel(checked)]]</div>\n      <dnd-switch initial-value=[[checked]] label=\"ASI\" secondary-label=\"Feat\" hidden$=\"[[disabled]]\" extra-padding></dnd-switch>\n      <div class=\"abilities\" hidden$=[[checked]]>\n        <dnd-select-add add-callback=\"[[_changeHandler('a1')]]\" value=\"[[selectedAbilityOne]]\" options=\"[[attributeOptions]]\" placeholder=\"<ASI>\" disabled$=\"[[disabled]]\"></dnd-select-add>\n        <dnd-select-add add-callback=\"[[_changeHandler('a2')]]\" value=\"[[selectedAbilityTwo]]\" options=\"[[attributeOptions]]\" placeholder=\"<ASI>\" disabled$=\"[[disabled]]\"></dnd-select-add>\n      </div>\n      <div class=\"feat-pick-wrap\" hidden$=[[!checked]]>\n        <dnd-select-add add-callback=\"[[_changeHandler('feat')]]\" model=\"feats\" value=\"[[selectedFeat]]\" placeholder=\"<Choose Feat>\" disabled$=\"[[disabled]]\"></dnd-select-add>\n        <button class=\"reference-link mdc-icon-button material-icons\" on-click=\"_linkClick\">logout</button>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-asi-select\", DndAsiSelect);"],"sourceRoot":""}