{"version":3,"sources":["webpack:///./components/dnd-select-add.js","webpack:///./components/views/character/dnd-character-builder-suboptions.js","webpack:///./components/dnd-asi-select.js"],"names":["DndSelectAdd","test","type","Boolean","reflectToAttribute","value","options","Array","observer","model","String","addCallback","Function","choices","Number","paren","label","placeholder","multiValue","disabled","this","listBox","remove","$","select","render","isArray","choiceArray","map","v","indexOf","findIndex","o","name","source","filter","selectedValues","i","join","super","ready","setTimeout","async","contentEl","_overlayElement","shadowRoot","querySelector","scrollHeight","addEventListener","e","scrollTop","passive","renderer","root","document","createElement","setAttribute","opened","wasPreviouslySelected","srcElement","getAttribute","scroll","length","splice","selectedOptions","option","item","optionName","innerHTML","appendChild","_assignMenuElement","valueUpdated","connectedCallback","selectChangeHandler","val","selected","undefined","disconnectedCallback","removeEventListener","a","result","customElements","define","DndCharacterBuilderSuboptions","storageKey","selectedItem","Object","skillProfOptions","skillProfChoices","selectedSkillProfs","defaultSkillProfs","toolProfOptions","defaultToolProfs","langProfOptions","defaultLangProfs","weaponProfOptions","defaultWeaponProfs","armorProfOptions","defaultArmorProfs","defaultDarkvision","attributeOptions","attributeChoices","attributeMod","selectedAttributes","defaultAttributes","resistOptions","resistChoices","selectedResists","defaultResists","conditionImmuneOptions","conditionImmuneChoices","selectedConditionImmunes","defaultConditionImmunes","featOptions","featChoices","selectedFeat","sTLProfOptions","sTLProfChoices","selectedSTLProfs","spellSetOptions","selectedSpellSet","isEditMode","dontCreateIfMissing","characterChangeHandler","character","detail","set","editModeHandler","storageKeys","split","storedItem","dispatchEvent","CustomEvent","bubbles","composed","isNaN","parseInt","selectedItemName","selectedItemSource","ability","choose","from","toUpperCase","count","amount","abilityObj","entries","attribute","toLowerCase","mod","skillProficiencies","skillProficiency","any","concat","keys","toolProficiencies","selectedToolProfs","toolProficiency","forEach","toolKey","toolVal","newToolProfOption","key","toolListsMapped","flat","toolProfChoices","push","isInteger","skillToolLanguageProficiencies","sTLDef","includes","SKILL_JSON_TO_FULL","skill","tool","resist","conditionImmune","languageProficiencies","selectedLangProfs","langProficiency","langKey","langVal","newLangProfOption","langProfChoices","substring","trim","weaponProficiencies","selectedWeaponProfs","weaponProficiency","weaponKey","weaponVal","newWeaponProfOption","weaponProfChoices","fromFilter","weaponName","armorProficiencies","selectedArmorProfs","armorProficiency","armorKey","armorVal","newArmorProfOption","armorProfChoices","armorName","entry","is60","is120","feats","find","feat","asi","hasASI","asiChecked","asiFeat","previouslySelectedFeat","attributes","previouslySelectedAttributes","asiAbility1","asiAbility2","spellLookupPromises","additionalSpells","defaultSpells","defaultAbility","selectedSpells","addtlSpellSet","addtlSpellSetIndex","spellSetOption","expandedSpells","spellChoices","abilityChoices","spellSetPromises","addtlSpellTypeKey","addtlSpellTypeValue","addtlSpellLevelKey","addtlSpellLevelValue","adjAddtlSpellLevelValue","will","addtlSpellResetKey","addtlSpellResetValue","adjAddtlSpellResetValue","addtlSpellCountKey","addtlSpellCountValue","path","uses","spellEntry","level","spellLookupPromise","then","spellChoiceAtPath","spells","spellResult","values","foundExpandedSpellsLevel","es","selectedAbility","Promise","all","_renderSpellName","sort","es1","es2","chooseString","index","skills","newToolProfOptions","bind","newLangProfOptions","newArmorProfOptions","newWeaponProfOptions","attr","profs","resists","conditionImmunes","spellSet","updateOptions","newSelectedSpellSet","choice","mappedSpells","spell","resource","checked","selectedAbilityOne","selectedAbilityTwo","arg","arguments","constructor","num","str","overrideLabel","newStr","out","list","s","viewId","__data","DndAsiSelect","changeCallback","switchChangeHandler","_changeHandler","linkData","dataLink"],"mappings":"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","file":"0.bundle.js","sourcesContent":["import { PolymerElement, html } from '@polymer/polymer';\nimport { mergeFeature } from '../util/charBuilder';\nimport { jqEmpty, util_capitalizeAll } from \"../js/utils\";\nimport \"@vaadin/vaadin-select\";\nimport {loadModel} from \"../util/data\";\n\nclass DndSelectAdd extends PolymerElement {\n  static get properties() {\n    return {\n      test: {\n        type: Boolean,\n        reflectToAttribute: true,\n        value: false\n      },\n      options: {\n        type: Array,\n        observer: \"optionsUpdated\"\n      },\n      model: {\n        type: String\n      },\n      addCallback: {\n        type: Function\n      },\n      value: {\n        type: String,\n        value: \"\",\n        observer: \"valueUpdated\"\n      },\n      choices: {\n        type: Number,\n        observer: \"choicesUpdated\"\n      },\n      paren: {\n        type: String,\n      },\n      label: {\n        type: String\n      },\n      placeholder: {\n        type: String,\n      },\n      multiValue: {\n        type: String,\n        value: \"\"\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      }\n    }\n  }\n\n  choicesUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  soptionsUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  valueUpdated() {\n    if (this.choices) {\n      if (Array.isArray(this.value) && this.options) {\n        const choiceArray = this.value\n          .map(v => {\n            if (this.options.indexOf(v) !== -1) {\n              return this.options.indexOf(v);\n            } else {\n              return this.options.findIndex((o) => {\n                return o.name === v.name && o.source === v.source;\n              });\n            }\n          })\n          .filter(v => { return v !== -1 });\n\n        if (this.listBox) {\n          this.listBox.selectedValues = choiceArray;\n        }\n        this.multiValue = choiceArray.map(i => {\n          let value = this.options[i];\n          return value.name ? value.name : util_capitalizeAll(value) \n        }).join(\", \");\n      } else {\n        if (this.listBox) {\n          this.listBox.selectedValues = [];\n        }\n        this.multiValue = \"\";\n      }\n    } else {\n      if (this.value && this.options) {\n        if (this.value.source) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name && i.source === this.value.source || i === this.value.name }) + \"\";\n        } else if (this.value.name) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name || i === this.value.name }) + \"\";\n        } else {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value || i === this.value }) + \"\";\n        }\n      } else {\n        this.$.select.value = \"\";\n      }\n    }\n  }\n\n  ready() {\n    super.ready();\n\n    setTimeout(async () => {\n      if (this.model) {\n        this.options = await loadModel(this.model);\n      }\n\n      const contentEl = this.$.select._overlayElement.shadowRoot.querySelector('#content');\n      let scrollHeight = 0;\n      \n      contentEl.addEventListener('scroll', (e) => {\n        scrollHeight = contentEl.scrollTop;\n      }, { passive: true });\n\n      this.$.select.renderer = (root, select) => {\n        if (!this.listBox) {\n          this.listBox = document.createElement('vaadin-list-box');\n\n          // setting up for multi-select\n          if (this.choices) {\n            this.listBox.setAttribute(\"multiple\", true);\n\n            this.listBox.addEventListener(\"click\", (e) => {\n              select.opened = true;\n              let wasPreviouslySelected = e.srcElement.getAttribute(\"selected\") !== null\n              contentEl.scroll(0, scrollHeight);\n              setTimeout(() => {\n                if (this.listBox.selectedValues.length > this.choices\n                    && !wasPreviouslySelected) {\n                  this.listBox.selectedValues.splice(this.listBox.selectedValues.length - 2, 1)\n                }\n                let selectedOptions = this.listBox.selectedValues.map(v => { return this.options[v] });\n                this.multiValue = selectedOptions.map(o => { return o.name ? o.name : util_capitalizeAll(o) }).join(', ');\n                if (this.addCallback) {\n                  this.addCallback(selectedOptions);\n                }\n              }, 0);\n            });\n\n          }\n\n          // Adding options\n          if (this.options && this.options.length) {\n            for (let i = 0; i < this.options.length; i ++) {\n              const option = this.options[i],\n                item = document.createElement('vaadin-item');\n              const optionName = option.name || util_capitalizeAll(option);\n              item.innerHTML = `<span style='margin-left: 10px;'>${optionName}</span> ${option.name ? `<span style='font-size: 14px;color: var(--lumo-primary-color-50pct);'>${option.source || ''}</span>` : ''}`\n              item.setAttribute(\"value\", i);\n              this.listBox.appendChild(item);\n            }\n          }\n          root.appendChild(this.listBox);\n          this.$.select._assignMenuElement();\n\n          this.valueUpdated();\n        }\n      };\n    }, 0);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.selectChangeHandler = () => {\n      const val = this.$.select.value;\n      if (val) {\n        if (!this.choices) {\n          const selected = this.options[val];\n          if (this.addCallback) {\n            this.addCallback(selected, this.model);\n          } else {\n            mergeFeature(undefined, selected, this.model);\n          }\n          if (!this.value) {\n            this.$.select.value = \"\";\n          }\n        }\n      }\n    };\n\n    this.$.select.addEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.$.select.removeEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  _label(label, choices, paren) {\n    let result = '';\n    if (label) {\n      result = label;\n      if (choices && choices !== 1 && choices !== 100) {\n        result += ` (pick ${choices})`;\n      }\n      if (paren) {\n        result += ` (${paren})`;\n      }\n    }\n    return result;\n  }\n  \n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n        [slot=\"prefix\"] {\n          width: calc(100% - 46px);\n          padding: 12px;\n          line-height: 1.4;\n        }\n        vaadin-select {\n          width: 100%;\n        }\n        .prefix {\n          white-space: normal;\n          color: var(--lumo-body-text-color);\n        }\n      </style>\n      <vaadin-select test$=\"[[test]]\" theme=\"dark\" add id=\"select\" label=\"[[_label(label, choices, paren)]]\" placeholder=\"[[placeholder]]\" disabled$=\"[[disabled]]\">\n        <div hidden$=\"[[!_exists(multiValue)]]\" slot=\"prefix\">\n          <span class=\"prefix\">[[multiValue]]</span>\n        </div>\n      </vaadin-select>\n      \n    `;\n  }\n}\ncustomElements.define('dnd-select-add', DndSelectAdd);","import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n    getCharacterChannel,\n    getSelectedCharacter,\n    saveCharacter,\n} from \"../../../util/charBuilder\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { util_capitalizeAll, absInt, cloneDeep } from \"../../../js/utils\"; \nimport { filterModel, loadModel } from \"../../../util/data\";\nimport '../../dnd-select-add';\nimport '../../dnd-asi-select';\nimport { SKILL_TO_ATB_ABV } from \"../../../js/bestiary\";\nimport { } from '@polymer/polymer/lib/elements/dom-if.js';\nimport { } from '@polymer/polymer/lib/elements/dom-repeat.js';\nimport { LANGUAGES_ALL, toolsListFromCategory, TOOLS_ALL, WEAPON_ALL, WEAPON_MARTIAL, WEAPON_SIMPLE } from \"../../../util/consts\";\nimport Parser from \"../../../util/Parser\";\n\n\n// TODO parsing\n//// skillToolLanguageProficiencies, additionalSpells, \"expertise\"\n//// class entry parsing - \"gain proficiency\" - {@item brewer's supplies|phb}, martial weapons, {@skill Performance}, or, choose one, \n///\n\nclass DndCharacterBuilderSuboptions extends PolymerElement {\n    static get properties() {\n        return {\n            storageKey: {\n                type: String\n            },\n            // This selectedItem provided is used to populate the sub option fields using the option data structure setup in data\n            selectedItem: {\n                type: Object\n            },\n\n            skillProfOptions: {\n                type: Array,\n                value: []\n            },\n            skillProfChoices: {\n                type: Number,\n            },\n            selectedSkillProfs: {\n                type: Array,\n            },\n            defaultSkillProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            toolProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultToolProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            langProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultLangProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            weaponProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultWeaponProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            armorProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultArmorProfs: {\n                type: String,\n                value: \"\"\n            },\n            defaultDarkvision: {\n                type: String,\n                value: \"\"\n            },\n\n            attributeOptions: {\n                type: Array,\n                value: []\n            },\n            attributeChoices: {\n                type: Number,\n            },\n            attributeMod: {\n                type: Number,\n            },\n            selectedAttributes: {\n                type: Array,\n            },\n            defaultAttributes: {\n                type: String,\n                value: \"\"\n            },\n\n            resistOptions: {\n                type: Array,\n                value: []\n            },\n            resistChoices: {\n                type: Number,\n            },\n            selectedResists: {\n                type: Array,\n            },\n            defaultResists: {\n                type: String,\n                value: \"\"\n            },\n\n            conditionImmuneOptions: {\n                type: Array,\n                value: []\n            },\n            conditionImmuneChoices: {\n                type: Number,\n            },\n            selectedConditionImmunes: {\n                type: Array,\n            },\n            defaultConditionImmunes: {\n                type: String,\n                value: \"\"\n            },\n\n            featOptions: {\n                type: Array,\n                value: []\n            },\n            featChoices: {\n                type: Number\n            },\n            selectedFeat: {\n                type: Array,\n            },\n\n            sTLProfOptions: {\n                type: Array,\n                value: []\n            },\n            sTLProfChoices: {\n                type: Number\n            },\n            selectedSTLProfs: {\n                type: Array,\n            },\n\n            spellSetOptions: {\n                type: Array,\n            },\n            selectedSpellSet: {\n                type: Object,\n                value: {}\n            },\n\n            isEditMode: {\n                type: Boolean,\n                value: false\n            },\n            \n            dontCreateIfMissing: {\n                type: Boolean,\n                value: false,\n                reflectToAttribute: true\n            }\n        };\n    }\n\n    static get observers() {\n        return ['updateOptions(selectedItem, storageKey)']\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.characterChangeHandler = (e) => {\n            // let character = cloneDeep(e.detail.character);\n            let character = e.detail.character;\n            this.set('character', character);\n        };\n        \n        this.set('character', getSelectedCharacter());\n        getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n        this.editModeHandler = (e) => {\n            this.isEditMode = e.detail.isEditMode;\n        }\n        getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n        this.isEditMode = isEditMode();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n        getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n    }\n\n    async updateOptions() {\n        if (!this.character) {\n            this.set('character', getSelectedCharacter());\n        }\n        if (this.storageKey && this.selectedItem) {\n            // Finding the storedItem from the character's choices at storageKey \n            const storageKeys = this.storageKey.split('.');\n            if (!this.character.choices) {\n                this.character.choices = {};\n            }\n            let storedItem = this.character.choices;\n\n            for (let i = 0; i < storageKeys.length; i++) {\n                const storageKey = storageKeys[i];\n                if (!storedItem[storageKey]) {\n                    if (!this.dontCreateIfMissing) {\n                        if (storageKeys.length < i + 1 && !isNaN(parseInt(storageKeys[i + 1], 10))) {\n                            storedItem[storageKey] = new Array(20);\n                        } else {\n                            storedItem[storageKey] = {};\n                        }\n                    } else {\n                        this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n                        return;\n                    }\n                }\n                if (i === storageKeys.length - 1) {\n                    // Clearing out all stored choices if the selected item has changed from what was previously selected and options chosen for\n                    if (storedItem[storageKey].selectedItemName !== this.selectedItem.name || storedItem[storageKey].selectedItemSource !== this.selectedItem.source) {\n                        storedItem[storageKey] = {\n                            selectedItemName: this.selectedItem.name,\n                            selectedItemSource: this.selectedItem.source\n                        }\n                    }\n                }\n                storedItem = storedItem[storageKey];\n            }\n            this.storedItem = storedItem;\n\n            // Retrieving the selected choices for attribute, feat, or proficiency off of the storedItem\n\n            // Populating Attribute choice field\n            this.attributeOptions = [];\n            this.attributeChoices = null;\n            this.attributeMod = 1;\n            this.selectedAttributes = null;\n            this.defaultAttributes = null;\n            if (this.selectedItem.ability && this.selectedItem.ability.length) {\n                const ability = this.selectedItem.ability[0];\n                if (ability.choose) {\n                    this.attributeOptions = ability.choose.from.map(i => { return i.toUpperCase() });\n                    this.attributeChoices = ability.choose.count || 1;\n                    this.attributeMod = ability.choose.amount || 1;\n                    this.selectedAttributes = this.storedItem.selectedAttributes ? this.storedItem.selectedAttributes.split(',') : null;\n                }\n                this.defaultAttributes = this.selectedItem.ability.map((abilityObj) => {\n                    return Object.entries(abilityObj).map(e => {\n                        if (e[0] !== 'choose' && e[0] !== 'any') {\n                            let attribute = e[0].toLowerCase(),\n                                mod = e[1];\n                            return attribute.toUpperCase() + ' ' + absInt(mod);\n                        }\n                    }).filter(e => !!e).join(', ');\n                }).filter(e => !!e).join(', ');\n\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultAttributes = this.defaultAttributes;\n                this.storedItem.attributeMod = this.attributeMod;\n            }\n\n            // Populating Skill Proficiency choice field\n            this.skillProfOptions = [];\n            this.skillProfChoices = null;\n            this.selectedSkillProfs = null;\n            this.defaultSkillProfs = null;\n            if (this.selectedItem.skillProficiencies && this.selectedItem.skillProficiencies.length) {\n                const skillProficiency = this.selectedItem.skillProficiencies[0];\n                if (skillProficiency.choose) {\n                    this.skillProfOptions = skillProficiency.choose.from;\n                    this.skillProfChoices = skillProficiency.choose.count || 1;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                if (skillProficiency.any) {\n                    if (this.selectedItem.name === \"Custom Lineage\") {\n                        this.skillProfOptions = [\"Darkvision (60ft)\"].concat(Object.keys(SKILL_TO_ATB_ABV));\n                    } else {\n                        this.skillProfOptions = Object.keys(SKILL_TO_ATB_ABV);\n                    }\n                    this.skillProfChoices = skillProficiency.any;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                this.defaultSkillProfs = Object.keys(skillProficiency).map(e => {\n                    if (e !== 'choose' && e !== 'any') {\n                        return util_capitalizeAll(e) \n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultSkillProfs = this.defaultSkillProfs;\n            }\n\n\n            // \"toolProficiencies\" (Dragon Casualty)\n            //     tool list special keys - artisan's tools, musical instruments, gaming set, any, choose.from\n            //     values usually === true or 2\n            const toolProfOptions = []\n            let defaultToolProfs = [];\n            if (this.selectedItem.toolProficiencies && this.selectedItem.toolProficiencies.length) {\n                if (this.selectedItem.toolProficiencies.length > 1) {\n                    // TODO: generated a dropdown for choosing index and add additional suboption components for each choice.\n                    // path of nested suboptions should use an indexed key\n                    // test with \"Dragon Causualty\"\n                } else {\n                    if (!this.storedItem.selectedToolProfs || typeof this.storedItem.selectedToolProfs === 'string') {\n                        this.storedItem.selectedToolProfs = {};\n                    }\n                    const toolProficiency = this.selectedItem.toolProficiencies[0];\n\n                    Object.entries(toolProficiency).forEach(([toolKey, toolVal]) => {\n                        const newToolProfOption = {\n                            key: toolKey,\n                            toolProfOptions: toolsListFromCategory(toolKey),\n                            selectedToolProfs: this.storedItem.selectedToolProfs[toolKey] ? this.storedItem.selectedToolProfs[toolKey].split(',') : null\n                        };\n                        switch (toolKey) {\n                            case 'choose':\n                                const toolListsMapped = toolVal.from.map(toolsListFromCategory);\n                                newToolProfOption.toolProfOptions = toolListsMapped.flat();\n                                newToolProfOption.toolProfChoices = toolVal.count || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case 'any':\n                                newToolProfOption.toolProfChoices = toolProficiency.any || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case \"artisan's tools\":\n                            case 'musical instrument':\n                            case 'gaming set':\n                                newToolProfOption.label = `Selected ${util_capitalizeAll(toolKey)}`;\n                                newToolProfOption.toolProfChoices = Number.isInteger(toolVal) ? toolVal : 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n                        \n                            default:\n                                defaultToolProfs.push(util_capitalizeAll(toolKey))\n                                break;\n                        }\n\n                    })\n                    defaultToolProfs = defaultToolProfs.filter(e => !!e).join(', ');\n                    // store defaults on character to avoid future look-ups\n                    this.set('defaultToolProfs', defaultToolProfs.length > 0 ? defaultToolProfs : null);\n                    this.storedItem.defaultToolProfs = defaultToolProfs;\n                }\n            }\n            this.set('toolProfOptions', toolProfOptions.length > 0 ? toolProfOptions : null);\n\n\n            // \"skillToolLanguageProficiencies\"\n            let sTLProfOptions = [];\n            let sTLProfChoices = 1;\n            if (this.selectedItem.skillToolLanguageProficiencies && this.selectedItem.skillToolLanguageProficiencies.length) {\n                const sTLDef = this.selectedItem.skillToolLanguageProficiencies[0];\n                if (sTLDef.choose && sTLDef.choose.length) {\n                    if (sTLDef.choose[0].from && sTLDef.choose[0].from.length) {\n                        if (sTLDef.choose[0].from.includes(\"anySkill\")) {\n                            sTLProfOptions = sTLProfOptions.concat(Object.keys(Parser.SKILL_JSON_TO_FULL).map(skill => { return {name: skill, type: 'skill'} }));\n                        }\n                        if (sTLDef.choose[0].from.includes(\"anyTool\")) {\n                            sTLProfOptions = sTLProfOptions.concat(TOOLS_ALL.map((tool) => { return {...tool, type: \"tool\"} }));\n                        }\n                    }\n                    if (sTLDef.choose[0].count) {\n                        sTLProfChoices = sTLDef.choose[0].count;\n                    }\n                }\n            }\n            this.sTLProfChoices = sTLProfChoices;\n            this.set('sTLProfOptions', sTLProfOptions.length > 0 ? sTLProfOptions : null);\n            this.selectedSTLProfs = this.storedItem.selectedSTLProfs || null;\n\n\n            // \"resist\"\n            let defaultResists = [];\n            let resistOptions = [];\n            let resistChoices = 1;\n            if (this.selectedItem.resist && this.selectedItem.resist.length) {\n                this.selectedItem.resist.forEach((resist) => {\n                    if (typeof resist === 'string') {\n                        defaultResists.push(resist);\n                    } else if (resist.choose) {\n                        resistOptions = resist.choose.from;\n                        if (resist.choose.count) {\n                            resistChoices = resist.choose.count;\n                        }\n                    }\n                });\n                this.set('defaultResists', defaultResists.length > 0 ? defaultResists.map(util_capitalizeAll).join(', ') : null);\n                this.storedItem.defaultResists = defaultResists;\n            }\n            this.resistChoices = resistChoices;\n            this.set('resistOptions', resistOptions.length > 0 ? resistOptions : null);\n            this.selectedResists = this.storedItem.selectedResists || null;\n\n\n            // \"conditionImmune\"\n            let defaultConditionImmunes = [];\n            let conditionImmuneOptions = [];\n            let conditionImmuneChoices = 1;\n            if (this.selectedItem.conditionImmune && this.selectedItem.conditionImmune.length) {\n                this.selectedItem.conditionImmune.forEach((conditionImmune) => {\n                    if (typeof conditionImmune === 'string') {\n                        defaultConditionImmunes.push(conditionImmune);\n                    } else if (conditionImmune.choose) {\n                        conditionImmuneOptions = conditionImmune.choose.from;\n                        if (conditionImmune.choose.count) {\n                            conditionImmuneChoices = conditionImmune.choose.count;\n                        }\n                    }\n                });\n                this.set('defaultConditionImmunes', defaultConditionImmunes.length > 0 ? defaultConditionImmunes.map(util_capitalizeAll).join(', ') : null);\n                this.storedItem.defaultConditionImmunes = defaultConditionImmunes;\n            }\n            this.conditionImmuneChoices = conditionImmuneChoices;\n            this.set('conditionImmuneOptions', conditionImmuneOptions.length > 0 ? conditionImmuneOptions : null);\n            this.selectedConditionImmunes = this.storedItem.selectedConditionImmunes || null;\n\n\n            // \"languageProficiencies\" \n            //      any: #, anyStandard: #, dwarvish, choose:from, other (this usually? indicates race's own language)\n            // test with  Vedalken\n            const langProfOptions = []\n            let defaultLangProfs = [];\n            if (this.selectedItem.languageProficiencies && this.selectedItem.languageProficiencies.length) {\n                if (!this.storedItem.selectedLangProfs || typeof this.storedItem.selectedLangProfs === 'string') {\n                    this.storedItem.selectedLangProfs = {};\n                }\n                this.selectedItem.languageProficiencies.forEach(langProficiency => {\n                    Object.entries(langProficiency).forEach(([langKey, langVal]) => {\n                        const newLangProfOption = {\n                            key: langKey,\n                            langProfOptions: toolsListFromCategory(langKey),\n                            selectedLangProfs: this.storedItem.selectedLangProfs[langKey] ? this.storedItem.selectedLangProfs[langKey].split(',') : null\n                        };\n                        switch (langKey) {\n                            case 'choose':\n                                newLangProfOption.langProfOptions = langVal.from;\n                                newLangProfOption.langProfChoices = langVal.count || 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case 'any':\n                            case 'anyStandard':\n                                newLangProfOption.langProfOptions = LANGUAGES_ALL;\n                                newLangProfOption.langProfChoices = Number.isInteger(langVal) ? langVal : 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case \"other\":\n                                let name = this.selectedItem.name;\n                                if (name.includes(\"(\")) {\n                                    name = name.substring(0, name.indexOf('(')).trim();\n                                }\n                                defaultLangProfs.push(name);\n                                break;\n                        \n                            default:\n                                defaultLangProfs.push(util_capitalizeAll(langKey))\n                                break;\n                        }\n                    });\n                });\n                defaultLangProfs = defaultLangProfs.filter(e => !!e).join(', ');\n                this.defaultLangProfs = defaultLangProfs.length > 0 ? defaultLangProfs : null;\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultLangProfs = defaultLangProfs;\n            }\n            this.set('langProfOptions', langProfOptions.length > 0 ? langProfOptions : null);\n\n            // \"weaponProficiencies\"\n            //     martial, simple\n            // \n            //     \"longsword|phb\": true,\n            //\n            //     \"choose\": {\n            //         \t\"fromFilter\": \"type=martial weapon|miscellaneous=mundane\",\n            //         \t\"count\": 2\n            //      }\n            const weaponProfOptions = []\n            let defaultWeaponProfs = [];\n            if (this.selectedItem.weaponProficiencies && this.selectedItem.weaponProficiencies.length) {\n                if (!this.storedItem.selectedWeaponProfs || typeof this.storedItem.selectedWeaponProfs === 'string') {\n                    this.storedItem.selectedWeaponProfs = {};\n                }\n                this.selectedItem.weaponProficiencies.forEach(weaponProficiency => {\n                    Object.entries(weaponProficiency).forEach(([weaponKey, weaponVal]) => {\n                        const newWeaponProfOption = {\n                            key: weaponKey,\n                            selectedWeaponProfs: this.storedItem.selectedWeaponProfs[weaponKey] ? this.storedItem.selectedWeaponProfs[weaponKey].split(',') : null\n                        };\n                        switch (weaponKey) {\n                            case 'any':\n                                newWeaponProfOption.weaponProfOptions = WEAPON_ALL;\n                                newWeaponProfOption.weaponProfChoices = Number.isInteger(weaponVal) ? weaponVal : 1;\n                                weaponProfOptions.push(newWeaponProfOption);\n                                break;\n\n                            case 'choose':\n                                newWeaponProfOption.weaponProfOptions = weaponVal.fromFilter === \"martial\" ? WEAPON_MARTIAL : weaponProfOptions.choose.fromFilter === \"simple\" ? WEAPON_SIMPLE : WEAPON_ALL;\n                                newWeaponProfOption.weaponProfChoices = weaponVal.count || 1;\n                                weaponProfOptions.push(newWeaponProfOption);\n                                break;\n                        \n                            default:\n                                const weaponName = weaponKey.split('|')[0];\n                                defaultWeaponProfs.push(util_capitalizeAll(weaponName));\n                                break;\n                        }\n                    });\n                });\n                defaultWeaponProfs = defaultWeaponProfs.filter(e => !!e).join(', ');\n            }\n            if (defaultWeaponProfs.length > 0) {\n                this.set(\"defaultWeaponProfs\", defaultWeaponProfs);\n                this.storedItem.defaultWeaponProfs = defaultWeaponProfs;\n\n            } else {\n                this.set(\"defaultWeaponProfs\", null);\n                this.storedItem.defaultWeaponProfs = null;\n            }\n            this.set(\"defaultWeaponProfs\", defaultWeaponProfs.length > 0 ? defaultWeaponProfs : null);\n            // store defaults on character to avoid future look-ups\n            this.storedItem.defaultWeaponProfs = defaultWeaponProfs;\n            this.set('weaponProfOptions', weaponProfOptions.length > 0 ? weaponProfOptions : null);\n\n\n            // \"armorProficiencies\"\n            //\n            const armorProfOptions = []\n            let defaultArmorProfs = [];\n            if (this.selectedItem.armorProficiencies && this.selectedItem.armorProficiencies.length) {\n                if (!this.storedItem.selectedArmorProfs || typeof this.storedItem.selectedArmorProfs === 'string') {\n                    this.storedItem.selectedArmorProfs = {};\n                }\n                this.selectedItem.armorProficiencies.forEach(armorProficiency => {\n                    Object.entries(armorProficiency).forEach(([armorKey, armorVal]) => {\n                        const newArmorProfOption = {\n                            key: armorKey,\n                            selectedArmorProfs: this.storedItem.selectedArmorProfs[armorKey] ? this.storedItem.selectedArmorProfs[armorKey].split(',') : null\n                        };\n                        switch (armorKey) {\n                            case 'any':\n                                newArmorProfOption.armorProfOptions = [\"light\", \"medium\", \"heavy\", \"shield\"];\n                                newArmorProfOption.armorProfChoices = Number.isInteger(armorVal) ? armorVal : 1;\n                                armorProfOptions.push(newArmorProfOption);\n                                break;\n                        \n                            default:\n                                if (armorKey.includes('|')) {\n                                    const armorName = armorKey.split('|')[0];\n                                    defaultArmorProfs.push(util_capitalizeAll(armorName))\n                                } else {\n                                    defaultArmorProfs.push(util_capitalizeAll(armorKey));\n                                }\n                                break;\n                        }\n                    });\n                });\n                defaultArmorProfs = defaultArmorProfs.filter(e => !!e).join(', ');\n                this.defaultArmorProfs = defaultArmorProfs.length > 0 ? defaultArmorProfs : null;\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultArmorProfs = defaultArmorProfs;\n            }\n            this.set('armorProfOptions', armorProfOptions.length > 0 ? armorProfOptions : null);\n\n\n            // Dark Vision \n            //   uses entry names, only one depth.\n            let defaultDarkvision;\n            if (this.selectedItem.entries) {\n                this.selectedItem.entries\n                    .forEach((entry) => {\n                        if (entry && entry.name && entry.name.toLowerCase() === 'darkvision' \n                                && entry.entries && entry.entries.length) {\n                            const is60 = entry.entries[0].includes('60'),\n                                is120 = entry.entries[0].includes('120');\n                                defaultDarkvision = is120 ? 120 : is60 ? 60 : 0;\n                        }\n                    })\n            }\n\n            this.storedItem.defaultDarkvision = defaultDarkvision || null;\n            this.defaultDarkvision = defaultDarkvision || null;\n\n            // Feats\n            //  can populate a nested suboption component entry \n            this.featOptions = [];\n            this.featChoices = null;\n            this.selectedFeat = null;\n            if (this.selectedItem.feats) {\n                this.featOptions = await loadModel('feats');\n                this.featChoices = this.selectedItem.feats;\n                this.selectedFeat = this.featOptions.find(feat => this.storedItem.selectedFeat && feat.name === this.storedItem.selectedFeat.name && feat.source === this.storedItem.selectedFeat.source);\n            }\n\n            // ASI\n            if (this.selectedItem.asi) {\n                this.hasASI = true;\n                this.asiChecked = !!this.storedItem.selectedFeat;\n                this.asiFeat = this.storedItem.selectedFeat || this.storedItem.previouslySelectedFeat;\n                const attributes = this.storedItem.selectedAttributes ? this.storedItem.selectedAttributes.split(',') : this.storedItem.previouslySelectedAttributes ? this.storedItem.previouslySelectedAttributes.split(',') : [];\n                this.asiAbility1 = attributes.length ? attributes[0] : null;\n                this.asiAbility2 = attributes.length > 1 ? attributes[1] : null;\n                this.storedItem.attributeMod = 1;\n            }\n\n            // Additional Spells: []\n            //     Ritual Caster  -  multiple top-level options\n            //     Breath of Winter  -  ki resource\n            //     Eldritch Sight, Far Scribe  -  innate: -: [] with unique structure (should be will?)\n            //     Astral Elf  -  multiple top-level, multiple ability choose\n            //     Mark of Shadow  -  innate, known and expanded\n            //     Shadar-kai  -  standard choose implemented as a top-level options\n            //     race \"name\": \"Green\",  - known with additional level\n            //     Drow High Magic - innate with \"1e\" usage (1 for each spell)\n            // {\n            const spellSetOptions = [];\n            const spellLookupPromises = [];\n            if (this.selectedItem.additionalSpells && this.selectedItem.additionalSpells.length) {\n                if (!this.storedItem.additionalSpells) {\n                    this.storedItem.additionalSpells = {\n                        defaultSpells: [],\n                        selectedSpells: []\n                    };\n                } else {\n                    this.storedItem.additionalSpells.defaultSpells = [];\n                    this.storedItem.additionalSpells.defaultAbility = null;\n                }\n                if (this.storedItem.additionalSpells.selectedSpellSet === undefined) {\n                    this.storedItem.additionalSpells.selectedSpellSet = 0;\n                }\n\n                this.selectedItem.additionalSpells.forEach((addtlSpellSet, addtlSpellSetIndex) => {\n                    const spellSetOption = {\n                        defaultSpells: [],\n                        expandedSpells: [],\n                        spellChoices: [],\n                        abilityChoices: []\n                    };\n                    const spellSetPromises = [];\n\n                    Object.entries(addtlSpellSet).forEach(([addtlSpellTypeKey, addtlSpellTypeValue]) => {\n                        \n                        switch (addtlSpellTypeKey) {\n                            //type    innate: \n                            //level     <character level> - or 1, 2, 3, 4, 5, 6, 7, 8, 9:\n                            //reset       <cost or reset type> rest, daily, will, ritual, resource:\n                            //                      rest (eg once per short or long rest)\n                            //                      daily (eg once per long rest)\n                            //                      will (eg cast it without spending a spell slot)\n                            //                      ritual (eg only cast as a ritual, infinite uses)\n                            //                      resource\n                            //                      - n/a : if character level value is an array (not object), then treat as \"will\"\n                            //count         <cost or reset value> 1: \n                            //                      - n/a for ritual and will\n                            //                <spell list or choose> [\"speak with animals\", {choose: \"level=1|class=Sorcerer\", count: 2}]\n                            //  issues: Furbolg & Variant; Mark of Detection  -  cast count shared across multiple spells\n                            //\n                            case 'innate':\n                                Object.entries(addtlSpellTypeValue).forEach(([addtlSpellLevelKey, addtlSpellLevelValue]) => {\n                                    const adjAddtlSpellLevelValue = Array.isArray(addtlSpellLevelValue) ? { will: addtlSpellLevelValue } : addtlSpellLevelValue;\n\n                                    Object.entries(adjAddtlSpellLevelValue).forEach(([addtlSpellResetKey, addtlSpellResetValue]) => {\n                                        const adjAddtlSpellResetValue = Array.isArray(addtlSpellResetValue) ? { '99': addtlSpellResetValue } : addtlSpellResetValue;\n\n                                        Object.entries(adjAddtlSpellResetValue).forEach(([addtlSpellCountKey, addtlSpellCountValue]) => {\n                                            const path = [addtlSpellSetIndex, addtlSpellTypeKey, addtlSpellLevelKey, addtlSpellResetKey, addtlSpellCountKey].join('.');\n                                            const type = addtlSpellResetKey;\n                                            const uses = parseInt(addtlSpellResetKey.split('e').join(''));\n\n                                            addtlSpellCountValue.forEach( (spellEntry) => {\n                                                const level = addtlSpellLevelKey === '_' ? 1 : parseInt(addtlSpellLevelKey);\n                                                if (spellEntry.choose !== undefined) {\n                                                    const spellLookupPromise = filterModel('spells', spellEntry.choose).then((options) => {\n                                                        const spellChoiceAtPath = this.storedItem.additionalSpells.selectedSpells.find((selected) => selected.path === path);\n                                                        spellSetOption.spellChoices.push({\n                                                            path,\n                                                            type,\n                                                            level,\n                                                            uses,\n                                                            count: spellEntry.count || 1,\n                                                            options,\n                                                            selectedSpells: spellChoiceAtPath && spellChoiceAtPath.spells ? spellChoiceAtPath.spells : []\n                                                        });\n                                                    });\n                                                    spellLookupPromises.push(spellLookupPromise);\n                                                    spellSetPromises.push(spellLookupPromise);\n                                                } else {\n                                                    let name = spellEntry.split('#')[0];\n                                                    let source;\n                                                    const spellLookupPromise = filterModel('spells', 'name='+name+'|').then((spellResult) => {\n                                                        if (spellResult.length) {\n                                                            source = spellResult[0].source;\n                                                            name = spellResult[0].name;\n                                                        }\n                                                        spellSetOption.defaultSpells.push({name, source, type});\n                                                        // defaults get stored if this is the selected spell set\n                                                        if (addtlSpellSetIndex === this.storedItem.additionalSpells.selectedSpellSet) {\n                                                            this.storedItem.additionalSpells.defaultSpells.push({\n                                                                type,\n                                                                level,\n                                                                name,\n                                                                source,\n                                                                uses,\n                                                            });\n                                                        }\n                                                    });\n                                                    spellLookupPromises.push(spellLookupPromise);\n                                                    spellSetPromises.push(spellLookupPromise);\n                                                }\n                                            });\n                                        });\n                                    });\n                                });\n                                break;\n\n\n                            //type    known:\n                            //level     <character level> - or 1, 2, 3, 4, 5, 6, 7, 8, 9:\n                            //            <spell list or choose> [\"prestidigitation#c\", {choose: \"level=0|class=Sorcerer\", count: 2}]\n                            //                  - if character level is an object (not array), take first key's array (test with race High; Valena)\n                            //\n                            case 'known':\n                                Object.entries(addtlSpellTypeValue).forEach(([addtlSpellLevelKey, addtlSpellLevelValue]) => {\n                                    let adjAddtlSpellLevelValue = Array.isArray(addtlSpellLevelValue)\n                                        ? addtlSpellLevelValue\n                                        : Object.values(addtlSpellLevelValue)[0];\n                                    const path = [addtlSpellSetIndex, addtlSpellTypeKey, addtlSpellLevelKey].join('.');\n\n                                    adjAddtlSpellLevelValue.forEach((spellEntry) => {\n                                        const level = addtlSpellLevelKey === '_' ? 1 : parseInt(addtlSpellLevelKey);\n                                        if (spellEntry.choose !== undefined) {\n                                            const spellLookupPromise = filterModel('spells', spellEntry.choose).then((options) => {\n                                                const spellChoiceAtPath = this.storedItem.additionalSpells.selectedSpells.find((selected) => selected.path === path);\n                                                spellSetOption.spellChoices.push({\n                                                    path,\n                                                    type: 'known',\n                                                    level,\n                                                    count: spellEntry.count || 1,\n                                                    options,\n                                                    selectedSpells: spellChoiceAtPath && spellChoiceAtPath.spells ? spellChoiceAtPath.spells : []\n                                                });\n                                            });\n                                            spellLookupPromises.push(spellLookupPromise);\n                                            spellSetPromises.push(spellLookupPromise);\n                                        } else {\n                                            let name = spellEntry.split('#')[0];\n                                            let source;\n                                            const spellLookupPromise = filterModel('spells', 'name='+name+'|').then((spellResult) => {\n                                                if (spellResult.length) {\n                                                    source = spellResult[0].source;\n                                                    name = spellResult[0].name;\n                                                }\n                                                spellSetOption.defaultSpells.push({name, source, type: 'known'});\n                                                // defaults get stored if this is the selected spell set\n                                                if (addtlSpellSetIndex === this.storedItem.additionalSpells.selectedSpellSet) {\n                                                    this.storedItem.additionalSpells.defaultSpells.push({\n                                                        type: 'known',\n                                                        level,\n                                                        name,\n                                                        source\n                                                    });\n                                                }\n                                            });\n                                            spellLookupPromises.push(spellLookupPromise);\n                                            spellSetPromises.push(spellLookupPromise);\n                                        }\n                                    });\n                                });\n\n                                break;\n\n                            //   expanded: If you have spellcasting or pact magic, add these spells to your class spell list\n                            //      <spell level> s1, s2, s3, s5, s5, 9\n                            //         <spell list>\n                            case 'prepared':\n                            case 'expanded':\n                                Object.entries(addtlSpellTypeValue).forEach(([addtlSpellLevelKey, addtlSpellLevelValue]) => {\n                                    addtlSpellLevelValue.forEach((spellEntry) => {\n                                        const level = parseInt(addtlSpellLevelKey.split('s').join(''));\n                                        let name = spellEntry.split('#')[0];\n                                        let source;\n                                        const spellLookupPromise = filterModel('spells', 'name='+name+'|').then((spellResult) => {\n                                            if (spellResult.length) {\n                                                source = spellResult[0].source;\n                                                name = spellResult[0].name;\n                                            }\n                                            const foundExpandedSpellsLevel = spellSetOption.expandedSpells.find((es) => es.level === level);\n                                            if (foundExpandedSpellsLevel) {\n                                                foundExpandedSpellsLevel.spells.push({name, source});\n                                            } else {\n                                                spellSetOption.expandedSpells.push({level, spells: [{name, source}]});\n                                            }\n                                            \n                                            // defaults get stored if this is the selected spell set\n                                            if (addtlSpellSetIndex === this.storedItem.additionalSpells.selectedSpellSet) {\n                                                this.storedItem.additionalSpells.defaultSpells.push({\n                                                    type: 'expanded',\n                                                    level,\n                                                    name,\n                                                    source\n                                                });\n                                            }\n                                        });\n                                        spellLookupPromises.push(spellLookupPromise);\n                                        spellSetPromises.push(spellLookupPromise);\n                                    });\n                                });\n                                break;\n\n                            \n                            case 'ability': \n                                if (addtlSpellTypeValue === \"inherit\") {\n                                    // todo, get from selected ability. example: feat Telekinetic\n                                } else if (addtlSpellTypeValue.choose){\n                                    spellSetOption.abilityChoices = addtlSpellTypeValue.choose.map((v) => v.toUpperCase());\n                                    spellSetOption.selectedAbility = this.storedItem.additionalSpells.selectedAbility;\n                                } else {\n                                    spellSetOption.defaultAbility = addtlSpellTypeValue;\n                                    // defaults get stored if this is the selected spell set\n                                    if (addtlSpellSetIndex === this.storedItem.additionalSpells.selectedSpellSet) {\n                                        this.storedItem.additionalSpells.defaultAbility = addtlSpellTypeValue.toUpperCase();\n                                    }\n                                }\n                                break;\n\n                            default:\n                                break;\n                        }\n                    });\n\n                    Promise.all(spellSetPromises).then(() => {\n                        spellSetOption.name = addtlSpellSet.name ? addtlSpellSet.name : spellSetOption.defaultSpells.length ? this._renderSpellName(spellSetOption.defaultSpells[0]) : addtlSpellSetIndex;\n                        spellSetOption.expandedSpells.sort((es1, es2) => es1.level - es2.level);\n                        spellSetOptions.push(spellSetOption);\n                    })\n                });\n            }\n\n            Promise.all(spellLookupPromises).then(() => {\n                this.set('spellSetOptions', spellSetOptions);\n                if (spellSetOptions.length) {\n                    this.set('selectedSpellSet', spellSetOptions[this.storedItem.additionalSpells.selectedSpellSet]);\n                } else {\n                    this.set('selectedSpellSet', null);\n                }\n            });\n            \n            this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n        } else {\n            this.storedItem = {}\n            this.attributeOptions = [];\n            this.skillProfOptions = [];\n            this.armorProfOptions = [];\n            this.weaponProfOptions = [];\n            this.toolProfOptions = [];\n            this.langProfOptions = [];\n            this.sTLProfOptions = [];\n            this.resistOptions = [];\n            this.conditionImmuneOptions = [];\n            this.featOptions = [];\n            this.spellSetOptions = [];\n            this.defaultAttributes = null;\n            this.defaultSkillProfs = null;\n            this.defaultArmorProfs = null;\n            this.defaultWeaponProfs = null;\n            this.defaultToolProfs = null;\n            this.defaultLangProfs = null;\n            this.defaultDarkvision = null;\n            this.defaultResists = null;\n            this.defaultConditionImmunes = null;\n        }\n    }\n\n    async getSpellChoiceOptions(chooseString) {\n        return await filterModel('spells', chooseString);\n    }\n\n    _toolProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedToolProfs[key] = skills.join(',');\n            const newToolProfOptions = cloneDeep(this.toolProfOptions);\n            newToolProfOptions[index].selectedToolProfs = skills;\n            this.set('toolProfOptions', newToolProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _langProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedLangProfs[key] = skills.join(',');\n            const newLangProfOptions = cloneDeep(this.langProfOptions);\n            newLangProfOptions[index].selectedLangProfs = skills;\n            this.set('langProfOptions', newLangProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _armorProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedArmorProfs[key] = skills.join(',');\n            const newArmorProfOptions = cloneDeep(this.armorProfOptions);\n            newArmorProfOptions[index].selectedArmorProfs = skills;\n            this.set('armorProfOptions', newArmorProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _weaponProficiencyAddCallback(key, index) {\n        return ((skills) => {\n            this.storedItem.selectedWeaponProfs[key] = skills.join(',');\n            const newWeaponProfOptions = cloneDeep(this.weaponProfOptions);\n            newWeaponProfOptions[index].selectedWeaponProfs = skills;\n            this.set('weaponProfOptions', newWeaponProfOptions);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _skillProficiencyAddCallback() {\n        return ((skills) => {\n            this.storedItem.selectedSkillProfs = skills.join(',');\n            this.selectedSkillProfs = skills;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _attributeAddCallback() {\n        return ((attr) => {\n            this.storedItem.selectedAttributes = attr.join(',');\n            this.selectedAttributes = attr;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _featAddCallback() {\n        return ((feat) => {\n            this.storedItem.selectedFeat = { name: feat.name, source: feat.source };\n            this.selectedFeat = this.featOptions.find(feat => feat.name === this.storedItem.selectedFeat.name && feat.source === this.storedItem.selectedFeat.source);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _sTLProfAddCallback() {\n        return ((profs) => {\n            this.storedItem.selectedSTLProfs = profs;\n            this.selectedSTLProfs = profs;\n            saveCharacter(this.character);\n        }).bind(this)\n    }\n\n    _resistAddCallback() {\n        return ((resists) => {\n            this.storedItem.selectedResists = resists;\n            this.selectedResists = resists;\n            saveCharacter(this.character);\n        }).bind(this)\n    }\n\n    _conditionImmuneAddCallback() {\n        return ((conditionImmunes) => {\n            this.storedItem.selectedConditionImmunes = conditionImmunes;\n            this.selectedConditionImmunes = conditionImmunes;\n            saveCharacter(this.character);\n        }).bind(this)\n    }\n\n    _spellSetCallback() {\n        return ((spellSet) => {\n            this.storedItem.additionalSpells.selectedSpellSet = this.spellSetOptions.findIndex((spellSetOption) => spellSetOption === spellSet);;\n            this.set('selectedSpellSet', spellSet);\n            this.updateOptions();\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _spellAbilityCallback() {\n        return ((ability) => {\n            this.storedItem.additionalSpells.selectedAbility = ability;\n            const newSelectedSpellSet = cloneDeep(this.selectedSpellSet);\n            newSelectedSpellSet.selectedAbility = ability;\n            this.set('selectedSpellSet', newSelectedSpellSet);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _spellChoiceCallback(choice, index) {\n        return ((spells) => {\n            const mappedSpells = spells.map((spell) => { return { name: spell.name, source: spell.source } });\n            let spellChoiceAtPath = this.storedItem.additionalSpells.selectedSpells.find((selected) => selected.path === choice.path);\n            if (!spellChoiceAtPath) {\n                spellChoiceAtPath = { path: choice.path, type: choice.type, level: choice.level, resource: choice.resource, count: choice.count, uses: choice.uses };\n                this.storedItem.additionalSpells.selectedSpells.push(spellChoiceAtPath);\n            }\n            spellChoiceAtPath.spells = mappedSpells;\n            const newSelectedSpellSet = cloneDeep(this.selectedSpellSet);\n            newSelectedSpellSet.spellChoices[index].selectedSpells = mappedSpells;\n            this.set('selectedSpellSet', newSelectedSpellSet);\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _asiChangeCallback() {\n        return ((asi) => {\n            if (asi.checked) {\n                this.storedItem.selectedFeat = asi.selectedFeat;\n                this.storedItem.previouslySelectedAttributes = [asi.selectedAbilityOne, asi.selectedAbilityTwo].filter(a => !!a).join(',');\n                delete this.storedItem.selectedAttributes;\n            } else {\n                this.storedItem.previouslySelectedFeat = asi.selectedFeat;\n                delete this.storedItem.selectedFeat;\n                this.storedItem.selectedAttributes = [asi.selectedAbilityOne, asi.selectedAbilityTwo].filter(a => !!a).join(',')\n            }\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _suboptionStorageKey(storageKey) {\n        return `${storageKey}_suboptions`\n    }\n\n    _showEmpty(isEditMode, value) {\n        return !isEditMode && !value;\n    }\n\n    _exists() {\n        for (let arg of arguments) {\n            if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _plusPrefix(num) {\n        return `+${num}`\n    }\n\n    _plural(str, num, overrideLabel) {\n        const newStr = overrideLabel || str;\n        if (num > 1) {\n            return newStr + 's'\n        }\n        return newStr;\n    }\n\n    _printOptions(selectedOptions, storedItem, key) {\n        let out = []\n        for (const option of selectedOptions) {\n            out = out.concat(storedItem[`selected${key}Profs`][option])\n        }\n        return out.join(', ');\n    }\n\n    _moreThanOne(list) {\n        return list.length > 1;\n    }\n\n    _renderSpellName(s) {\n        return `${util_capitalizeAll(s.name)}${s.source && s.source.toLowerCase() !== 'phb' ? ` (${s.source})` : ''}`;\n    }\n\n    _openSpell(e) {\n        this.dispatchEvent(new CustomEvent(\"open-drawer\", {\n            bubbles: true,\n            composed: true,\n            detail: {\n                viewId: \"spells\",\n                selectedItem: e.model.__data.item\n            }\n        }));\n    }\n\n    _spellLevel(level) {\n        switch (level) {\n            case 0:\n                return 'Cantrip';\n            case 1:\n                return '1st';\n            case 2:\n                return '2nd';\n            case 3:\n                return '3rd';\n            default:\n                return level + 'th';\n        }\n    }\n\n    _isLast(index, list) {\n        return list && list.length && index === list.length - 1;\n    }\n\n    static get template() {\n        return html`\n            <style include=\"material-styles\">\n                .some {}\n                :host {\n                    display: block;\n                    white-space: initial;\n                }\n                .spell-link {\n                    color: var(--mdc-theme-secondary);\n                    cursor: pointer;\n                    text-decoration: underline;\n                }\n                .spell-link:hover {\n                }\n                table {\n                    line-height: 1.3;\n                    margin-left: 12px;\n                }\n                td {\n                    vertical-align: top;\n                }\n                td:first-child {\n                    padding-right: 8px;\n                }\n                [hidden] {\n                    display: none !important;\n                }\n                dnd-character-builder-suboptions {\n                    padding-left: 40px;\n                    display: block;\n                }\n                dnd-select-add {\n                    width: 100%;\n                    display: block;\n                }\n                dnd-select-add,\n                dnd-character-builder-suboptions:not(.asi-suboption) {\n                    width: var(--suboptions__width);\n                    max-width: var(--suboptions__max-width);\n                }\n                .default-selection {\n                    font-size: 14px;\n                    margin-bottom: 6px;\n                }\n                @media(min-width: 420px) {\n                    dnd-select-add {\n                        \n                    }\n                }\n\n                @media(min-width: 921px) {\n                }\n            </style>\n\n            <div class=\"col-wrap\">\n\n                <div hidden$=\"[[!_exists(defaultAttributes)]]\" class=\"default-selection\"><b>Ability Increase: </b><span>[[defaultAttributes]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultSkillProfs)]]\" class=\"default-selection\"><b>Skills: </b><span>[[defaultSkillProfs]]</span></div>\n                \n                <div hidden$=\"[[!_exists(defaultArmorProfs)]]\" class=\"default-selection\"><b>Armor: </b><span>[[defaultArmorProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultWeaponProfs)]]\" class=\"default-selection\"><b>Weapons: </b><span>[[defaultWeaponProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultToolProfs)]]\" class=\"default-selection\"><b>Tools: </b><span>[[defaultToolProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultLangProfs)]]\" class=\"default-selection\"><b>Languages: </b><span>[[defaultLangProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultDarkvision)]]\" class=\"default-selection\"><b>Darkvision: </b><span>[[defaultDarkvision]] ft.</span></div>\n\n                <div hidden$=\"[[!_exists(defaultResists)]]\" class=\"default-selection\"><b>Resistances: </b><span>[[defaultResists]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultConditionImmunes)]]\" class=\"default-selection\"><b>Condition Immunities: </b><span>[[defaultConditionImmunes]]</span></div>\n\n                <template is=\"dom-if\" if=\"[[_moreThanOne(spellSetOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Spell Set>\" label=\"Selected Spell Set\"\n                        options=\"[[spellSetOptions]]\" value=\"[[selectedSpellSet]]\" \n                        add-callback=\"[[_spellSetCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(selectedSpellSet.abilityChoices)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Spell Ability>\" label=\"Selected Spell Ability\"\n                        options=\"[[selectedSpellSet.abilityChoices]]\" value=\"[[selectedSpellSet.selectedAbility]]\"\n                        add-callback=\"[[_spellAbilityCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[selectedSpellSet.spellChoices]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Spells>\" label=\"Selected Spells\"\n                        choices=\"[[item.count]]\" options=\"[[item.options]]\"\n                        value=\"[[item.selectedSpells]]\" add-callback=\"[[_spellChoiceCallback(item, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <div hidden$=\"[[!_exists(selectedSpellSet.defaultSpells)]]\" class=\"default-selection\">\n                    <b>Spells: </b>\n                    <span>\n                        <template is=\"dom-repeat\" items=\"[[selectedSpellSet.defaultSpells]]\">\n                            <span class=\"spell-link\" on-click=\"_openSpell\">[[_renderSpellName(item)]]</span><span hidden$=\"[[_isLast(index, selectedSpellSet.defaultSpells)]]\">, </span>\n                        </template>\n                    </span>\n                </div>\n\n                <div hidden$=\"[[!_exists(selectedSpellSet.expandedSpells)]]\" class=\"default-selection\">\n                    <b>Expanded Spell List</b>\n                    <table>\n                        <template is=\"dom-repeat\" items=\"[[selectedSpellSet.expandedSpells]]\" as=\"expandedSpells\">\n                            <tr>\n                                <td>[[_spellLevel(expandedSpells.level)]]</td>\n                                <td>\n                                    <template is=\"dom-repeat\" items=\"[[expandedSpells.spells]]\">\n                                        <span class=\"spell-link\" on-click=\"_openSpell\">[[_renderSpellName(item)]]</span><span hidden$=\"[[_isLast(index, expandedSpells.spells)]]\">, </span>\n                                    </template>\n                                </td>\n                            </tr>\n                        </template>\n                    </table>\n                </div>\n\n\n                <template is=\"dom-if\" if=\"[[_exists(attributeOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\" \n                        placeholder=\"<Select Attribute>\" label='[[_plural(\"Selected Attribute\", attributeChoices)]]'\n                        choices=\"[[attributeChoices]]\" paren=\"[[_plusPrefix(attributeMod)]]\" options=\"[[attributeOptions]]\"\n                        value=\"[[selectedAttributes]]\" add-callback=\"[[_attributeAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(skillProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill>\" label='[[_plural(\"Selected Skill\", skillProfChoices)]]'\n                        choices=\"[[skillProfChoices]]\" options=\"[[skillProfOptions]]\"\n                        value=\"[[selectedSkillProfs]]\" add-callback=\"[[_skillProficiencyAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[armorProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Armor>\" label='[[_plural(\"Selected Armor\", item.armorProfChoices, item.label)]]'\n                        choices=\"[[item.armorProfChoices]]\" options=\"[[item.armorProfOptions]]\"\n                        value=\"[[item.selectedArmorProfs]]\" add-callback=\"[[_armorProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[weaponProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Weapon>\" label='[[_plural(\"Selected Weapon\", item.weaponProfChoices, item.label)]]'\n                        choices=\"[[item.weaponProfChoices]]\" options=\"[[item.weaponProfOptions]]\"\n                        value=\"[[item.selectedWeaponProfs]]\" add-callback=\"[[_weaponProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[toolProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Tool>\" label='[[_plural(\"Selected Tool\", item.toolProfChoices, item.label)]]'\n                        choices=\"[[item.toolProfChoices]]\" options=\"[[item.toolProfOptions]]\"\n                        value=\"[[item.selectedToolProfs]]\" add-callback=\"[[_toolProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[langProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Language>\" label='[[_plural(\"Selected Language\", item.langProfChoices, item.label)]]'\n                        choices=\"[[item.langProfChoices]]\" options=\"[[item.langProfOptions]]\"\n                        value=\"[[item.selectedLangProfs]]\" add-callback=\"[[_langProficiencyAddCallback(item.key, index)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(sTLProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill or Tool>\" label=\"Selected Skill or Tool\"\n                        choices=\"[[sTLProfChoices]]\" options=\"[[sTLProfOptions]]\"\n                        value=\"[[selectedSTLProfs]]\" add-callback=\"[[_sTLProfAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(resistOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Resistance>\" label=\"Selected Resistance\"\n                        choices=\"[[resistChoices]]\" options=\"[[resistOptions]]\"\n                        value=\"[[selectedResists]]\" add-callback=\"[[_resistAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(conditionImmuneOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Condition Immunity>\" label=\"Selected Condition Immunity\"\n                        choices=\"[[conditionImmuneChoices]]\" options=\"[[conditionImmuneOptions]]\"\n                        value=\"[[selectedConditionImmunes]]\" add-callback=\"[[_conditionImmuneAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(featOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Feat>\" label=\"Selected Feat\"\n                        options=\"[[featOptions]]\" value=\"[[selectedFeat]]\"\n                        add-callback=\"[[_featAddCallback()]]\">\n                    </dnd-select-add>\n                    \n                    <template is=\"dom-if\" if=\"[[_exists(selectedFeat)]]\">\n                        <dnd-character-builder-suboptions storage-key=\"[[_suboptionStorageKey(storageKey)]]\" selected-item=\"[[selectedFeat]]\"></dnd-character-builder-suboptions>\n                    </template>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[hasASI]]\">\n                    <dnd-asi-select change-callback=\"[[_asiChangeCallback()]]\" checked=\"[[asiChecked]]\" selected-feat=\"[[asiFeat]]\" selected-ability-one=\"[[asiAbility1]]\" selected-ability-two=\"[[asiAbility2]]\"></dnd-asi-select>\n\n                    <template is=\"dom-if\" if=\"[[asiChecked]]\">\n                        <dnd-character-builder-suboptions class=\"asi-suboption\" storage-key=\"[[_suboptionStorageKey(storageKey)]]\" selected-item=\"[[asiFeat]]\"></dnd-character-builder-suboptions>\n                    </template>\n                </template>\n            </div>\n        `;\n    }\n}\n\ncustomElements.define(\"dnd-character-builder-suboptions\", DndCharacterBuilderSuboptions);\n","import { PolymerElement, html } from \"@polymer/polymer\";\nimport { encodeForHash } from \"../js/utils\";\nimport { getEditModeChannel, isEditMode } from \"../util/editMode\";\n\nclass DndAsiSelect extends PolymerElement {\n  \n  static get properties() {\n    return {\n      checked: {\n        type: Boolean,\n        value: false\n      },\n      selectedFeat: {\n        type: Object\n      },\n      selectedAbilityOne: {\n        type: String\n      },\n      selectedAbilityTwo: {\n        type: String\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      changeCallback: {\n        type: Function\n      }\n    };\n  }\n\n  constructor() {\n    super();\n    this.attributeOptions = [\n      \"STR\",\n      \"DEX\",\n      \"CON\",\n      \"INT\",\n      \"WIS\",\n      \"CHA\"\n    ]\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.switchChangeHandler = (e) => {\n      this.checked = e.detail.checked;\n      this._changeHandler()();\n    }\n    this.addEventListener(\"switch-change\", this.switchChangeHandler);\n\n    this.editModeHandler = (e) => {\n        this.disabled = !e.detail.isEditMode;\n    }\n    getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n    this.disabled = !isEditMode();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.removeEventListener(\"switch-change\", this.switchChangeHandler);\n    getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n  }\n\n  _changeHandler(key) {\n    return ((val) => {\n      switch (key) {\n        case 'a1':\n          this.selectedAbilityOne = val;\n          break;\n\n        case 'a2':\n          this.selectedAbilityTwo = val;\n          break;\n\n        case 'feat':\n          this.selectedFeat = val;\n          break;\n      \n        default:\n          break;\n      }\n      this.changeCallback({\n        checked: this.checked,\n        selectedFeat: this.selectedFeat,\n        selectedAbilityOne: this.selectedAbilityOne,\n        selectedAbilityTwo: this.selectedAbilityTwo,\n      });\n    })\n  }\n\n  _disableLabel(checked) {\n    return checked ? 'Feat' : 'ASI';\n  }\n\n  _getFeatLink(feat) {\n    let linkData = [feat.name];\n    if (feat.source) {\n      linkData.push(feat.source);\n    }\n    let dataLink = encodeForHash(linkData);\n    return dataLink ? `#/feats/${dataLink}` : '#/feats';\n  }\n\n  _linkClick() {\n    this.dispatchEvent(new CustomEvent(\"open-drawer\", {\n      bubbles: true,\n      composed: true,\n      detail: {\n        selectedItem: this.selectedFeat,\n        viewId: 'feats'\n      }\n    }));\n  }\n\n  static get template() {\n    return html`\n      <style include=\"material-styles\">\n        :host {\n          display: flex;\n          flex-direction: column;\n          max-width: 192px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n        .abilities {\n          display: flex;\n          flex-wrap: wrap;\n        }\n        .abilities dnd-select-add {\n          width: calc(50% - 8px);\n        }\n        dnd-select-add + dnd-select-add {\n          margin-left: 16px;\n        }\n        dnd-select-add {\n          display: block;\n        }\n        .disable-label {\n          font-size: 14px;\n          font-weight: 500;\n          color: var(--mdc-theme-primary);\n        }\n        .reference-link {\n          color: var(--lumo-body-text-color);\n        }\n        .reference-link:hover {\n          color: var(--mdc-theme-secondary);\n        }\n        .feat-pick-wrap {\n          display: flex;\n        }\n      </style>\n\n      <div class=\"disable-label\" hidden$=\"[[!disabled]]\">[[_disableLabel(checked)]]</div>\n      <dnd-switch initial-value=[[checked]] label=\"ASI\" secondary-label=\"Feat\" hidden$=\"[[disabled]]\"></dnd-switch>\n      <div class=\"abilities\" hidden$=[[checked]]>\n        <dnd-select-add add-callback=\"[[_changeHandler('a1')]]\" value=\"[[selectedAbilityOne]]\" options=\"[[attributeOptions]]\" placeholder=\"<ASI>\" disabled$=\"[[disabled]]\"></dnd-select-add>\n        <dnd-select-add add-callback=\"[[_changeHandler('a2')]]\" value=\"[[selectedAbilityTwo]]\" options=\"[[attributeOptions]]\" placeholder=\"<ASI>\" disabled$=\"[[disabled]]\"></dnd-select-add>\n      </div>\n      <div class=\"feat-pick-wrap\" hidden$=[[!checked]]>\n        <dnd-select-add add-callback=\"[[_changeHandler('feat')]]\" model=\"feats\" value=\"[[selectedFeat.name]]\" placeholder=\"<Choose Feat>\" disabled$=\"[[disabled]]\"></dnd-select-add>\n        <button class=\"reference-link mdc-icon-button material-icons\" on-click=\"_linkClick\" hidden$=\"[[disabled]]\">logout</button>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define(\"dnd-asi-select\", DndAsiSelect);"],"sourceRoot":""}