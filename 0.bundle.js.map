{"version":3,"sources":["webpack:///./components/dnd-select-add.js","webpack:///./components/views/character/dnd-character-builder-suboptions.js"],"names":["DndSelectAdd","test","type","Boolean","reflectToAttribute","value","options","Array","observer","model","String","addCallback","Function","choices","Number","paren","label","placeholder","multiValue","disabled","this","listBox","remove","$","select","render","isArray","choiceArray","map","v","indexOf","findIndex","o","name","source","filter","selectedValues","i","join","super","ready","setTimeout","async","renderer","root","document","createElement","setAttribute","addEventListener","e","opened","wasPreviouslySelected","srcElement","getAttribute","length","splice","selectedOptions","option","item","optionName","innerHTML","appendChild","_assignMenuElement","valueUpdated","connectedCallback","selectChangeHandler","val","selected","undefined","disconnectedCallback","removeEventListener","a","result","customElements","define","DndCharacterBuilderSuboptions","storageKey","selectedItem","Object","skillProfOptions","skillProfChoices","selectedSkillProfs","defaultSkillProfs","toolProfOptions","defaultToolProfs","langProfOptions","defaultLangProfs","weaponProfOptions","defaultWeaponProfs","armorProfOptions","defaultArmorProfs","attributeOptions","attributeChoices","attributeMod","selectedAttributes","defaultAttributes","featOptions","featChoices","selectedFeat","isEditMode","dontCreateIfMissing","characterChangeHandler","character","detail","set","updateOptions","editModeHandler","storageKeys","split","storedItem","dispatchEvent","CustomEvent","bubbles","composed","isNaN","parseInt","ability","choose","from","toUpperCase","count","amount","entries","attribute","toLowerCase","mod","skillProficiencies","skillProficiency","any","concat","keys","toolProficiencies","selectedToolProfs","toolProficiency","forEach","toolKey","toolVal","newToolProfOption","key","toolListsMapped","flat","toolProfChoices","push","isInteger","languageProficiencies","selectedLangProfs","langProficiency","langKey","langVal","newLangProfOption","langProfChoices","includes","substring","trim","weaponProficiencies","selectedWeaponProfs","weaponProficiency","weaponKey","weaponVal","newWeaponProfOption","weaponProfChoices","weaponName","defaultDarkvision","armorProficiencies","selectedArmorProfs","armorProficiency","armorKey","armorVal","newArmorProfOption","armorProfChoices","armorName","entry","is60","is120","feats","skills","bind","attr","feat","arg","arguments","constructor","num","str","overrideLabel","newStr","out"],"mappings":"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","file":"0.bundle.js","sourcesContent":["import { PolymerElement, html } from '@polymer/polymer';\nimport { mergeFeature } from '../util/charBuilder';\nimport { jqEmpty, util_capitalizeAll } from \"../js/utils\";\nimport \"@vaadin/vaadin-select\";\nimport {loadModel} from \"../util/data\";\n\nclass DndSelectAdd extends PolymerElement {\n  static get properties() {\n    return {\n      test: {\n        type: Boolean,\n        reflectToAttribute: true,\n        value: false\n      },\n      options: {\n        type: Array,\n        observer: \"optionsUpdated\"\n      },\n      model: {\n        type: String\n      },\n      addCallback: {\n        type: Function\n      },\n      value: {\n        type: String,\n        value: \"\",\n        observer: \"valueUpdated\"\n      },\n      choices: {\n        type: Number,\n        observer: \"choicesUpdated\"\n      },\n      paren: {\n        type: String,\n      },\n      label: {\n        type: String\n      },\n      placeholder: {\n        type: String,\n      },\n      multiValue: {\n        type: String,\n        value: \"\"\n      },\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      }\n    }\n  }\n\n  choicesUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  optionsUpdated() {\n    if (this.listBox) {\n      this.listBox.remove();\n      delete this.listBox;\n    }\n    this.$.select.render();\n  }\n\n  valueUpdated() {\n    if (this.choices) {\n      if (Array.isArray(this.value) && this.options) {\n        const choiceArray = this.value\n          .map(v => {\n            if (this.options.indexOf(v) !== -1) {\n              return this.options.indexOf(v);\n            } else {\n              return this.options.findIndex((o) => {\n                return o.name === v.name && o.source === v.source;\n              });\n            }\n          })\n          .filter(v => { return v !== -1 });\n\n        if (this.listBox) {\n          this.listBox.selectedValues = choiceArray;\n        }\n        this.multiValue = choiceArray.map(i => {\n          let value = this.options[i];\n          return value.name ? value.name : util_capitalizeAll(value) \n        }).join(\", \");\n      } else {\n        if (this.listBox) {\n          this.listBox.selectedValues = [];\n        }\n        this.multiValue = \"\";\n      }\n    } else {\n      if (this.value && this.options) {\n        if (this.value.source) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name && i.source === this.value.source || i === this.value.name }) + \"\";\n        } else if (this.value.name) {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value.name || i === this.value.name }) + \"\";\n        } else {\n          this.$.select.value = this.options.findIndex(i => { return i.name === this.value || i === this.value }) + \"\";\n        }\n      } else {\n        this.$.select.value = \"\";\n      }\n    }\n  }\n\n  ready() {\n    super.ready();\n\n    setTimeout(async () => {\n      if (this.model) {\n        this.options = await loadModel(this.model);\n      }\n\n      this.$.select.renderer = (root, select) => {\n        if (!this.listBox) {\n          this.listBox = document.createElement('vaadin-list-box');\n\n          // setting up for multi-select\n          if (this.choices) {\n            this.listBox.setAttribute(\"multiple\", true);\n\n            this.listBox.addEventListener(\"click\", (e) => {\n              select.opened = true;\n              let wasPreviouslySelected = e.srcElement.getAttribute(\"selected\") !== null\n              setTimeout(() => {\n                if (this.listBox.selectedValues.length > this.choices\n                    && !wasPreviouslySelected) {\n                  this.listBox.selectedValues.splice(this.listBox.selectedValues.length - 2, 1)\n                }\n                let selectedOptions = this.listBox.selectedValues.map(v => { return this.options[v] });\n                this.multiValue = selectedOptions.map(o => { return o.name ? o.name : util_capitalizeAll(o) }).join(', ');\n                if (this.addCallback) {\n                  this.addCallback(selectedOptions);\n                }\n              }, 0);\n            });\n\n          }\n\n          // Adding options\n          if (this.options && this.options.length) {\n            for (let i = 0; i < this.options.length; i ++) {\n              const option = this.options[i],\n                item = document.createElement('vaadin-item');\n              const optionName = option.name || util_capitalizeAll(option);\n              item.innerHTML = `<span style='margin-left: 10px;'>${optionName}</span> ${option.name ? `<span style='font-size: 14px;color: var(--lumo-primary-color-50pct);'>${option.source}</span>` : ''}`\n              item.setAttribute(\"value\", i);\n              this.listBox.appendChild(item);\n            }\n          }\n          root.appendChild(this.listBox);\n          this.$.select._assignMenuElement();\n\n          this.valueUpdated();\n        }\n      };\n    }, 0);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.selectChangeHandler = () => {\n      const val = this.$.select.value;\n      if (val) {\n        if (!this.choices) {\n          const selected = this.options[val];\n          if (this.addCallback) {\n            this.addCallback(selected, this.model);\n          } else {\n            mergeFeature(undefined, selected, this.model);\n          }\n          if (!this.value) {\n            this.$.select.value = \"\";\n          }\n        }\n      }\n    };\n\n    this.$.select.addEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.$.select.removeEventListener(\"change\", this.selectChangeHandler);\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  _label(label, choices, paren) {\n    let result = '';\n    if (label) {\n      result = label;\n      if (choices && choices !== 1 && choices !== 100) {\n        result += ` (pick ${choices})`;\n      }\n      if (paren) {\n        result += ` (${paren})`;\n      }\n    }\n    return result;\n  }\n  \n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n        [slot=\"prefix\"] {\n          width: calc(100% - 46px);\n          padding: 12px;\n          line-height: 1.4;\n        }\n        vaadin-select {\n          width: 100%;\n        }\n        .prefix {\n          white-space: normal;\n          color: var(--lumo-body-text-color);\n        }\n      </style>\n      <vaadin-select test$=\"[[test]]\" theme=\"dark\" add id=\"select\" label=\"[[_label(label, choices, paren)]]\" placeholder=\"[[placeholder]]\" disabled$=\"[[disabled]]\">\n        <div hidden$=\"[[!_exists(multiValue)]]\" slot=\"prefix\">\n          <span class=\"prefix\">[[multiValue]]</span>\n        </div>\n      </vaadin-select>\n      \n    `;\n  }\n}\ncustomElements.define('dnd-select-add', DndSelectAdd);","import { PolymerElement, html } from \"@polymer/polymer\";\nimport {\n    getCharacterChannel,\n    getSelectedCharacter,\n    saveCharacter,\n} from \"../../../util/charBuilder\";\nimport { getEditModeChannel, isEditMode } from \"../../../util/editMode\";\nimport { util_capitalizeAll, absInt, cloneDeep } from \"../../../js/utils\"; \nimport { loadModel } from \"../../../util/data\";\nimport '../../dnd-select-add';\nimport { SKILL_TO_ATB_ABV } from \"../../../js/bestiary\";\nimport { } from '@polymer/polymer/lib/elements/dom-if.js';\nimport { } from '@polymer/polymer/lib/elements/dom-repeat.js';\nimport { LANGUAGES_ALL, toolsListFromCategory, TOOLS_ALL, TOOLS_ARTISAN, TOOLS_GAMING_SET, TOOLS_INSTRUMENT, WEAPON_ALL, WEAPON_MARTIAL, WEAPON_SIMPLE } from \"../../../util/consts\";\n\n\n// TODO parsing\n//// additionalSpells, \"expertise\", dark vision\n//// class entry parsing - \"gain proficiency\" - {@item brewer's supplies|phb}, martial weapons, {@skill Performance}, or, choose one, \n///\n\nclass DndCharacterBuilderSuboptions extends PolymerElement {\n    static get properties() {\n        return {\n            storageKey: {\n                type: String\n            },\n            // This selectedItem provided is used to populate the sub option fields using the option data structure setup in data\n            selectedItem: {\n                type: Object\n            },\n\n            skillProfOptions: {\n                type: Array,\n                value: []\n            },\n            skillProfChoices: {\n                type: Number,\n            },\n            selectedSkillProfs: {\n                type: Array,\n            },\n            defaultSkillProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            toolProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultToolProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            langProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultLangProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            weaponProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultWeaponProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            armorProfOptions: {\n                type: Array,\n                value: []\n            },\n            defaultArmorProfs: {\n                type: String,\n                value: \"\"\n            },\n\n            attributeOptions: {\n                type: Array,\n                value: []\n            },\n            attributeChoices: {\n                type: Number,\n            },\n            attributeMod: {\n                type: Number,\n            },\n            selectedAttributes: {\n                type: Array,\n            },\n            defaultAttributes: {\n                type: String,\n                value: \"\"\n            },\n\n            featOptions: {\n                type: Array,\n                value: []\n            },\n            featChoices: {\n                type: Number\n            },\n            selectedFeat: {\n                type: Array,\n            },\n\n            isEditMode: {\n                type: Boolean,\n                value: false\n            },\n            \n            dontCreateIfMissing: {\n                type: Boolean,\n                value: false,\n                reflectToAttribute: true\n            }\n        };\n    }\n\n    static get observers() {\n        return ['updateOptions(selectedItem, storageKey, character)']\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.characterChangeHandler = (e) => {\n            // let character = cloneDeep(e.detail.character);\n            let character = e.detail.character;\n            this.set('character', character);\n            this.updateOptions();\n        };\n        \n        this.set('character', getSelectedCharacter());\n        getCharacterChannel().addEventListener(\"character-selected\", this.characterChangeHandler);\n\n        this.editModeHandler = (e) => {\n            this.isEditMode = e.detail.isEditMode;\n        }\n        getEditModeChannel().addEventListener('editModeChange', this.editModeHandler);\n        this.isEditMode = isEditMode();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n\n        getCharacterChannel().removeEventListener(\"character-selected\", this.characterChangeHandler);\n        getEditModeChannel().removeEventListener('editModeChange', this.editModeHandler);\n    }\n\n    async updateOptions() {\n        if (this.character && this.storageKey && this.selectedItem) {\n            // Finding the storedItem from the character's choices at storageKey \n            const storageKeys = this.storageKey.split('.');\n            if (!this.character.choices) {\n                this.character.choices = {};\n            }\n            let storedItem = this.character.choices;\n\n            for (let i = 0; i < storageKeys.length; i++) {\n                const storageKey = storageKeys[i];\n                if (!storedItem[storageKey]) {\n                    if (!this.dontCreateIfMissing) {\n                        if (storageKeys.length < i + 1 && !isNaN(parseInt(storageKeys[i + 1], 10))) {\n                            storedItem[storageKey] = new Array(20);\n                        } else {\n                            storedItem[storageKey] = {};\n                        }\n                    } else {\n                        this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n                        return;\n                    }\n                }\n                storedItem = storedItem[storageKey];\n            }\n            this.storedItem = storedItem;\n\n\n            // todo languageProficiencies\n\n            // Retrieving the selected choices for attribute, feat, or proficiency off of the storedItem\n\n            // Populating Attribute choice field\n            this.attributeOptions = [];\n            this.attributeChoices = null;\n            this.attributeMod = 1;\n            this.selectedAttributes = null;\n            this.defaultAttributes = null;\n            if (this.selectedItem.ability && this.selectedItem.ability.length) {\n                const ability = this.selectedItem.ability[0];\n                if (ability.choose) {\n                    this.attributeOptions = ability.choose.from.map(i => { return i.toUpperCase() });\n                    this.attributeChoices = ability.choose.count || 1;\n                    this.attributeMod = ability.choose.amount || 1;\n                    this.selectedAttributes = this.storedItem.selectedAttributes ? this.storedItem.selectedAttributes.split(',') : null;\n                }\n                this.defaultAttributes = Object.entries(ability).map(e => {\n                    if (e[0] !== 'choose' && e[0] !== 'any') {\n                        let attribute = e[0].toLowerCase(),\n                            mod = e[1];\n                        return attribute.toUpperCase() + ' ' + absInt(mod);\n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultAttributes = this.defaultAttributes;\n                this.storedItem.attributeMod = this.attributeMod;\n            }\n\n            // Populating Skill Proficiency choice field\n            this.skillProfOptions = [];\n            this.skillProfChoices = null;\n            this.selectedSkillProfs = null;\n            this.defaultSkillProfs = null;\n            if (this.selectedItem.skillProficiencies && this.selectedItem.skillProficiencies.length) {\n                const skillProficiency = this.selectedItem.skillProficiencies[0];\n                if (skillProficiency.choose) {\n                    this.skillProfOptions = skillProficiency.choose.from;\n                    this.skillProfChoices = skillProficiency.choose.count || 1;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                if (skillProficiency.any) {\n                    if (this.selectedItem.name === \"Custom Lineage\") {\n                        this.skillProfOptions = [\"Darkvision (60ft)\"].concat(Object.keys(SKILL_TO_ATB_ABV));\n                    } else {\n                        this.skillProfOptions = Object.keys(SKILL_TO_ATB_ABV);\n                    }\n                    this.skillProfChoices = skillProficiency.any;\n                    this.selectedSkillProfs = this.storedItem.selectedSkillProfs ? this.storedItem.selectedSkillProfs.split(',') : null;\n                }\n                this.defaultSkillProfs = Object.keys(skillProficiency).map(e => {\n                    if (e !== 'choose' && e !== 'any') {\n                        return util_capitalizeAll(e) \n                    }\n                }).filter(e => !!e).join(', ');\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultSkillProfs = this.defaultSkillProfs;\n            }\n\n\n            // \"toolProficiencies\" (Dragon Casualty)\n            //     tool list special keys - artisan's tools, musical instruments, gaming set, any, choose.from\n            //     values usually === true or 2\n            const toolProfOptions = []\n            let defaultToolProfs = [];\n            if (this.selectedItem.toolProficiencies && this.selectedItem.toolProficiencies.length) {\n                if (this.selectedItem.toolProficiencies.length > 1) {\n                    // TODO: generated a dropdown for choosing index and add additional suboption components for each choice.\n                    // path of nested suboptions should use an indexed key\n                    // test with Dragon Causualty\n                } else {\n                    if (!this.storedItem.selectedToolProfs || typeof this.storedItem.selectedToolProfs === 'string') {\n                        this.storedItem.selectedToolProfs = {};\n                    }\n                    const toolProficiency = this.selectedItem.toolProficiencies[0];\n\n                    Object.entries(toolProficiency).forEach(([toolKey, toolVal]) => {\n                        const newToolProfOption = {\n                            key: toolKey,\n                            toolProfOptions: toolsListFromCategory(toolKey),\n                            selectedToolProfs: this.storedItem.selectedToolProfs[toolKey] ? this.storedItem.selectedToolProfs[toolKey].split(',') : null\n                        };\n                        switch (toolKey) {\n                            case 'choose':\n                                const toolListsMapped = toolProficiency.choose.from.map(toolsListFromCategory);\n                                newToolProfOption.toolProfOptions = toolListsMapped.flat();\n                                newToolProfOption.toolProfChoices = toolProficiency.choose.count || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case 'any':\n                                newToolProfOption.toolProfChoices = toolProficiency.any || 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n    \n                            case \"artisan's tools\":\n                            case 'musical instrument':\n                            case 'gaming set':\n                                newToolProfOption.label = `Selected ${util_capitalizeAll(toolKey)}`;\n                                newToolProfOption.toolProfChoices = Number.isInteger(toolVal) ? toolVal : 1;\n                                toolProfOptions.push(newToolProfOption);\n                                break;\n                        \n                            default:\n                                defaultToolProfs.push(util_capitalizeAll(toolKey))\n                                break;\n                        }\n\n                    })\n                    defaultToolProfs = defaultToolProfs.filter(e => !!e).join(', ');\n                    // store defaults on character to avoid future look-ups\n                    this.set('defaultToolProfs', defaultToolProfs.length > 0 ? defaultToolProfs : null);\n                    this.storedItem.defaultToolProfs = defaultToolProfs;\n                }\n            }\n            this.set('toolProfOptions', toolProfOptions.length > 0 ? toolProfOptions : null);\n\n\n            // \"languageProficiencies\" \n            //      any: #, anyStandard: #, dwarvish, choose:from, other (this usually? indicates race's own language)\n            // test with  Vedalken\n            const langProfOptions = []\n            let defaultLangProfs = [];\n            if (this.selectedItem.languageProficiencies && this.selectedItem.languageProficiencies.length) {\n                if (!this.storedItem.selectedLangProfs || typeof this.storedItem.selectedLangProfs === 'string') {\n                    this.storedItem.selectedLangProfs = {};\n                }\n                this.selectedItem.languageProficiencies.forEach(langProficiency => {\n                    Object.entries(langProficiency).forEach(([langKey, langVal]) => {\n                        const newLangProfOption = {\n                            key: langKey,\n                            langProfOptions: toolsListFromCategory(langKey),\n                            selectedLangProfs: this.storedItem.selectedLangProfs[langKey] ? this.storedItem.selectedLangProfs[langKey].split(',') : null\n                        };\n                        switch (langKey) {\n                            case 'choose':\n                                newLangProfOption.langProfOptions = langProfOptions.choose.from;\n                                newLangProfOption.langProfChoices = langProficiency.choose.count || 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case 'any':\n                            case 'anyStandard':\n                                newLangProfOption.langProfOptions = LANGUAGES_ALL;\n                                newLangProfOption.langProfChoices = Number.isInteger(langVal) ? langVal : 1;\n                                langProfOptions.push(newLangProfOption);\n                                break;\n\n                            case \"other\":\n                                let name = this.selectedItem.name;\n                                if (name.includes(\"(\")) {\n                                    name = name.substring(0, name.indexOf('(')).trim();\n                                }\n                                defaultLangProfs.push(name);\n                                break;\n                        \n                            default:\n                                defaultLangProfs.push(util_capitalizeAll(langKey))\n                                break;\n                        }\n                    });\n                });\n                defaultLangProfs = defaultLangProfs.filter(e => !!e).join(', ');\n                this.defaultLangProfs = defaultLangProfs.length > 0 ? defaultLangProfs : null;\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultLangProfs = defaultLangProfs;\n            }\n            this.set('langProfOptions', langProfOptions.length > 0 ? langProfOptions : null);\n\n            // todo: \"resist\"\n\n            // \"weaponProficiencies\"\n            //     martial, spmple\n            // \n            //     \"longsword|phb\": true,\n            //\n            //     \"choose\": {\n            //         \t\"fromFilter\": \"type=martial weapon|miscellaneous=mundane\",\n            //         \t\"count\": 2\n            //      }\n            const weaponProfOptions = []\n            let defaultWeaponProfs = [];\n            if (this.selectedItem.weaponProficiencies && this.selectedItem.weaponProficiencies.length) {\n                if (!this.storedItem.selectedWeaponProfs || typeof this.storedItem.selectedWeaponProfs === 'string') {\n                    this.storedItem.selectedWeaponProfs = {};\n                }\n                this.selectedItem.weaponProficiencies.forEach(weaponProficiency => {\n                    Object.entries(weaponProficiency).forEach(([weaponKey, weaponVal]) => {\n                        const newWeaponProfOption = {\n                            key: weaponKey,\n                            selectedWeaponProfs: this.storedItem.selectedWeaponProfs[weaponKey] ? this.storedItem.selectedWeaponProfs[weaponKey].split(',') : null\n                        };\n                        switch (weaponKey) {\n                            case 'any':\n                                newWeaponProfOption.weaponProfOptions = WEAPON_ALL;\n                                newWeaponProfOption.weaponProfChoices = Number.isInteger(weaponVal) ? weaponVal : 1;\n                                weaponProfOptions.push(newWeaponProfOption);\n                                break;\n\n                            case 'choose':\n                                newWeaponProfOption.weaponProfOptions = weaponProfOptions.choose.from === \"martial\" ? WEAPON_MARTIAL : weaponProfOptions.choose.from === \"simple\" ? WEAPON_SIMPLE : WEAPON_ALL;\n                                newWeaponProfOption.weaponProfChoices = weaponProficiency.choose.count || 1;\n                                weaponProfOptions.push(newWeaponProfOption);\n                                break;\n                        \n                            default:\n                                if (weaponKey.includes('|')) {\n                                    const weaponName = weaponKey.split('|')[0];\n                                    defaultWeaponProfs.push(util_capitalizeAll(weaponName))\n                                } else {\n                                    defaultWeaponProfs.push(util_capitalizeAll(weaponKey));\n                                }\n                                break;\n                        }\n                    });\n                });\n                defaultWeaponProfs = defaultWeaponProfs.filter(e => !!e).join(', ');\n            }\n            if (defaultWeaponProfs.length > 0) {\n                this.set(\"defaultWeaponProfs\", defaultWeaponProfs);\n                this.storedItem.defaultWeaponProfs = defaultWeaponProfs;\n\n            } else {\n                this.set(\"defaultWeaponProfs\", null);\n                this.storedItem.defaultWeaponProfs = null;\n\n\n            }\n            this.set(\"defaultWeaponProfs\", defaultWeaponProfs.length > 0 ? defaultWeaponProfs : null);\n            // store defaults on character to avoid future look-ups\n            this.storedItem.defaultWeaponProfs = defaultWeaponProfs;\n            this.set('weaponProfOptions', weaponProfOptions.length > 0 ? weaponProfOptions : null);\n\n\n            // \"armorProficiencies\"\n            //\n            const armorProfOptions = []\n            let defaultArmorProfs = [];\n            if (this.selectedItem.armorProficiencies && this.selectedItem.armorProficiencies.length) {\n                if (!this.storedItem.selectedArmorProfs || typeof this.storedItem.selectedArmorProfs === 'string') {\n                    this.storedItem.selectedArmorProfs = {};\n                }\n                this.selectedItem.armorProficiencies.forEach(armorProficiency => {\n                    Object.entries(armorProficiency).forEach(([armorKey, armorVal]) => {\n                        const newArmorProfOption = {\n                            key: armorKey,\n                            selectedArmorProfs: this.storedItem.selectedArmorProfs[armorKey] ? this.storedItem.selectedArmorProfs[armorKey].split(',') : null\n                        };\n                        switch (armorKey) {\n                            case 'any':\n                                newArmorProfOption.armorProfOptions = [\"light\", \"medium\", \"heavy\", \"shield\"];\n                                newArmorProfOption.armorProfChoices = Number.isInteger(armorVal) ? armorVal : 1;\n                                armorProfOptions.push(newArmorProfOption);\n                                break;\n                        \n                            default:\n                                if (armorKey.includes('|')) {\n                                    const armorName = armorKey.split('|')[0];\n                                    defaultArmorProfs.push(util_capitalizeAll(armorName))\n                                } else {\n                                    defaultArmorProfs.push(util_capitalizeAll(armorKey));\n                                }\n                                break;\n                        }\n                    });\n                });\n                defaultArmorProfs = defaultArmorProfs.filter(e => !!e).join(', ');\n                this.defaultArmorProfs = defaultArmorProfs.length > 0 ? defaultArmorProfs : null;\n                // store defaults on character to avoid future look-ups\n                this.storedItem.defaultArmorProfs = defaultArmorProfs;\n            }\n            this.set('armorProfOptions', armorProfOptions.length > 0 ? armorProfOptions : null);\n\n\n            let defaultDarkvision;\n            if (this.selectedItem.entries) {\n                this.selectedItem.entries\n                    .forEach((entry) => {\n                        if (entry && entry.name && entry.name.toLowerCase() === 'darkvision' \n                                && entry.entries && entry.entries.length) {\n                            const is60 = entry.entries[0].includes('60'),\n                                is120 = entry.entries[0].includes('120');\n                                defaultDarkvision = is120 ? 120 : is60 ? 60 : 0;\n                        }\n                    })\n            }\n\n            this.storedItem.defaultDarkvision = defaultDarkvision || null;\n            this.defaultDarkvision = defaultDarkvision || null;\n\n            // Populating Feat choice field\n            this.featOptions = [];\n            this.featChoices = null;\n            this.selectedFeat = null;\n            if (this.selectedItem.feats) {\n                this.featOptions = await loadModel('feats');\n                this.featChoices = this.selectedItem.feats;\n                this.selectedFeat = this.storedItem.selectedFeat;\n            }\n            \n            this.dispatchEvent(new CustomEvent(\"loadingChange\", { bubbles: true, composed: true }));\n        }\n    }\n\n    _skillProficiencyAddCallback() {\n        return ((skills) => {\n            this.storedItem.selectedSkillProfs = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _toolProficiencyAddCallback(key) {\n        return ((skills) => {\n            this.storedItem.selectedToolProfs[key] = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _langProficiencyAddCallback(key) {\n        return ((skills) => {\n            this.storedItem.selectedLangProfs[key] = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _armorProficiencyAddCallback(key) {\n        return ((skills) => {\n            this.storedItem.selectedArmorProfs[key] = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _weaponProficiencyAddCallback(key) {\n        return ((skills) => {\n            this.storedItem.selectedWeaponProfs[key] = skills.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _attributeAddCallback() {\n        return ((attr) => {\n            this.storedItem.selectedAttributes = attr.join(',');\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _featAddCallback() {\n        return ((feat) => {\n            this.storedItem.selectedFeat = feat;\n            saveCharacter(this.character);\n        }).bind(this);\n    }\n\n    _suboptionStorageKey(storageKey) {\n        return `${storageKey}.suboptions`\n    }\n\n    _showEmpty(isEditMode, value) {\n        return !isEditMode && !value;\n    }\n\n    _exists() {\n        for (let arg of arguments) {\n            if (!!arg && (arg.constructor !== Object || Object.entries(arg).length > 0) && (!Array.isArray(arg) || arg.length > 0)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _plusPrefix(num) {\n        return `+${num}`\n    }\n\n    _plural(str, num, overrideLabel) {\n        const newStr = overrideLabel || str;\n        if (num > 1) {\n            return newStr + 's'\n        }\n        return newStr;\n    }\n\n    _printOptions(selectedOptions, storedItem, key) {\n        let out = []\n        for (const option of selectedOptions) {\n            out = out.concat(storedItem[`selected${key}Profs`][option])\n        }\n        return out.join(', ');\n    }\n\n    static get template() {\n        return html`\n            <style include=\"material-styles\">\n                .some {}\n                :host {\n                    display: block;\n                    white-space: initial;\n                }\n                [hidden] {\n                    display: none !important;\n                }\n                dnd-character-builder-suboptions {\n                    padding-left: 40px;\n                    display: block;\n                }\n                dnd-select-add {\n                    width: 100%;\n                    display: block;\n                }\n                dnd-select-add,\n                dnd-character-builder-suboptions {\n                    width: var(--suboptions__width);\n                    max-width: var(--suboptions__max-width);\n                }\n                .default-selection {\n                    font-size: 14px;\n                    margin-bottom: 6px;\n                }\n                @media(min-width: 420px) {\n                    dnd-select-add {\n                        \n                    }\n                }\n\n                @media(min-width: 921px) {\n                }\n            </style>\n\n            <div class=\"col-wrap\">\n                <div hidden$=\"[[!_exists(defaultAttributes)]]\" class=\"default-selection\"><b>Ability Increase: </b><span>[[defaultAttributes]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultSkillProfs)]]\" class=\"default-selection\"><b>Skills: </b><span>[[defaultSkillProfs]]</span></div>\n                \n                <div hidden$=\"[[!_exists(defaultArmorProfs)]]\" class=\"default-selection\"><b>Armor: </b><span>[[defaultArmorProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultWeaponProfs)]]\" class=\"default-selection\"><b>Weapons: </b><span>[[defaultWeaponProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultToolProfs)]]\" class=\"default-selection\"><b>Tools: </b><span>[[defaultToolProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultLangProfs)]]\" class=\"default-selection\"><b>Languages: </b><span>[[defaultLangProfs]]</span></div>\n\n                <div hidden$=\"[[!_exists(defaultDarkvision)]]\" class=\"default-selection\"><b>Darkvision: </b><span>[[defaultDarkvision]] ft.</span></div>\n\n                <template is=\"dom-if\" if=\"[[_exists(attributeOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\" \n                        placeholder=\"<Select Attribute>\" label='[[_plural(\"Selected Attribute\", attributeChoices)]]'\n                        choices=\"[[attributeChoices]]\" paren=\"[[_plusPrefix(attributeMod)]]\" options=\"[[attributeOptions]]\"\n                        value=\"[[selectedAttributes]]\" add-callback=\"[[_attributeAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(skillProfOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Skill>\" label='[[_plural(\"Selected Skill\", skillProfChoices)]]'\n                        choices=\"[[skillProfChoices]]\" options=\"[[skillProfOptions]]\"\n                        value=\"[[selectedSkillProfs]]\" add-callback=\"[[_skillProficiencyAddCallback()]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[armorProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Armor>\" label='[[_plural(\"Selected Armor\", item.armorProfChoices, item.label)]]'\n                        choices=\"[[item.armorProfChoices]]\" options=\"[[item.armorProfOptions]]\"\n                        value=\"[[item.selectedArmorProfs]]\" add-callback=\"[[_armorProficiencyAddCallback(item.key)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[weaponProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Weapon>\" label='[[_plural(\"Selected Weapon\", item.weaponProfChoices, item.label)]]'\n                        choices=\"[[item.weaponProfChoices]]\" options=\"[[item.weaponProfOptions]]\"\n                        value=\"[[item.selectedWeaponProfs]]\" add-callback=\"[[_weaponProficiencyAddCallback(item.key)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[toolProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Tool>\" label='[[_plural(\"Selected Tool\", item.toolProfChoices, item.label)]]'\n                        choices=\"[[item.toolProfChoices]]\" options=\"[[item.toolProfOptions]]\"\n                        value=\"[[item.selectedToolProfs]]\" add-callback=\"[[_toolProficiencyAddCallback(item.key)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-repeat\" items=\"[[langProfOptions]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Language>\" label='[[_plural(\"Selected Language\", item.langProfChoices, item.label)]]'\n                        choices=\"[[item.langProfChoices]]\" options=\"[[item.langProfOptions]]\"\n                        value=\"[[item.selectedLangProfs]]\" add-callback=\"[[_langProficiencyAddCallback(item.key)]]\">\n                    </dnd-select-add>\n                </template>\n\n                <template is=\"dom-if\" if=\"[[_exists(featOptions)]]\">\n                    <dnd-select-add disabled$=\"[[!isEditMode]]\"\n                        placeholder=\"<Select Feat>\" label=\"Selected Feat\"\n                        options=\"[[featOptions]]\" value=\"[[selectedFeat]]\"\n                        add-callback=\"[[_featAddCallback()]]\">\n                    </dnd-select-add>\n                    \n                    <template is=\"dom-if\" if=\"[[_exists(selectedFeat)]]\"></template>\n                        <dnd-character-builder-suboptions storage-key=\"[[_suboptionStorageKey(storageKey)]]\" selected-item=\"[[selectedFeat]]\"></dnd-character-builder-suboptions>\n                    </template>\n                </template>\n            </div>\n        `;\n    }\n}\n\ncustomElements.define(\"dnd-character-builder-suboptions\", DndCharacterBuilderSuboptions);\n"],"sourceRoot":""}